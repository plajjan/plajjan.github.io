<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
<channel>
<title>Network Automation ramblings by Kristian Larsson</title>
<description>Network Automation ramblings by Kristian Larsson</description>
<link>https://plajjan.github.io/</link>
<lastBuildDate>Wed, 29 Jan 2020 12:04:16 +0100</lastBuildDate>
<item>
  <title>Convert XML to JSON</title>
  <description><![CDATA[
<p>
Any network device that has a NETCONF interface will send data using XML. NETCONF interfaces are typically YANG modeled. If you prefer JSON or YAML, you can easily convert YANG modeled data from an XML representation.
</p>

<p>
This is a hands on guide. Read on to the end if you want to understand why this can only be correctly done for YANG modeled data or why it's otherwise difficult and why you need the YANG model.
</p>

<p>
We'll use <code>yanglint</code>. <code>yanglint</code> comes as a part of <code>libyang</code>. Install <code>libyang</code> and you'll get <code>yanglint</code>.
</p>

<p>
Feed the XML together with the YANG model(s) describing the data into yanglint and ask for a conversion of the data by using <code>--format json</code>. <code>yanglint</code> will also validate the XML data according to YANG model.
</p>

<div class="org-src-container">
<pre class="src src-sh">kll@minemacs:~/yang-test$ yanglint --strict tubecats.yang data1.xml --format json 
<span style="color: #4f97d7;">{</span>
  <span style="color: #2d9574;">"tubecats:internet"</span>: <span style="color: #bc6ec5;">{</span>
    <span style="color: #2d9574;">"cat"</span>: <span style="color: #2d9574;">[</span>
      <span style="color: #67b11d;">{</span>
        <span style="color: #2d9574;">"name"</span>: <span style="color: #2d9574;">"jingles"</span>
      <span style="color: #67b11d;">}</span>,
      <span style="color: #67b11d;">{</span>
        <span style="color: #2d9574;">"name"</span>: <span style="color: #2d9574;">"fluffy"</span>
      <span style="color: #67b11d;">}</span>
    <span style="color: #2d9574;">]</span>
  <span style="color: #bc6ec5;">}</span>
<span style="color: #4f97d7;">}</span>

kll@minemacs:~/yang-test$ echo $<span style="color: #7590db;">?</span>
</pre>
</div>

<p>
The output is a JSON document. You can pipe it to a file or use <code>-o FILE</code> to specify the output filename.
</p>

<p>
The output was converted from this input XML:
</p>

<div class="org-src-container">
<pre class="src src-xml">&lt;<span style="color: #4f97d7;">ns0</span>:<span style="color: #bc6ec5; font-weight: bold;">data</span> <span style="color: #4f97d7;">xmlns</span>:<span style="color: #7590db;">ns0</span>=<span style="color: #2d9574;">"urn:ietf:params:xml:ns:netconf:base:1.0"</span>&gt;
    &lt;<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">internet</span> <span style="color: #4f97d7;">xmlns</span>:<span style="color: #7590db;">tc</span>=<span style="color: #2d9574;">"http://plajjan.github.io/ns/yang/tubecats"</span>&gt;
        &lt;<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">cat</span>&gt;
            &lt;<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">name</span>&gt;jingles&lt;/<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">name</span>&gt;
        &lt;/<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">cat</span>&gt;
        &lt;<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">cat</span>&gt;
            &lt;<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">name</span>&gt;fluffy&lt;/<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">name</span>&gt;
        &lt;/<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">cat</span>&gt;
    &lt;/<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">internet</span>&gt;
&lt;/<span style="color: #4f97d7;">ns0</span>:<span style="color: #bc6ec5; font-weight: bold;">data</span>&gt;
</pre>
</div>

<p>
And here is the YANG module that defines the schema for the data:
</p>

<div class="org-src-container">
<pre class="src src-yang"><span style="color: #4f97d7; font-weight: bold;">module</span> <span style="color: #ce537a; font-weight: bold;">tubecats</span> <span style="color: #4f97d7;">{</span>
    <span style="color: #4f97d7; font-weight: bold;">namespace</span> <span style="color: #2d9574;">"http://plajjan.github.io/ns/yang/tubecats"</span>;
    <span style="color: #4f97d7; font-weight: bold;">prefix</span> <span style="color: #ce537a; font-weight: bold;">tc</span>;

    <span style="color: #4f97d7; font-weight: bold;">revision</span> <span style="color: #a45bad;">2017-03-15</span> <span style="color: #bc6ec5;">{</span>
        <span style="color: #4f97d7; font-weight: bold;">description</span> <span style="color: #2d9574;">"First and only version"</span>;
    <span style="color: #bc6ec5;">}</span>

    <span style="color: #4f97d7; font-weight: bold;">container</span> <span style="color: #ce537a; font-weight: bold;">internet</span> <span style="color: #bc6ec5;">{</span>
        <span style="color: #4f97d7; font-weight: bold;">list</span> <span style="color: #ce537a; font-weight: bold;">cat</span> <span style="color: #2d9574;">{</span>
            <span style="color: #4f97d7; font-weight: bold;">key</span> <span style="color: #ce537a; font-weight: bold;">name</span>;
            <span style="color: #4f97d7; font-weight: bold;">leaf</span> <span style="color: #ce537a; font-weight: bold;">name</span> <span style="color: #67b11d;">{</span>
                <span style="color: #4f97d7; font-weight: bold;">type</span> <span style="color: #ce537a; font-weight: bold;">string</span>;
            <span style="color: #67b11d;">}</span>
        <span style="color: #2d9574;">}</span>
    <span style="color: #bc6ec5;">}</span>
<span style="color: #4f97d7;">}</span>
</pre>
</div>

<div id="outline-container-org2392796" class="outline-2">
<h2 id="org2392796">Conversion to and from YAML</h2>
<div class="outline-text-2" id="text-org2392796">
<p>
As there is no standardized representation of YANG modeled data for YAML, <code>yanglint</code> does not support YAML as an input or output format. However, as the encoding of data in YAML has the same concepts as JSON, it is trivial to convert from JSON to YAML or vice versa with standard tools. Here is an example Python script that will do the conversion:
</p>
<div class="org-src-container">
<pre class="src src-python3">#!/usr/bin/env python3
import json
import sys
import yaml

jf = open(sys.argv[1])

print(yaml.dump(json.load(jf)))
</pre>
</div>

<p>
and similarly in the reverse direction:
</p>

<div class="org-src-container">
<pre class="src src-python3">#!/usr/bin/env python3
import json
import sys
import yaml

yf = open(sys.argv[1])

print(json.dumps(yaml.load(yf)))
</pre>
</div>

<p>
To use it, we pipe the output from our XML to JSON conversion on to the Python script that does JSON to YAML conversion. Behold:
</p>

<div class="org-src-container">
<pre class="src src-sh">kll@minemacs:~/yang-test$ yanglint --strict tubecats.yang data1.xml --format json | ./j2y.py /dev/stdin
tubecats:internet:
cat:
- <span style="color: #4f97d7;">{</span>name: jingles<span style="color: #4f97d7;">}</span>
- <span style="color: #4f97d7;">{</span>name: fluffy<span style="color: #4f97d7;">}</span>

kll@minemacs:~/yang-test$
</pre>
</div>

<p>
And again, for the reverse direction we pipe it yet another time to the YAML to JSON Python script and end up with JSON data again.
</p>

<div class="org-src-container">
<pre class="src src-sh">kll@minemacs:~/yang-test$ yanglint --strict tubecats.yang data1.xml --format json | ./j2y.py /dev/stdin | ./y2j.py /dev/stdin | jq
<span style="color: #4f97d7;">{</span>
    <span style="color: #2d9574;">"tubecats:internet"</span>: <span style="color: #bc6ec5;">{</span>
        <span style="color: #2d9574;">"cat"</span>: <span style="color: #2d9574;">[</span>
            <span style="color: #67b11d;">{</span>
                <span style="color: #2d9574;">"name"</span>: <span style="color: #2d9574;">"jingles"</span>
            <span style="color: #67b11d;">}</span>,
            <span style="color: #67b11d;">{</span>
                <span style="color: #2d9574;">"name"</span>: <span style="color: #2d9574;">"fluffy"</span>
            <span style="color: #67b11d;">}</span>
        <span style="color: #2d9574;">]</span>
    <span style="color: #bc6ec5;">}</span>
<span style="color: #4f97d7;">}</span>
</pre>
</div>

<p>
I wrote the program to read a file and not stdin so when piping we give it the file /dev/stdin which then accomplishes the same thing. I also run jq at the end to nicely format the JSON output as <code>json.dumps</code> just writes the whole JSON string on one line.
</p>
</div>
</div>

<div id="outline-container-org6f97c6a" class="outline-2">
<h2 id="org6f97c6a">Why is it difficult to convert XML to JSON?</h2>
<div class="outline-text-2" id="text-org6f97c6a">
<p>
XML is a markup language to express nodes. A node can be contained within another node and there can be sibling nodes. There are no constructs for things like lists (arrays) or associative lists (hashes/dicts). JSON or YAML on the other hand has constructs for lists - it is embedded in the format itself. When converting to JSON we must know if something is a list but that information is simply not contained within XML, thus there is no generic conversion that produces a standardized output.
</p>

<p>
However, with YANG we have two standardized representations with XML and JSON. These standards define what, for example a YANG list, looks like in XML or JSON. With the support of a YANG schema we can thus convert in a precise and lossless fashion between the two formats.
</p>
</div>
</div>
<div class="taglist"><a href="tags.html">Tags</a>: <a href="tag-nso.html">NSO</a> </div>]]></description>
  <category>NSO</category>
  <link>https://plajjan.github.io/2020-01-29-convert-xml-to-json-and-yaml.html</link>
  <pubDate>Wed, 29 Jan 2020 11:00:00 +0100</pubDate>
</item>
<item>
  <title>What's the use of presence containers in YANG?</title>
  <description><![CDATA[
<p>
I got the question on what presence containers are good for - what makes them useful?
</p>

<p>
P-containers is often used a short term for presence containers, meaning a container that has a <code>presence</code> statement in under in. In contract there are also NP-containers, or non-presence containers, which are really just plain containers without a <code>presence</code> statement but sometimes it's easier being explicit what the container is about.
</p>

<p>
YANG is a rather neat data modeling language. It is simple yet expressive enough to often allow something to be modeled in multiple different ways. While we are de facto defining a model when we write something in YANG, I think of it more as describing something already existing. Like how you have a thought in your mind and when you speak it out aloud, all you do is dress it with words from the English (or some other) language. There are many ways in which you can express something in English and the meaning you convey will differ ever so slightly, yet that thought in your mind isn't shaped by the words you use to describe it. The words are there to describe the thought, not the other way around. Similarly with YANG, you have an object, something that exists in reality or in thought and now you must model it. It will very likely be a simplified model and lack some of the detail of the original but nonetheless it will be a model.
</p>

<p>
A container, in it's most basic shape and form, offer nothing besides acting as a <i>container</i> - something that contains other things. Adding the <code>presence</code> statement to a container in YANG allows the presence of the container in the configuration to mean something.
</p>

<p>
Let's do a simple example. For the sake of brevity, I'm skipping various required nodes like namespace etc.
</p>

<div class="org-src-container">
<pre class="src src-yang"><span style="color: #4f97d7; font-weight: bold;">module</span> <span style="color: #ce537a; font-weight: bold;">router</span> <span style="color: #4f97d7;">{</span>
  <span style="color: #4f97d7; font-weight: bold;">container</span> <span style="color: #ce537a; font-weight: bold;">bgp</span> <span style="color: #bc6ec5;">{</span>
    <span style="color: #4f97d7; font-weight: bold;">leaf</span> <span style="color: #ce537a; font-weight: bold;">asn</span> <span style="color: #2d9574;">{</span>
      <span style="color: #4f97d7; font-weight: bold;">type</span> <span style="color: #ce537a; font-weight: bold;">uint32</span>;
      <span style="color: #4f97d7; font-weight: bold;">description</span> <span style="color: #2d9574;">"AS number of this router"</span>;
    <span style="color: #2d9574;">}</span>
    <span style="color: #4f97d7; font-weight: bold;">leaf</span> <span style="color: #ce537a; font-weight: bold;">router-id</span> <span style="color: #2d9574;">{</span>
      <span style="color: #4f97d7; font-weight: bold;">type</span> <span style="color: #ce537a; font-weight: bold;">uint32</span>;
      <span style="color: #4f97d7; font-weight: bold;">description</span> <span style="color: #2d9574;">"router-id of this router"</span>;
    <span style="color: #2d9574;">}</span>
  <span style="color: #bc6ec5;">}</span>
<span style="color: #4f97d7;">}</span>
</pre>
</div>

<p>
On this router we can configure the AS number to be used for its BGP daemon through the configuration leaf <code>asn</code>. Similarly, we have the leaf <code>router-id</code> which can be set to the router-id of the device. The <code>bgp</code> container is a standard container, or NP-container, meaning that it only exists when a child node of it exists. If neither <code>asn</code> nor <code>router-id</code> is set, the <code>bgp</code> container won't show up in the configuration whereas if either <code>asn</code> or <code>router-id</code> is set, the <code>bgp</code> container will show up. It's presence or not does not carry any meaning beyond containing the <code>asn</code> and <code>router-id</code> leaf.
</p>

<p>
Now let's say we want to refine our model a bit. It's not possible to run a BGP daemon without having the <code>asn</code> and <code>router-id</code> configured, thus we make the two leaves mandatory!
</p>

<div class="org-src-container">
<pre class="src src-yang"><span style="color: #4f97d7; font-weight: bold;">module</span> <span style="color: #ce537a; font-weight: bold;">router</span> <span style="color: #4f97d7;">{</span>
  <span style="color: #4f97d7; font-weight: bold;">container</span> <span style="color: #ce537a; font-weight: bold;">bgp</span> <span style="color: #bc6ec5;">{</span>
    <span style="color: #4f97d7; font-weight: bold;">leaf</span> <span style="color: #ce537a; font-weight: bold;">asn</span> <span style="color: #2d9574;">{</span>
      <span style="color: #4f97d7; font-weight: bold;">type</span> <span style="color: #ce537a; font-weight: bold;">uint32</span>;
      <span style="color: #4f97d7; font-weight: bold;">description</span> <span style="color: #2d9574;">"AS number of this router"</span>;
      <span style="color: #4f97d7; font-weight: bold;">mandatory</span> <span style="color: #a45bad;">true</span>;
    <span style="color: #2d9574;">}</span>
    <span style="color: #4f97d7; font-weight: bold;">leaf</span> <span style="color: #ce537a; font-weight: bold;">router-id</span> <span style="color: #2d9574;">{</span>
      <span style="color: #4f97d7; font-weight: bold;">type</span> <span style="color: #ce537a; font-weight: bold;">uint32</span>;
      <span style="color: #4f97d7; font-weight: bold;">description</span> <span style="color: #2d9574;">"router-id of this router"</span>;
      <span style="color: #4f97d7; font-weight: bold;">mandatory</span> <span style="color: #a45bad;">true</span>;
    <span style="color: #2d9574;">}</span>
  <span style="color: #bc6ec5;">}</span>
<span style="color: #4f97d7;">}</span>
</pre>
</div>

<p>
However, this raises the next problem. Now you <b>always</b> have to configure both <code>asn</code> and <code>router-id</code>, even when you don't want to run BGP! How do we fix this? We could add an <code>enabled</code> leaf under BGP, conveying whether BGP is enabled or not and only if it is enabled then must <code>asn</code> and <code>router-id</code> be set!
</p>

<div class="org-src-container">
<pre class="src src-yang"><span style="color: #4f97d7; font-weight: bold;">module</span> <span style="color: #ce537a; font-weight: bold;">router</span> <span style="color: #4f97d7;">{</span>
  <span style="color: #4f97d7; font-weight: bold;">container</span> <span style="color: #ce537a; font-weight: bold;">bgp</span> <span style="color: #bc6ec5;">{</span>
    <span style="color: #4f97d7; font-weight: bold;">leaf</span> <span style="color: #ce537a; font-weight: bold;">enabled</span> <span style="color: #2d9574;">{</span>
      <span style="color: #4f97d7; font-weight: bold;">type</span> <span style="color: #ce537a; font-weight: bold;">boolean</span>;
      <span style="color: #4f97d7; font-weight: bold;">description</span> <span style="color: #2d9574;">"Enable BGP"</span>;
      <span style="color: #4f97d7; font-weight: bold;">default</span> <span style="color: #a45bad;">false</span>;
    <span style="color: #2d9574;">}</span>
    <span style="color: #4f97d7; font-weight: bold;">leaf</span> <span style="color: #ce537a; font-weight: bold;">asn</span> <span style="color: #2d9574;">{</span>
      <span style="color: #4f97d7; font-weight: bold;">type</span> <span style="color: #ce537a; font-weight: bold;">uint32</span>;
      <span style="color: #4f97d7; font-weight: bold;">description</span> <span style="color: #2d9574;">"AS number of this router"</span>;
      <span style="color: #4f97d7; font-weight: bold;">mandatory</span> <span style="color: #a45bad;">true</span>;
      <span style="color: #4f97d7; font-weight: bold;">when</span> <span style="color: #2d9574;">"../enabled='true'"</span>;
    <span style="color: #2d9574;">}</span>
    <span style="color: #4f97d7; font-weight: bold;">leaf</span> <span style="color: #ce537a; font-weight: bold;">router-id</span> <span style="color: #2d9574;">{</span>
      <span style="color: #4f97d7; font-weight: bold;">type</span> <span style="color: #ce537a; font-weight: bold;">uint32</span>;
      <span style="color: #4f97d7; font-weight: bold;">description</span> <span style="color: #2d9574;">"router-id of this router"</span>;
      <span style="color: #4f97d7; font-weight: bold;">mandatory</span> <span style="color: #a45bad;">true</span>;
      <span style="color: #4f97d7; font-weight: bold;">when</span> <span style="color: #2d9574;">"../enabled='true'"</span>;
    <span style="color: #2d9574;">}</span>
  <span style="color: #bc6ec5;">}</span>
<span style="color: #4f97d7;">}</span>
</pre>
</div>

<p>
We also add a <code>when</code> statement to the <code>asn</code> and <code>router-id</code> leaves so they only show up after enabled has been set. The <code>mandatory</code> statement only has effect when the <code>when</code> statement evaluates to <code>true</code>. This works&#x2026; but it's not <i>natural</i>. Remember how we aren't really defining the thing we are modeling? We are just observing it and then expressing what we see through the YANG model. There are occasions for when this <code>when</code> statement in combination with a <code>mandatory true</code> is the right solution but this is not it. I think the <i>natural</i> way of modeling this is by making the <code>bgp</code> container into a presence container!
</p>

<div class="org-src-container">
<pre class="src src-yang"><span style="color: #4f97d7; font-weight: bold;">module</span> <span style="color: #ce537a; font-weight: bold;">router</span> <span style="color: #4f97d7;">{</span>
  <span style="color: #4f97d7; font-weight: bold;">container</span> <span style="color: #ce537a; font-weight: bold;">bgp</span> <span style="color: #bc6ec5;">{</span>
    <span style="color: #4f97d7; font-weight: bold;">presence</span> <span style="color: #ce537a; font-weight: bold;">bgp</span>;
    <span style="color: #4f97d7; font-weight: bold;">leaf</span> <span style="color: #ce537a; font-weight: bold;">asn</span> <span style="color: #2d9574;">{</span>
      <span style="color: #4f97d7; font-weight: bold;">type</span> <span style="color: #ce537a; font-weight: bold;">uint32</span>;
      <span style="color: #4f97d7; font-weight: bold;">description</span> <span style="color: #2d9574;">"AS number of this router"</span>;
      <span style="color: #4f97d7; font-weight: bold;">mandatory</span> <span style="color: #a45bad;">true</span>;
    <span style="color: #2d9574;">}</span>
    <span style="color: #4f97d7; font-weight: bold;">leaf</span> <span style="color: #ce537a; font-weight: bold;">router-id</span> <span style="color: #2d9574;">{</span>
      <span style="color: #4f97d7; font-weight: bold;">type</span> <span style="color: #ce537a; font-weight: bold;">uint32</span>;
      <span style="color: #4f97d7; font-weight: bold;">description</span> <span style="color: #2d9574;">"router-id of this router"</span>;
      <span style="color: #4f97d7; font-weight: bold;">mandatory</span> <span style="color: #a45bad;">true</span>;
    <span style="color: #2d9574;">}</span>
  <span style="color: #bc6ec5;">}</span>
<span style="color: #4f97d7;">}</span>
</pre>
</div>

<p>
Now it becomes possible to explicitly configure the <code>bgp</code> container node itself. As soon as we have created the <code>bgp</code> node, the <code>mandatory</code> statements in under <code>asn</code> and <code>router-id</code> force us to also enter values for them, but without having set the <code>bgp</code> node, like when we simply don't want to run BGP, then we also are not required to enter the <code>asn</code> and <code>router-id</code>.
</p>

<p>
Even with <code>bgp</code> as a P-container, there's a reason to keep the enabled leaf; we might want to be able to configure BGP but not <i>enable</i> it. At least for a human, to shut down the BGP daemon, it is a lot easier to flip a single enabled leaf than it is to remove the entire BGP configuration. Having an enabled leaf allows this.
</p>

<div class="org-src-container">
<pre class="src src-yang"><span style="color: #4f97d7; font-weight: bold;">module</span> <span style="color: #ce537a; font-weight: bold;">router</span> <span style="color: #4f97d7;">{</span>
  <span style="color: #4f97d7; font-weight: bold;">container</span> <span style="color: #ce537a; font-weight: bold;">bgp</span> <span style="color: #bc6ec5;">{</span>
    <span style="color: #4f97d7; font-weight: bold;">presence</span> <span style="color: #ce537a; font-weight: bold;">bgp</span>;
    <span style="color: #4f97d7; font-weight: bold;">leaf</span> <span style="color: #ce537a; font-weight: bold;">enabled</span> <span style="color: #2d9574;">{</span>
      <span style="color: #4f97d7; font-weight: bold;">type</span> <span style="color: #ce537a; font-weight: bold;">boolean</span>;
      <span style="color: #4f97d7; font-weight: bold;">description</span> <span style="color: #2d9574;">"Enable BGP"</span>;
      <span style="color: #4f97d7; font-weight: bold;">default</span> <span style="color: #a45bad;">true</span>;
    <span style="color: #2d9574;">}</span>
    <span style="color: #4f97d7; font-weight: bold;">leaf</span> <span style="color: #ce537a; font-weight: bold;">asn</span> <span style="color: #2d9574;">{</span>
      <span style="color: #4f97d7; font-weight: bold;">type</span> <span style="color: #ce537a; font-weight: bold;">uint32</span>;
      <span style="color: #4f97d7; font-weight: bold;">description</span> <span style="color: #2d9574;">"AS number of this router"</span>;
      <span style="color: #4f97d7; font-weight: bold;">mandatory</span> <span style="color: #a45bad;">true</span>;
    <span style="color: #2d9574;">}</span>
    <span style="color: #4f97d7; font-weight: bold;">leaf</span> <span style="color: #ce537a; font-weight: bold;">router-id</span> <span style="color: #2d9574;">{</span>
      <span style="color: #4f97d7; font-weight: bold;">type</span> <span style="color: #ce537a; font-weight: bold;">uint32</span>;
      <span style="color: #4f97d7; font-weight: bold;">description</span> <span style="color: #2d9574;">"router-id of this router"</span>;
      <span style="color: #4f97d7; font-weight: bold;">mandatory</span> <span style="color: #a45bad;">true</span>;
    <span style="color: #2d9574;">}</span>
  <span style="color: #bc6ec5;">}</span>
<span style="color: #4f97d7;">}</span>
</pre>
</div>

<p>
While my example is somewhat contrived I think it brings the point of across of what an elegant model might look like and when a P-container helps us achieve that goal. Happy modeling!
</p>
<div class="taglist"><a href="tags.html">Tags</a>: <a href="tag-yang.html">YANG</a> </div>]]></description>
  <category>YANG</category>
  <link>https://plajjan.github.io/2019-11-11-whats-the-use-of-presence-containers.html</link>
  <pubDate>Mon, 11 Nov 2019 08:00:00 +0100</pubDate>
</item>
<item>
  <title>There is no golden configuration - using Cisco NSO services for everything</title>
  <description><![CDATA[
<div class="abstract">
<p>
Using services in Cisco NSO to enable management of the full life cycle of configuration.
</p>

</div>

<nav id="table-of-contents">
<h2>Table of Contents</h2>
<div id="text-table-of-contents">
<ul>
<li><a href="#org47adf08">1. TL;DR;</a></li>
<li><a href="#orgc379023">2. Golden configuration</a></li>
<li><a href="#orga212865">3. FASTMAP and reference counting in Cisco NSO</a></li>
</ul>
</div>
</nav>

<div id="outline-container-org47adf08" class="outline-2">
<h2 id="org47adf08"><span class="section-number-2">1</span> TL;DR;</h2>
<div class="outline-text-2" id="text-1">
<p>
Use services in Cisco NSO for everything you configure on your devices.
</p>
</div>
</div>


<div id="outline-container-orgc379023" class="outline-2">
<h2 id="orgc379023"><span class="section-number-2">2</span> Golden configuration</h2>
<div class="outline-text-2" id="text-2">
<p>
If you've been in the networking business for some time you'll likely be familiar with the term "golden configuration". A sort of master template for how configuration should look. It brings associations to something that is perfect - like a golden statue on a pedestal.
</p>


<figure>
<img src="images/Golden_statue_on_Pont_Alexandre_III_1.jpg" alt="Golden_statue_on_Pont_Alexandre_III_1.jpg">

</figure>



<p>
It is however a flawed idea. There is no such thing as a perfect configuration. Times change and so needs the configuration.
</p>

<p>
Somewhat similarly is the concept of day 0 or day 1 (ah, an off-by-one error!?) configuration. It's the idea of a configuration you put on the device when you initially configure it. There's usually nothing defined for managing the life cycle of this "day 0" or "initial" configuration and so it becomes outdated on devices that were installed a long time ago.
</p>

<p>
The name "day 0" has a temporal association as the name implies it is something you only do on the first day whereas in reality it is something you must configure on many days - to be precise; every day that you change that configuration! I prefer to call this "base configuration" as it removes that connotation of "configure once on first day". The device base configuration is a living thing and you must manage its life cycle.
</p>

<p>
We have to be able to manage the life cycle of configuration, like:
</p>
<ul class="org-ul">
<li>adding new leaves</li>
<li>changing value of leaves, lists etc</li>
<li>removing leaves, list entries etc</li>
</ul>

<p>
For example, today we configure DNS servers:
</p>
<ul class="org-ul">
<li><code>8.8.8.8</code></li>
<li><code>1.1.1.1</code></li>
</ul>

<p>
Tomorrow we realize we don't want neither <code>8.8.8.8</code> nor <code>1.1.1.1</code>. We want to replace those entries (in a list) with our own DNS <code>192.0.2.1</code>. Changing the golden day 0 configuration on disk is simple, we just edit the file and remove two entries and add another but we must then synchronize this change to the device in our network. We must keep track of what we have added in the past so we can send the configuration delta.
</p>
</div>
</div>


<div id="outline-container-orga212865" class="outline-2">
<h2 id="orga212865"><span class="section-number-2">3</span> FASTMAP and reference counting in Cisco NSO</h2>
<div class="outline-text-2" id="text-3">
<p>
Cisco NSO uses an algorithm known as FASTMAP to reference count configuration items that are written by the <code>create</code> function of services. FASTMAP is one of the foundational pillars of the seamless and convenient configuration provisioning we get with Cisco NSO. We can declaratively define what the configuration should look like and the system will figure out the rest.
</p>

<p>
In contrast, using device templates, we won't get reference counting which means that removing leaves won't happen automatically. If we have set leaf X in our golden configuration today, pushed it to a thousand devices and want to remove it tomorrow, we have to do that manually.
</p>

<p>
There seems to be a trend to use device templates for this day 0 / golden configuration style use cases in Cisco NSO and I quite frankly don't understand why. The only reason I see for using device templates at all is because they could be easier to work with, depending on your perspective. Device templates live as part of the configuration in NSO and so it is editable from the NSO CLI. For people with a networking background, this is probably more intuitive than using services and their configuration templates as one has to edit files, create NSO packages etc. However, using Cisco NSO without using services is a complete waste of potential. Get over the hurdle and start writing services for all!
</p>

<p>
Enable the power of FASTMAP. Use services for everything you configure on your devices.
</p>
</div>
</div>
<div class="taglist"><a href="tags.html">Tags</a>: <a href="tag-nso,.html">NSO,</a> <a href="tag-ncs,.html">NCS,</a> <a href="tag-network.html">network</a> <a href="tag-automation.html">automation</a> </div>]]></description>
  <category>NSO,</category>
  <category>NCS,</category>
  <category>network</category>
  <category>automation</category>
  <link>https://plajjan.github.io/2019-09-24-there-is-no-golden-configuration.html</link>
  <pubDate>Tue, 24 Sep 2019 00:00:00 +0200</pubDate>
</item>
<item>
  <title>Writing a Python background worker for Cisco NSO - finale</title>
  <description><![CDATA[

<div id="outline-container-org11370df" class="outline-2">
<h2 id="org11370df">Writing a Python background worker for Cisco NSO - finale</h2>
<div class="outline-text-2" id="text-org11370df">
<p>
Having read through the previous two parts (<a href="./2019-07-25-writing-a-background-worker-for-cisco-nso.html">1</a>, <a href="./2019-07-26-writing-a-background-worker-for-cisco-nso-part-deux.html">2</a>) you know we now have an implementation that actually works and behaves, at least in regards to the most important properties, the way we want. In this last part I would like to explain some of the implementation details, in particular how we efficiently wait for events.
</p>

<p>
All daemons, or computer applications running in the background, typically have a number of things they need to continuously perform. If it's a web server, we need to look for new incoming connections and then perform the relevant HTTP query handling. A naive implementation could repeatedly ask, or <i>poll</i>, the socket if there is anything new. If we want to react quickly, then we would have to poll very frequently which in turn means that we will use up a lot of CPU. If there are a lot of requests then this could make sense, in fact many network interface drivers use polling as it is much more efficient than being interrupt based. Polling 1000 times per second means that we will notice anything incoming within a maximum of 1 millisecond and for each poll we can efficiently batch handle all the incoming requests (assuming there are more than 1000 request per second). If there aren't that many incoming requests though, it is probably better finding a pattern where we can sleep and be awoken only when there is a request. This is what interrupts can provide to the CPU. UNIX processes don't have interrupts, instead there are signals which act in a similar way and can interrupt what the program is currently doing. It's often used for stopping the application (KILL signal) or reconfiguring it (HUP signal).
</p>

<p>
There are good use cases for signals but overall they are not the primary means of driving an application control flow. They are meant as simple inputs to a UNIX process from the <i>outside</i>.
</p>

<p>
Smart people realized many moons ago that we needed ways to efficiently wait for input and this is why we have things like <code>select()</code> and <code>poll()</code> which can efficiently wait for a file descriptor to become readable.
</p>

<p>
By <i>efficiently</i>, I mean it is able to wait for something to happen without consuming a lot of CPU resources yet is able to immediately wake up and return when something has happened. Not only can <code>select()</code> efficiently wait for something to happen on a file descriptor, it can wait on <b>multiple</b> file descriptors.
</p>

<p>
Everything in UNIX is a file, which means that sockets have file descriptors too, so we can <i>wait</i> on a bunch of sockets and multiple files all using the same <code>select()</code> call. This is the basis for many of the daemons that exist today.
</p>

<p>
Now for the background worker in NCS we have multiple events we want to observe and react to:
</p>
<ul class="org-ul">
<li>react to NCS package events (redeploy primarily)</li>
<li>react to the background worker dying (supervisor style)</li>
<li>react to changes of the configuration for our background worker (enabled or not)</li>
<li>react to HA events</li>
</ul>

<p>
Are all these sockets or file descriptors that we can wait on with a <code>select()</code> call? As it turns out, yes, but it wasn't very obvious from the beginning.
</p>
</div>


<div id="outline-container-org9577b2e" class="outline-3">
<h3 id="org9577b2e">Thread whispering</h3>
<div class="outline-text-3" id="text-org9577b2e">
<p>
When a package is redeployed or reloaded, NCS will stop the currently running instance by calling the <code>teardown()</code> function of each component thread. This is where we then in turn can call the <code>stop()</code> function on the various threads or processes we are running. Thus, the interface here for the incoming data is a function but we then have to propagate this information from our function to our main thread. If you remember from the <a href="./2019-07-25-writing-a-background-worker-for-cisco-nso.html">first part</a> we had a silly naive implementation of a background worker that looked like this:
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">-*- mode: python; python-indent: 4 -*-</span>
<span style="color: #4f97d7; font-weight: bold;">import</span> threading
<span style="color: #4f97d7; font-weight: bold;">import</span> time

<span style="color: #4f97d7; font-weight: bold;">import</span> ncs
<span style="color: #4f97d7; font-weight: bold;">from</span> ncs.application <span style="color: #4f97d7; font-weight: bold;">import</span> Service


<span style="color: #4f97d7; font-weight: bold;">class</span> <span style="color: #ce537a; font-weight: bold;">BgWorker</span><span style="color: #4f97d7;">(</span>threading.Thread<span style="color: #4f97d7;">)</span>:
    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">run</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">while</span> <span style="color: #a45bad;">True</span>:
            <span style="color: #4f97d7; font-weight: bold;">print</span><span style="color: #4f97d7;">(</span><span style="color: #2d9574;">"Hello from background worker"</span><span style="color: #4f97d7;">)</span>
            time.sleep<span style="color: #4f97d7;">(</span><span style="color: #a45bad;">1</span><span style="color: #4f97d7;">)</span>


<span style="color: #4f97d7; font-weight: bold;">class</span> <span style="color: #ce537a; font-weight: bold;">Main</span><span style="color: #4f97d7;">(</span>ncs.application.Application<span style="color: #4f97d7;">)</span>:
    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">setup</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">self</span>.log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">'Main RUNNING'</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.bgw = BgWorker<span style="color: #4f97d7;">()</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.bgw.start<span style="color: #4f97d7;">()</span>

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">teardown</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">self</span>.log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">'Main FINISHED'</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.bgw.stop<span style="color: #4f97d7;">()</span>
</pre>
</div>

<p>
and since it had no way to signal to the threads <code>run()</code> function that it should stop, it would never stop. We quickly realized this and improved it to:
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">-*- mode: python; python-indent: 4 -*-</span>
<span style="color: #4f97d7; font-weight: bold;">import</span> threading
<span style="color: #4f97d7; font-weight: bold;">import</span> time

<span style="color: #4f97d7; font-weight: bold;">import</span> ncs
<span style="color: #4f97d7; font-weight: bold;">from</span> ncs.application <span style="color: #4f97d7; font-weight: bold;">import</span> Service


<span style="color: #4f97d7; font-weight: bold;">class</span> <span style="color: #ce537a; font-weight: bold;">BgWorker</span><span style="color: #4f97d7;">(</span>threading.Thread<span style="color: #4f97d7;">)</span>:
    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">__init__</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        threading.Thread.__init__<span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>._exit_flag = threading.Event<span style="color: #4f97d7;">()</span>

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">run</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">while</span> <span style="color: #4f97d7; font-weight: bold;">not</span> <span style="color: #4f97d7; font-weight: bold;">self</span>._exit_flag.wait<span style="color: #4f97d7;">(</span>timeout=<span style="color: #a45bad;">1</span><span style="color: #4f97d7;">)</span>:
            <span style="color: #4f97d7; font-weight: bold;">print</span><span style="color: #4f97d7;">(</span><span style="color: #2d9574;">"Hello from background worker"</span><span style="color: #4f97d7;">)</span>

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">stop</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">self</span>._exit_flag.<span style="color: #4f97d7;">set</span><span style="color: #4f97d7;">()</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.join<span style="color: #4f97d7;">()</span>


<span style="color: #4f97d7; font-weight: bold;">class</span> <span style="color: #ce537a; font-weight: bold;">Main</span><span style="color: #4f97d7;">(</span>ncs.application.Application<span style="color: #4f97d7;">)</span>:
    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">setup</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">self</span>.log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">'Main RUNNING'</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.bgw = BgWorker<span style="color: #4f97d7;">()</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.bgw.start<span style="color: #4f97d7;">()</span>

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">teardown</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">self</span>.log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">'Main FINISHED'</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.bgw.stop<span style="color: #4f97d7;">()</span>
</pre>
</div>

<p>
where we use a <code>threading.Event</code> as the means to signal into the thread <code>run()</code> method that we want it to stop. In <code>run()</code> we read the <code>threading.Event</code> exit flag in a blocking fashion for a second and then perform our main functionality only to return and wait on the <code>Event</code>.
</p>

<p>
Using <code>wait()</code> on that Event means we can only wait for a single thing at a time. That's not good enough - we have multiple things we need to observe. In the main supervisor thread we replaced this with a queue since we can feed things into the queue from multiple publishers. Something like this (this isn't our actual supervisor function, just an example showing how we would wait on a queue instead):
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">-*- mode: python; python-indent: 4 -*-</span>
<span style="color: #4f97d7; font-weight: bold;">import</span> threading
<span style="color: #4f97d7; font-weight: bold;">import</span> time

<span style="color: #4f97d7; font-weight: bold;">import</span> ncs
<span style="color: #4f97d7; font-weight: bold;">from</span> ncs.application <span style="color: #4f97d7; font-weight: bold;">import</span> Service


<span style="color: #4f97d7; font-weight: bold;">class</span> <span style="color: #ce537a; font-weight: bold;">BgWorker</span><span style="color: #4f97d7;">(</span>threading.Thread<span style="color: #4f97d7;">)</span>:
    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">__init__</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        threading.Thread.__init__<span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.q = queue.Queue<span style="color: #4f97d7;">()</span>

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">run</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">while</span> <span style="color: #a45bad;">True</span>:
            <span style="color: #4f97d7; font-weight: bold;">print</span><span style="color: #4f97d7;">(</span><span style="color: #2d9574;">"Hello from background worker"</span><span style="color: #4f97d7;">)</span>

            <span style="color: #7590db;">item</span> = <span style="color: #4f97d7; font-weight: bold;">self</span>.q.get<span style="color: #4f97d7;">(</span>timeout=<span style="color: #a45bad;">1</span><span style="color: #4f97d7;">)</span>
            <span style="color: #4f97d7; font-weight: bold;">try</span>:
                <span style="color: #7590db;">item</span> = <span style="color: #4f97d7; font-weight: bold;">self</span>.q.get<span style="color: #4f97d7;">(</span>timeout=<span style="color: #a45bad;">1</span><span style="color: #4f97d7;">)</span>
            <span style="color: #4f97d7; font-weight: bold;">except</span> queue.Empty:
                <span style="color: #4f97d7; font-weight: bold;">continue</span>

            <span style="color: #4f97d7; font-weight: bold;">if</span> item == <span style="color: #2d9574;">'exit'</span>:
                <span style="color: #4f97d7; font-weight: bold;">return</span>

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">stop</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">self</span>.q.put<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">'exit'</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.join<span style="color: #4f97d7;">()</span>


<span style="color: #4f97d7; font-weight: bold;">class</span> <span style="color: #ce537a; font-weight: bold;">Main</span><span style="color: #4f97d7;">(</span>ncs.application.Application<span style="color: #4f97d7;">)</span>:
    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">setup</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">self</span>.log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">'Main RUNNING'</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.bgw = BgWorker<span style="color: #4f97d7;">()</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.bgw.start<span style="color: #4f97d7;">()</span>

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">teardown</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">self</span>.log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">'Main FINISHED'</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.bgw.stop<span style="color: #4f97d7;">()</span>
</pre>
</div>

<p>
Thus far we have just replaced the <code>threading.Event</code> with a <code>queue.Queue</code> and unlike the <code>Event</code>, which effectively just carries a boolean value, the queue could carry close to anything. We use a simple string value of <code>exit</code> to signal the thread that it should stop. Now that we have a queue though, we can put more things on the queue and this is why a queue was picked for the supervisor.
</p>

<p>
When implementing a thread for monitoring something, the important thing to remember is that the <code>run()</code> loop of the thread has to be able to monitor its primary object and be signaled from the <code>stop()</code> function using the same method so that it can be efficiently waited upon in the <code>run()</code> loop.
</p>
</div>
</div>

<div id="outline-container-org1898578" class="outline-3">
<h3 id="org1898578">CDB configuration changes</h3>
<div class="outline-text-3" id="text-org1898578">
<p>
CDB subscribers are using a design pattern provided by Cisco and we can't influence it much. Instead we have to integrate with it. With a queue to the supervisor this becomes trivial. The config CDB subscriber simply runs as a separate thread and will take whatever updates it receives on CDB changes and publish them on the queue so the supervisor can react to it.
</p>
</div>
</div>

<div id="outline-container-org654ee50" class="outline-3">
<h3 id="org654ee50">Monitoring HA events</h3>
<div class="outline-text-3" id="text-org654ee50">
<p>
HA events come from NSO over the notifications API which we access through a socket from Python. Unlike the CDB subscriber, there is no ready to go class that we can just subclass and get moving with. Instead we have to implement the thread <code>run()</code> method ourselves. Efficiently waiting on a socket is easy, as already covered, we can use <code>select()</code> for this. However, how can we signal the thread to stop using something that is selectable? I chose to implement a WaitableEvent that sends its data over a pipe, which has a file descriptor and thus is waitable. The code for that looks like this:
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #4f97d7; font-weight: bold;">class</span> <span style="color: #ce537a; font-weight: bold;">WaitableEvent</span>:
    <span style="color: #9f8766;">"""Provides an abstract object that can be used to resume select loops with</span>
<span style="color: #9f8766;">    indefinite waits from another thread or process. This mimics the standard</span>
<span style="color: #9f8766;">    threading.Event interface."""</span>
    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">__init__</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">self</span>._read_fd, <span style="color: #4f97d7; font-weight: bold;">self</span>._write_fd = os.pipe<span style="color: #4f97d7;">()</span>

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">wait</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>, timeout=<span style="color: #a45bad;">None</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #7590db;">rfds</span>, <span style="color: #7590db;">_</span>, <span style="color: #7590db;">_</span> = select.select<span style="color: #4f97d7;">(</span><span style="color: #bc6ec5;">[</span><span style="color: #4f97d7; font-weight: bold;">self</span>._read_fd<span style="color: #bc6ec5;">]</span>, <span style="color: #bc6ec5;">[]</span>, <span style="color: #bc6ec5;">[]</span>, timeout<span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">return</span> <span style="color: #4f97d7; font-weight: bold;">self</span>._read_fd <span style="color: #4f97d7; font-weight: bold;">in</span> rfds

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">is_set</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">return</span> <span style="color: #4f97d7; font-weight: bold;">self</span>.wait<span style="color: #4f97d7;">(</span><span style="color: #a45bad;">0</span><span style="color: #4f97d7;">)</span>

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">isSet</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">return</span> <span style="color: #4f97d7; font-weight: bold;">self</span>.wait<span style="color: #4f97d7;">(</span><span style="color: #a45bad;">0</span><span style="color: #4f97d7;">)</span>

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">clear</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">if</span> <span style="color: #4f97d7; font-weight: bold;">self</span>.isSet<span style="color: #4f97d7;">()</span>:
            os.read<span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>._read_fd, <span style="color: #a45bad;">1</span><span style="color: #4f97d7;">)</span>

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">set</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">if</span> <span style="color: #4f97d7; font-weight: bold;">not</span> <span style="color: #4f97d7; font-weight: bold;">self</span>.isSet<span style="color: #4f97d7;">()</span>:
            os.write<span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>._write_fd, b<span style="color: #2d9574;">'1'</span><span style="color: #4f97d7;">)</span>

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">fileno</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #9f8766;">"""Return the FD number of the read side of the pipe, allows this</span>
<span style="color: #9f8766;">        object to be used with select.select()</span>
<span style="color: #9f8766;">        """</span>
        <span style="color: #4f97d7; font-weight: bold;">return</span> <span style="color: #4f97d7; font-weight: bold;">self</span>._read_fd

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">__del__</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        os.close<span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>._read_fd<span style="color: #4f97d7;">)</span>
        os.close<span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>._write_fd<span style="color: #4f97d7;">)</span>
</pre>
</div>

<p>
and we can use it much the same way as <code>threading.Event</code> since it implements the same interface, however, note how the underlying transport is an <code>os.pipe</code> and we thus can use that in our <code>select()</code> call simply by digging out <code>self._read_fd</code>. Also note that I didn't write the code for this myself. After realizing what I needed I searched and the Internet delivered.
</p>

<p>
Here is the code for the HA event monitor using a <code>WaitableEvent</code>:
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #4f97d7; font-weight: bold;">class</span> <span style="color: #ce537a; font-weight: bold;">HaEventListener</span><span style="color: #4f97d7;">(</span>threading.Thread<span style="color: #4f97d7;">)</span>:
    <span style="color: #9f8766;">"""HA Event Listener</span>
<span style="color: #9f8766;">    HA events, like HA-mode transitions, are exposed over a notification API.</span>
<span style="color: #9f8766;">    We listen on that and forward relevant messages over the queue to the</span>
<span style="color: #9f8766;">    supervisor which can act accordingly.</span>

<span style="color: #9f8766;">    We use a WaitableEvent rather than a threading.Event since the former</span>
<span style="color: #9f8766;">    allows us to wait on it using a select loop. The HA events are received</span>
<span style="color: #9f8766;">    over a socket which can also be waited upon using a select loop, thus</span>
<span style="color: #9f8766;">    making it possible to wait for the two inputs we have using a single select</span>
<span style="color: #9f8766;">    loop.</span>
<span style="color: #9f8766;">    """</span>
    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">__init__</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>, app, q<span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7;">super</span><span style="color: #4f97d7;">(</span>HaEventListener, <span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>.__init__<span style="color: #4f97d7;">()</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.app = app
        <span style="color: #4f97d7; font-weight: bold;">self</span>.log = app.log
        <span style="color: #4f97d7; font-weight: bold;">self</span>.q = q
        <span style="color: #4f97d7; font-weight: bold;">self</span>.log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">'{} supervisor: init'</span>.<span style="color: #4f97d7;">format</span><span style="color: #bc6ec5;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.exit_flag = WaitableEvent<span style="color: #4f97d7;">()</span>

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">run</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">self</span>.app.add_running_thread<span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>.__class__.<span style="color: #4f97d7;">__name__</span> + <span style="color: #2d9574;">' (HA event listener)'</span><span style="color: #4f97d7;">)</span>

        <span style="color: #4f97d7; font-weight: bold;">self</span>.log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">'run() HA event listener'</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">from</span> _ncs <span style="color: #4f97d7; font-weight: bold;">import</span> events
        <span style="color: #7590db;">mask</span> = events.NOTIF_HA_INFO
        <span style="color: #7590db;">event_socket</span> = socket.socket<span style="color: #4f97d7;">()</span>
        events.notifications_connect<span style="color: #4f97d7;">(</span>event_socket, mask, ip=<span style="color: #2d9574;">'127.0.0.1'</span>, port=ncs.PORT<span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">while</span> <span style="color: #a45bad;">True</span>:
            <span style="color: #7590db;">rl</span>, <span style="color: #7590db;">_</span>, <span style="color: #7590db;">_</span> = select.select<span style="color: #4f97d7;">(</span><span style="color: #bc6ec5;">[</span><span style="color: #4f97d7; font-weight: bold;">self</span>.exit_flag, event_socket<span style="color: #bc6ec5;">]</span>, <span style="color: #bc6ec5;">[]</span>, <span style="color: #bc6ec5;">[]</span><span style="color: #4f97d7;">)</span>
            <span style="color: #4f97d7; font-weight: bold;">if</span> <span style="color: #4f97d7; font-weight: bold;">self</span>.exit_flag <span style="color: #4f97d7; font-weight: bold;">in</span> rl:
                event_socket.close<span style="color: #4f97d7;">()</span>
                <span style="color: #4f97d7; font-weight: bold;">return</span>

            <span style="color: #7590db;">notification</span> = events.read_notification<span style="color: #4f97d7;">(</span>event_socket<span style="color: #4f97d7;">)</span>
            <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">Can this fail? Could we get a KeyError here? Afraid to catch it</span>
            <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">because I don't know what it could mean.</span>
            <span style="color: #7590db;">ha_notif_type</span> = notification<span style="color: #4f97d7;">[</span><span style="color: #2d9574;">'hnot'</span><span style="color: #4f97d7;">][</span><span style="color: #2d9574;">'type'</span><span style="color: #4f97d7;">]</span>

            <span style="color: #4f97d7; font-weight: bold;">if</span> ha_notif_type == events.HA_INFO_IS_MASTER:
                <span style="color: #4f97d7; font-weight: bold;">self</span>.q.put<span style="color: #4f97d7;">(</span><span style="color: #bc6ec5;">(</span><span style="color: #2d9574;">'ha-master'</span>, <span style="color: #a45bad;">True</span><span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>
            <span style="color: #4f97d7; font-weight: bold;">elif</span> ha_notif_type == events.HA_INFO_IS_NONE:
                <span style="color: #4f97d7; font-weight: bold;">self</span>.q.put<span style="color: #4f97d7;">(</span><span style="color: #bc6ec5;">(</span><span style="color: #2d9574;">'ha-master'</span>, <span style="color: #a45bad;">False</span><span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>
            <span style="color: #4f97d7; font-weight: bold;">elif</span> ha_notif_type == events.HA_INFO_SLAVE_INITIALIZED:
                <span style="color: #4f97d7; font-weight: bold;">self</span>.q.put<span style="color: #4f97d7;">(</span><span style="color: #bc6ec5;">(</span><span style="color: #2d9574;">'ha-master'</span>, <span style="color: #a45bad;">False</span><span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">stop</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">self</span>.exit_flag.<span style="color: #4f97d7;">set</span><span style="color: #4f97d7;">()</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.join<span style="color: #4f97d7;">()</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.app.del_running_thread<span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>.__class__.<span style="color: #4f97d7;">__name__</span> + <span style="color: #2d9574;">' (HA event listener)'</span><span style="color: #4f97d7;">)</span>
</pre>
</div>

<p>
It selects on the <code>exit_flag</code> (which is a <code>WaitableEvent</code>) and the event socket itself. The <code>stop()</code> method simply sets the <code>WaitableEvent</code>. If <code>exit_flag</code> is readable it means the thread should exit while if the <code>event_socket</code> is readable we have a HA event.
</p>

<p>
We use multiple threads with different methods so we can efficiently monitor different <i>classes</i> of objects.
</p>
</div>
</div>

<div id="outline-container-org601d88e" class="outline-3">
<h3 id="org601d88e">Child process liveness monitor</h3>
<div class="outline-text-3" id="text-org601d88e">
<p>
If the process we started to run the background worker function dies for whatever reason, we want to notice this and restart it. How can we efficiently monitor the liveness of a child process?
</p>

<p>
This was the last thing we wanted to monitor that remained as a half busy poll. The supervisor would wait for things coming in on the supervisor queue for one second, then go and check if the child process was alive only to continue monitoring the queue.
</p>

<p>
The supervisor <code>run()</code> function:
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">run</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
    <span style="color: #4f97d7; font-weight: bold;">self</span>.app.add_running_thread<span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>.name + <span style="color: #2d9574;">' (Supervisor)'</span><span style="color: #4f97d7;">)</span>

    <span style="color: #4f97d7; font-weight: bold;">while</span> <span style="color: #a45bad;">True</span>:
        <span style="color: #7590db;">should_run</span> = <span style="color: #4f97d7; font-weight: bold;">self</span>.config_enabled <span style="color: #4f97d7; font-weight: bold;">and</span> <span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">not</span> <span style="color: #4f97d7; font-weight: bold;">self</span>.ha_enabled <span style="color: #4f97d7; font-weight: bold;">or</span> <span style="color: #4f97d7; font-weight: bold;">self</span>.ha_master<span style="color: #4f97d7;">)</span>

        <span style="color: #4f97d7; font-weight: bold;">if</span> should_run <span style="color: #4f97d7; font-weight: bold;">and</span> <span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>.worker <span style="color: #4f97d7; font-weight: bold;">is</span> <span style="color: #a45bad;">None</span> <span style="color: #4f97d7; font-weight: bold;">or</span> <span style="color: #4f97d7; font-weight: bold;">not</span> <span style="color: #4f97d7; font-weight: bold;">self</span>.worker.is_alive<span style="color: #bc6ec5;">()</span><span style="color: #4f97d7;">)</span>:
            <span style="color: #4f97d7; font-weight: bold;">self</span>.log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">"Background worker process should run but is not running, starting"</span><span style="color: #4f97d7;">)</span>
            <span style="color: #4f97d7; font-weight: bold;">if</span> <span style="color: #4f97d7; font-weight: bold;">self</span>.worker <span style="color: #4f97d7; font-weight: bold;">is</span> <span style="color: #4f97d7; font-weight: bold;">not</span> <span style="color: #a45bad;">None</span>:
                <span style="color: #4f97d7; font-weight: bold;">self</span>.worker_stop<span style="color: #4f97d7;">()</span>
            <span style="color: #4f97d7; font-weight: bold;">self</span>.worker_start<span style="color: #4f97d7;">()</span>
        <span style="color: #4f97d7; font-weight: bold;">if</span> <span style="color: #4f97d7; font-weight: bold;">self</span>.worker <span style="color: #4f97d7; font-weight: bold;">is</span> <span style="color: #4f97d7; font-weight: bold;">not</span> <span style="color: #a45bad;">None</span> <span style="color: #4f97d7; font-weight: bold;">and</span> <span style="color: #4f97d7; font-weight: bold;">self</span>.worker.is_alive<span style="color: #4f97d7;">()</span> <span style="color: #4f97d7; font-weight: bold;">and</span> <span style="color: #4f97d7; font-weight: bold;">not</span> should_run:
            <span style="color: #4f97d7; font-weight: bold;">self</span>.log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">"Background worker process is running but should not run, stopping"</span><span style="color: #4f97d7;">)</span>
            <span style="color: #4f97d7; font-weight: bold;">self</span>.worker_stop<span style="color: #4f97d7;">()</span>

        <span style="color: #4f97d7; font-weight: bold;">try</span>:
            <span style="color: #7590db;">item</span> = <span style="color: #4f97d7; font-weight: bold;">self</span>.q.get<span style="color: #4f97d7;">(</span>timeout=<span style="color: #a45bad;">1</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">except</span> queue.Empty:
            <span style="color: #4f97d7; font-weight: bold;">continue</span>

        <span style="color: #7590db;">k</span>, <span style="color: #7590db;">v</span> = item
        <span style="color: #4f97d7; font-weight: bold;">if</span> k == <span style="color: #2d9574;">'exit'</span>:
            <span style="color: #4f97d7; font-weight: bold;">return</span>
        <span style="color: #4f97d7; font-weight: bold;">elif</span> k == <span style="color: #2d9574;">'enabled'</span>:
            <span style="color: #4f97d7; font-weight: bold;">self</span>.config_enabled = v
</pre>
</div>

<p>
This irked me. Waking up once a second to check on the child process doesn't exactly qualify as busy polling - only looping once a second won't increase CPU utilization by much, yet child processes dying should be enough of a rare event that not reacting quicker than 1 second is still good enough. It was a simple and pragmatic solution that was enough for production use. But it irked me.
</p>

<p>
I wanted to remove the last <i>busy</i> poll and so I started researching the problem. It turns out that it is possible, through a rather clever hack, to detect when a child process is no longer alive.
</p>

<p>
<b>When the write end of a POSIX pipe is in the sole possession of a process and that process dies, the read end becomes readable</b>
</p>

<p>
And so this is exactly what we've implemented.
</p>
<ul class="org-ul">
<li>setup a pipe</li>
<li>fork child process (actually 'spawn'), passing write end of pipe to child</li>
<li>close write end of pipe in parent process</li>
<li>wait for read end of pipe to become readable, which only happens when the child process has died</li>
</ul>

<p>
Since a pipe has a file descriptor we can wait on it using our <code>select()</code> loop and this is what we do in the later versions of bgworker.
</p>
</div>
</div>

<div id="outline-container-org72d9440" class="outline-3">
<h3 id="org72d9440">Hiding things from the bg function</h3>
<div class="outline-text-3" id="text-org72d9440">
<p>
We want to make it dead simple to use the background process library. Passing in a pipe, and the logging objects that need to be set up, as described in the <a href="./2019-07-26-writing-a-background-worker-for-cisco-nso-part-deux.html">previous part</a>, should have to be done by the user of our library. We want to take care of that, but how?
</p>

<p>
When we start the child process, it doesn't immediately run the user provided function. Instead we have a wrapper function that takes care of these things and then hands over control to the user provided function! Like this:
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">_bg_wrapper</span><span style="color: #4f97d7;">(</span>pipe_unused, log_q, log_config_q, log_level, bg_fun, *bg_fun_args<span style="color: #4f97d7;">)</span>:
    <span style="color: #9f8766;">"""Internal wrapper for the background worker function.</span>

<span style="color: #9f8766;">    Used to set up logging via a QueueHandler in the child process. The other end</span>
<span style="color: #9f8766;">    of the queue is observed by a QueueListener in the parent process.</span>
<span style="color: #9f8766;">    """</span>
    <span style="color: #7590db;">queue_hdlr</span> = logging.handlers.QueueHandler<span style="color: #4f97d7;">(</span>log_q<span style="color: #4f97d7;">)</span>
    <span style="color: #7590db;">root</span> = logging.getLogger<span style="color: #4f97d7;">()</span>
    root.setLevel<span style="color: #4f97d7;">(</span>log_level<span style="color: #4f97d7;">)</span>
    root.addHandler<span style="color: #4f97d7;">(</span>queue_hdlr<span style="color: #4f97d7;">)</span>

    <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">thread to monitor log level changes and reconfigure the root logger level</span>
    <span style="color: #7590db;">log_reconf</span> = LogReconfigurator<span style="color: #4f97d7;">(</span>log_config_q, root<span style="color: #4f97d7;">)</span>
    log_reconf.start<span style="color: #4f97d7;">()</span>

    <span style="color: #4f97d7; font-weight: bold;">try</span>:
        bg_fun<span style="color: #4f97d7;">(</span>*bg_fun_args<span style="color: #4f97d7;">)</span>
    <span style="color: #4f97d7; font-weight: bold;">except</span> <span style="color: #ce537a; font-weight: bold;">Exception</span> <span style="color: #4f97d7; font-weight: bold;">as</span> e:
        root.error<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">'Unhandled error in {} - {}: {}'</span>.<span style="color: #4f97d7;">format</span><span style="color: #bc6ec5;">(</span>bg_fun.<span style="color: #4f97d7;">__name__</span>, <span style="color: #4f97d7;">type</span><span style="color: #2d9574;">(</span>e<span style="color: #2d9574;">)</span>.<span style="color: #4f97d7;">__name__</span>, e<span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>
        root.debug<span style="color: #4f97d7;">(</span>traceback.format_exc<span style="color: #bc6ec5;">()</span><span style="color: #4f97d7;">)</span>

</pre>
</div>

<p>
Note how the first argument, accepting the pipe is unused, but it is enough to receive the write end of the pipe. Then we configure logging etc and implement a big exception handler.
</p>
</div>
</div>

<div id="outline-container-org81f998b" class="outline-3">
<h3 id="org81f998b">A selectable queue</h3>
<div class="outline-text-3" id="text-org81f998b">
<p>
Monitoring the child process liveness happens through a pipe which is waitable using select. As previously described though, we placed a queue at the center of the supervisor thread and send messages from other threads over this queue. Now we have a queue and a pipe to wait on, how?
</p>

<p>
We could probably abandon the queue and have those messages be sent over a pipe, which we could then <code>select()</code> on&#x2026; but the queue is so convenient!
</p>

<p>
The <code>multiprocessing</code> library also has a queue which works across multiple processes. It uses a pipe under the hood to pass the messages and deals with things like sharing the the file descriptor when you spawn your child process (which is what we do). By simply switching from <code>queue.Queue</code> to <code>multiprocessing.Queue</code> (they feature the exact same interface) we have gained a pipe under the hood that we can <code>select()</code> on. Voilà!
</p>

<p>
Here's the code for the supervisor thread showing both the selectable queue (well, pipe) and the clever child process liveness monitor. To read the full up to date code for the whole background process library, just head over to <a href="https://github.com/plajjan/bgworker/">the bgworker repo on Github</a>.
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #4f97d7; font-weight: bold;">class</span> <span style="color: #ce537a; font-weight: bold;">Process</span><span style="color: #4f97d7;">(</span>threading.Thread<span style="color: #4f97d7;">)</span>:
    <span style="color: #9f8766;">"""Supervisor for running the main background process and reacting to</span>
<span style="color: #9f8766;">    various events</span>
<span style="color: #9f8766;">    """</span>
    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">__init__</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>, app, bg_fun, bg_fun_args=<span style="color: #a45bad;">None</span>, config_path=<span style="color: #a45bad;">None</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7;">super</span><span style="color: #4f97d7;">(</span>Process, <span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>.__init__<span style="color: #4f97d7;">()</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.app = app
        <span style="color: #4f97d7; font-weight: bold;">self</span>.bg_fun = bg_fun
        <span style="color: #4f97d7; font-weight: bold;">if</span> bg_fun_args <span style="color: #4f97d7; font-weight: bold;">is</span> <span style="color: #a45bad;">None</span>:
            <span style="color: #7590db;">bg_fun_args</span> = <span style="color: #4f97d7;">[]</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.bg_fun_args = bg_fun_args
        <span style="color: #4f97d7; font-weight: bold;">self</span>.config_path = config_path
        <span style="color: #4f97d7; font-weight: bold;">self</span>.parent_pipe = <span style="color: #a45bad;">None</span>

        <span style="color: #4f97d7; font-weight: bold;">self</span>.log = app.log
        <span style="color: #4f97d7; font-weight: bold;">self</span>.name = <span style="color: #2d9574;">"{}.{}"</span>.<span style="color: #4f97d7;">format</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>.app.__class__.__module__,
                                   <span style="color: #4f97d7; font-weight: bold;">self</span>.app.__class__.<span style="color: #4f97d7;">__name__</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">"{} supervisor starting"</span>.<span style="color: #4f97d7;">format</span><span style="color: #bc6ec5;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>.name<span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>

        <span style="color: #4f97d7; font-weight: bold;">self</span>.vmid = <span style="color: #4f97d7; font-weight: bold;">self</span>.app._ncs_id

        <span style="color: #4f97d7; font-weight: bold;">self</span>.mp_ctx = multiprocessing.get_context<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">'spawn'</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.q = <span style="color: #4f97d7; font-weight: bold;">self</span>.mp_ctx.Queue<span style="color: #4f97d7;">()</span>

        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">start the config subscriber thread</span>
        <span style="color: #4f97d7; font-weight: bold;">if</span> <span style="color: #4f97d7; font-weight: bold;">self</span>.config_path <span style="color: #4f97d7; font-weight: bold;">is</span> <span style="color: #4f97d7; font-weight: bold;">not</span> <span style="color: #a45bad;">None</span>:
            <span style="color: #4f97d7; font-weight: bold;">self</span>.config_subscriber = Subscriber<span style="color: #4f97d7;">(</span>app=<span style="color: #4f97d7; font-weight: bold;">self</span>.app, log=<span style="color: #4f97d7; font-weight: bold;">self</span>.log<span style="color: #4f97d7;">)</span>
            <span style="color: #7590db;">subscriber_iter</span> = ConfigSubscriber<span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>.q, <span style="color: #4f97d7; font-weight: bold;">self</span>.config_path<span style="color: #4f97d7;">)</span>
            subscriber_iter.register<span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>.config_subscriber<span style="color: #4f97d7;">)</span>
            <span style="color: #4f97d7; font-weight: bold;">self</span>.config_subscriber.start<span style="color: #4f97d7;">()</span>

        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">start the HA event listener thread</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.ha_event_listener = HaEventListener<span style="color: #4f97d7;">(</span>app=<span style="color: #4f97d7; font-weight: bold;">self</span>.app, q=<span style="color: #4f97d7; font-weight: bold;">self</span>.q<span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.ha_event_listener.start<span style="color: #4f97d7;">()</span>

        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">start the logging QueueListener thread</span>
        <span style="color: #7590db;">hdlrs</span> = <span style="color: #4f97d7;">list</span><span style="color: #4f97d7;">(</span>_get_handler_impls<span style="color: #bc6ec5;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>.app._logger<span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.log_queue = <span style="color: #4f97d7; font-weight: bold;">self</span>.mp_ctx.Queue<span style="color: #4f97d7;">()</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.queue_listener = logging.handlers.QueueListener<span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>.log_queue, *hdlrs, respect_handler_level=<span style="color: #a45bad;">True</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.queue_listener.start<span style="color: #4f97d7;">()</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.current_log_level = <span style="color: #4f97d7; font-weight: bold;">self</span>.app._logger.getEffectiveLevel<span style="color: #4f97d7;">()</span>

        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">start log config CDB subscriber</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.log_config_q = <span style="color: #4f97d7; font-weight: bold;">self</span>.mp_ctx.Queue<span style="color: #4f97d7;">()</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.log_config_subscriber = Subscriber<span style="color: #4f97d7;">(</span>app=<span style="color: #4f97d7; font-weight: bold;">self</span>.app, log=<span style="color: #4f97d7; font-weight: bold;">self</span>.log<span style="color: #4f97d7;">)</span>
        <span style="color: #7590db;">log_subscriber_iter</span> = LogConfigSubscriber<span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>.log_config_q, <span style="color: #4f97d7; font-weight: bold;">self</span>.vmid<span style="color: #4f97d7;">)</span>
        log_subscriber_iter.register<span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>.log_config_subscriber<span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.log_config_subscriber.start<span style="color: #4f97d7;">()</span>

        <span style="color: #4f97d7; font-weight: bold;">self</span>.worker = <span style="color: #a45bad;">None</span>

        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">Read initial configuration, using two separate transactions</span>
        <span style="color: #4f97d7; font-weight: bold;">with</span> ncs.maapi.Maapi<span style="color: #4f97d7;">()</span> <span style="color: #4f97d7; font-weight: bold;">as</span> m:
            <span style="color: #4f97d7; font-weight: bold;">with</span> ncs.maapi.Session<span style="color: #4f97d7;">(</span>m, <span style="color: #2d9574;">'{}_supervisor'</span>.<span style="color: #4f97d7;">format</span><span style="color: #bc6ec5;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>.name<span style="color: #bc6ec5;">)</span>, <span style="color: #2d9574;">'system'</span><span style="color: #4f97d7;">)</span>:
                <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">in the 1st transaction read config data from the 'enabled' leaf</span>
                <span style="color: #4f97d7; font-weight: bold;">with</span> m.start_read_trans<span style="color: #4f97d7;">()</span> <span style="color: #4f97d7; font-weight: bold;">as</span> t_read:
                    <span style="color: #4f97d7; font-weight: bold;">if</span> config_path <span style="color: #4f97d7; font-weight: bold;">is</span> <span style="color: #4f97d7; font-weight: bold;">not</span> <span style="color: #a45bad;">None</span>:
                        <span style="color: #7590db;">enabled</span> = t_read.get_elem<span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>.config_path<span style="color: #4f97d7;">)</span>
                        <span style="color: #4f97d7; font-weight: bold;">self</span>.config_enabled = <span style="color: #4f97d7;">bool</span><span style="color: #4f97d7;">(</span>enabled<span style="color: #4f97d7;">)</span>
                    <span style="color: #4f97d7; font-weight: bold;">else</span>:
                        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">if there is no config_path we assume the process is always enabled</span>
                        <span style="color: #4f97d7; font-weight: bold;">self</span>.config_enabled = <span style="color: #a45bad;">True</span>

                <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">In the 2nd transaction read operational data regarding HA.</span>
                <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">This is an expensive operation invoking a data provider, thus</span>
                <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">we don't want to incur any unnecessary locks</span>
                <span style="color: #4f97d7; font-weight: bold;">with</span> m.start_read_trans<span style="color: #4f97d7;">(</span>db=ncs.OPERATIONAL<span style="color: #4f97d7;">)</span> <span style="color: #4f97d7; font-weight: bold;">as</span> oper_t_read:
                    <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">check if HA is enabled</span>
                    <span style="color: #4f97d7; font-weight: bold;">if</span> oper_t_read.exists<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">"/tfnm:ncs-state/tfnm:ha"</span><span style="color: #4f97d7;">)</span>:
                        <span style="color: #4f97d7; font-weight: bold;">self</span>.ha_enabled = <span style="color: #a45bad;">True</span>
                    <span style="color: #4f97d7; font-weight: bold;">else</span>:
                        <span style="color: #4f97d7; font-weight: bold;">self</span>.ha_enabled = <span style="color: #a45bad;">False</span>

                    <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">determine HA state if HA is enabled</span>
                    <span style="color: #4f97d7; font-weight: bold;">if</span> <span style="color: #4f97d7; font-weight: bold;">self</span>.ha_enabled:
                        <span style="color: #7590db;">ha_mode</span> = <span style="color: #4f97d7;">str</span><span style="color: #4f97d7;">(</span>ncs.maagic.get_node<span style="color: #bc6ec5;">(</span>oper_t_read, <span style="color: #2d9574;">'/tfnm:ncs-state/tfnm:ha/tfnm:mode'</span><span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>
                        <span style="color: #4f97d7; font-weight: bold;">self</span>.ha_master = <span style="color: #4f97d7;">(</span>ha_mode == <span style="color: #2d9574;">'master'</span><span style="color: #4f97d7;">)</span>


    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">run</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">self</span>.app.add_running_thread<span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>.name + <span style="color: #2d9574;">' (Supervisor)'</span><span style="color: #4f97d7;">)</span>

        <span style="color: #4f97d7; font-weight: bold;">while</span> <span style="color: #a45bad;">True</span>:
            <span style="color: #4f97d7; font-weight: bold;">try</span>:
                <span style="color: #7590db;">should_run</span> = <span style="color: #4f97d7; font-weight: bold;">self</span>.config_enabled <span style="color: #4f97d7; font-weight: bold;">and</span> <span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">not</span> <span style="color: #4f97d7; font-weight: bold;">self</span>.ha_enabled <span style="color: #4f97d7; font-weight: bold;">or</span> <span style="color: #4f97d7; font-weight: bold;">self</span>.ha_master<span style="color: #4f97d7;">)</span>

                <span style="color: #4f97d7; font-weight: bold;">if</span> should_run <span style="color: #4f97d7; font-weight: bold;">and</span> <span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>.worker <span style="color: #4f97d7; font-weight: bold;">is</span> <span style="color: #a45bad;">None</span> <span style="color: #4f97d7; font-weight: bold;">or</span> <span style="color: #4f97d7; font-weight: bold;">not</span> <span style="color: #4f97d7; font-weight: bold;">self</span>.worker.is_alive<span style="color: #bc6ec5;">()</span><span style="color: #4f97d7;">)</span>:
                    <span style="color: #4f97d7; font-weight: bold;">self</span>.log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">"Background worker process should run but is not running, starting"</span><span style="color: #4f97d7;">)</span>
                    <span style="color: #4f97d7; font-weight: bold;">if</span> <span style="color: #4f97d7; font-weight: bold;">self</span>.worker <span style="color: #4f97d7; font-weight: bold;">is</span> <span style="color: #4f97d7; font-weight: bold;">not</span> <span style="color: #a45bad;">None</span>:
                        <span style="color: #4f97d7; font-weight: bold;">self</span>.worker_stop<span style="color: #4f97d7;">()</span>
                    <span style="color: #4f97d7; font-weight: bold;">self</span>.worker_start<span style="color: #4f97d7;">()</span>
                <span style="color: #4f97d7; font-weight: bold;">if</span> <span style="color: #4f97d7; font-weight: bold;">self</span>.worker <span style="color: #4f97d7; font-weight: bold;">is</span> <span style="color: #4f97d7; font-weight: bold;">not</span> <span style="color: #a45bad;">None</span> <span style="color: #4f97d7; font-weight: bold;">and</span> <span style="color: #4f97d7; font-weight: bold;">self</span>.worker.is_alive<span style="color: #4f97d7;">()</span> <span style="color: #4f97d7; font-weight: bold;">and</span> <span style="color: #4f97d7; font-weight: bold;">not</span> should_run:
                    <span style="color: #4f97d7; font-weight: bold;">self</span>.log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">"Background worker process is running but should not run, stopping"</span><span style="color: #4f97d7;">)</span>
                    <span style="color: #4f97d7; font-weight: bold;">self</span>.worker_stop<span style="color: #4f97d7;">()</span>

                <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">check for input</span>
                <span style="color: #7590db;">waitable_rfds</span> = <span style="color: #4f97d7;">[</span><span style="color: #4f97d7; font-weight: bold;">self</span>.q._reader<span style="color: #4f97d7;">]</span>
                <span style="color: #4f97d7; font-weight: bold;">if</span> should_run:
                    waitable_rfds.append<span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>.parent_pipe<span style="color: #4f97d7;">)</span>

                <span style="color: #7590db;">rfds</span>, <span style="color: #7590db;">_</span>, <span style="color: #7590db;">_</span> = select.select<span style="color: #4f97d7;">(</span>waitable_rfds, <span style="color: #bc6ec5;">[]</span>, <span style="color: #bc6ec5;">[]</span><span style="color: #4f97d7;">)</span>
                <span style="color: #4f97d7; font-weight: bold;">for</span> rfd <span style="color: #4f97d7; font-weight: bold;">in</span> rfds:
                    <span style="color: #4f97d7; font-weight: bold;">if</span> rfd == <span style="color: #4f97d7; font-weight: bold;">self</span>.q._reader:
                        <span style="color: #7590db;">k</span>, <span style="color: #7590db;">v</span> = <span style="color: #4f97d7; font-weight: bold;">self</span>.q.get<span style="color: #4f97d7;">()</span>

                        <span style="color: #4f97d7; font-weight: bold;">if</span> k == <span style="color: #2d9574;">'exit'</span>:
                            <span style="color: #4f97d7; font-weight: bold;">return</span>
                        <span style="color: #4f97d7; font-weight: bold;">elif</span> k == <span style="color: #2d9574;">'enabled'</span>:
                            <span style="color: #4f97d7; font-weight: bold;">self</span>.config_enabled = v
                        <span style="color: #4f97d7; font-weight: bold;">elif</span> k == <span style="color: #2d9574;">"ha-master"</span>:
                            <span style="color: #4f97d7; font-weight: bold;">self</span>.ha_master = v

                    <span style="color: #4f97d7; font-weight: bold;">if</span> rfd == <span style="color: #4f97d7; font-weight: bold;">self</span>.parent_pipe:
                        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">getting a readable event on the pipe should mean the</span>
                        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">child is dead - wait for it to die and start again</span>
                        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">we'll restart it at the top of the loop</span>
                        <span style="color: #4f97d7; font-weight: bold;">self</span>.log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">"Child process died"</span><span style="color: #4f97d7;">)</span>
                        <span style="color: #4f97d7; font-weight: bold;">if</span> <span style="color: #4f97d7; font-weight: bold;">self</span>.worker.is_alive<span style="color: #4f97d7;">()</span>:
                            <span style="color: #4f97d7; font-weight: bold;">self</span>.worker.join<span style="color: #4f97d7;">()</span>

            <span style="color: #4f97d7; font-weight: bold;">except</span> <span style="color: #ce537a; font-weight: bold;">Exception</span> <span style="color: #4f97d7; font-weight: bold;">as</span> e:
                <span style="color: #4f97d7; font-weight: bold;">self</span>.log.error<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">'Unhandled exception in the supervisor thread: {} ({})'</span>.<span style="color: #4f97d7;">format</span><span style="color: #bc6ec5;">(</span><span style="color: #4f97d7;">type</span><span style="color: #2d9574;">(</span>e<span style="color: #2d9574;">)</span>.<span style="color: #4f97d7;">__name__</span>, e<span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>
                <span style="color: #4f97d7; font-weight: bold;">self</span>.log.debug<span style="color: #4f97d7;">(</span>traceback.format_exc<span style="color: #bc6ec5;">()</span><span style="color: #4f97d7;">)</span>
                time.sleep<span style="color: #4f97d7;">(</span><span style="color: #a45bad;">1</span><span style="color: #4f97d7;">)</span>


    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">stop</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #9f8766;">"""stop is called when the supervisor thread should stop and is part of</span>
<span style="color: #9f8766;">        the standard Python interface for threading.Thread</span>
<span style="color: #9f8766;">        """</span>
        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">stop the HA event listener</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.log.debug<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">"{}: stopping HA event listener"</span>.<span style="color: #4f97d7;">format</span><span style="color: #bc6ec5;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>.name<span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.ha_event_listener.stop<span style="color: #4f97d7;">()</span>

        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">stop config CDB subscriber</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.log.debug<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">"{}: stopping config CDB subscriber"</span>.<span style="color: #4f97d7;">format</span><span style="color: #bc6ec5;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>.name<span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">if</span> <span style="color: #4f97d7; font-weight: bold;">self</span>.config_path <span style="color: #4f97d7; font-weight: bold;">is</span> <span style="color: #4f97d7; font-weight: bold;">not</span> <span style="color: #a45bad;">None</span>:
            <span style="color: #4f97d7; font-weight: bold;">self</span>.config_subscriber.stop<span style="color: #4f97d7;">()</span>

        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">stop log config CDB subscriber</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.log.debug<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">"{}: stopping log config CDB subscriber"</span>.<span style="color: #4f97d7;">format</span><span style="color: #bc6ec5;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>.name<span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.log_config_subscriber.stop<span style="color: #4f97d7;">()</span>

        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">stop the logging QueueListener</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.log.debug<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">"{}: stopping logging QueueListener"</span>.<span style="color: #4f97d7;">format</span><span style="color: #bc6ec5;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>.name<span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.queue_listener.stop<span style="color: #4f97d7;">()</span>

        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">stop us, the supervisor</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.log.debug<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">"{}: stopping supervisor thread"</span>.<span style="color: #4f97d7;">format</span><span style="color: #bc6ec5;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>.name<span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>

        <span style="color: #4f97d7; font-weight: bold;">self</span>.q.put<span style="color: #4f97d7;">(</span><span style="color: #bc6ec5;">(</span><span style="color: #2d9574;">'exit'</span>, <span style="color: #a45bad;">None</span><span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.join<span style="color: #4f97d7;">()</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.app.del_running_thread<span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>.name + <span style="color: #2d9574;">' (Supervisor)'</span><span style="color: #4f97d7;">)</span>

        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">stop the background worker process</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.log.debug<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">"{}: stopping background worker process"</span>.<span style="color: #4f97d7;">format</span><span style="color: #bc6ec5;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>.name<span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.worker_stop<span style="color: #4f97d7;">()</span>


    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">worker_start</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #9f8766;">"""Starts the background worker process</span>
<span style="color: #9f8766;">        """</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">"{}: starting the background worker process"</span>.<span style="color: #4f97d7;">format</span><span style="color: #bc6ec5;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>.name<span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>
        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">Instead of using the usual worker thread, we use a separate process here.</span>
        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">This allows us to terminate the process on package reload / NSO shutdown.</span>

        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">using multiprocessing.Pipe which is shareable across a spawned</span>
        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">process, while os.pipe only works, per default over to a forked</span>
        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">child</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.parent_pipe, <span style="color: #7590db;">child_pipe</span> = <span style="color: #4f97d7; font-weight: bold;">self</span>.mp_ctx.Pipe<span style="color: #4f97d7;">()</span>

        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">Instead of calling the bg_fun worker function directly, call our</span>
        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">internal wrapper to set up things like inter-process logging through</span>
        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">a queue.</span>
        <span style="color: #7590db;">args</span> = <span style="color: #4f97d7;">[</span>child_pipe, <span style="color: #4f97d7; font-weight: bold;">self</span>.log_queue, <span style="color: #4f97d7; font-weight: bold;">self</span>.log_config_q, <span style="color: #4f97d7; font-weight: bold;">self</span>.current_log_level, <span style="color: #4f97d7; font-weight: bold;">self</span>.bg_fun<span style="color: #4f97d7;">]</span> + <span style="color: #4f97d7; font-weight: bold;">self</span>.bg_fun_args
        <span style="color: #4f97d7; font-weight: bold;">self</span>.worker = <span style="color: #4f97d7; font-weight: bold;">self</span>.mp_ctx.Process<span style="color: #4f97d7;">(</span>target=_bg_wrapper, args=args<span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.worker.start<span style="color: #4f97d7;">()</span>

        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">close child pipe in parent so only child is in possession of file</span>
        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">handle, which means we get EOF when the child dies</span>
        child_pipe.close<span style="color: #4f97d7;">()</span>


    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">worker_stop</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #9f8766;">"""Stops the background worker process</span>
<span style="color: #9f8766;">        """</span>
        <span style="color: #4f97d7; font-weight: bold;">if</span> <span style="color: #4f97d7; font-weight: bold;">self</span>.worker <span style="color: #4f97d7; font-weight: bold;">is</span> <span style="color: #a45bad;">None</span>:
            <span style="color: #4f97d7; font-weight: bold;">self</span>.log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">"{}: asked to stop worker but background worker does not exist"</span>.<span style="color: #4f97d7;">format</span><span style="color: #bc6ec5;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>.name<span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>
            <span style="color: #4f97d7; font-weight: bold;">return</span>
        <span style="color: #4f97d7; font-weight: bold;">if</span> <span style="color: #4f97d7; font-weight: bold;">self</span>.worker.is_alive<span style="color: #4f97d7;">()</span>:
            <span style="color: #4f97d7; font-weight: bold;">self</span>.log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">"{}: stopping the background worker process"</span>.<span style="color: #4f97d7;">format</span><span style="color: #bc6ec5;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>.name<span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>
            <span style="color: #4f97d7; font-weight: bold;">self</span>.worker.terminate<span style="color: #4f97d7;">()</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.worker.join<span style="color: #4f97d7;">(</span>timeout=<span style="color: #a45bad;">1</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">if</span> <span style="color: #4f97d7; font-weight: bold;">self</span>.worker.is_alive<span style="color: #4f97d7;">()</span>:
            <span style="color: #4f97d7; font-weight: bold;">self</span>.log.error<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">"{}: worker not terminated on time, alive: {}  process: {}"</span>.<span style="color: #4f97d7;">format</span><span style="color: #bc6ec5;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>, <span style="color: #4f97d7; font-weight: bold;">self</span>.worker.is_alive<span style="color: #2d9574;">()</span>, <span style="color: #4f97d7; font-weight: bold;">self</span>.worker<span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-orga78faa4" class="outline-3">
<h3 id="orga78faa4">A library with a simple user interface</h3>
<div class="outline-text-3" id="text-orga78faa4">
<p>
As we've gone through over in these three posts, there's quite a bit of code that needs to be written to implement a proper NSO background worker. The idea was that we would write it in such a way that it could be reused. Someone wanting to implement a background worker should not have to understand, much less implement, all of this. This is why we've structured the surrounding code for running a background worker as a library that can be reused. We effectively hide the complexity by exposing a simple user interface to the developer. Using the bgworker background process library could look like this:
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">-*- mode: python; python-indent: 4 -*-</span>
<span style="color: #4f97d7; font-weight: bold;">import</span> logging
<span style="color: #4f97d7; font-weight: bold;">import</span> random
<span style="color: #4f97d7; font-weight: bold;">import</span> sys
<span style="color: #4f97d7; font-weight: bold;">import</span> time

<span style="color: #4f97d7; font-weight: bold;">import</span> ncs
<span style="color: #4f97d7; font-weight: bold;">from</span> ncs.application <span style="color: #4f97d7; font-weight: bold;">import</span> Service

<span style="color: #4f97d7; font-weight: bold;">from</span> . <span style="color: #4f97d7; font-weight: bold;">import</span> background_process

<span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">bg_worker</span><span style="color: #4f97d7;">()</span>:
    <span style="color: #7590db;">log</span> = logging.getLogger<span style="color: #4f97d7;">()</span>

    <span style="color: #4f97d7; font-weight: bold;">while</span> <span style="color: #a45bad;">True</span>:
        <span style="color: #4f97d7; font-weight: bold;">with</span> ncs.maapi.single_write_trans<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">'bgworker'</span>, <span style="color: #2d9574;">'system'</span>, db=ncs.OPERATIONAL<span style="color: #4f97d7;">)</span> <span style="color: #4f97d7; font-weight: bold;">as</span> oper_trans_write:
            <span style="color: #7590db;">root</span> = ncs.maagic.get_root<span style="color: #4f97d7;">(</span>oper_trans_write<span style="color: #4f97d7;">)</span>
            <span style="color: #7590db;">cur_val</span> = root.bgworker.counter
            <span style="color: #7590db;">root.bgworker.counter</span> += <span style="color: #a45bad;">1</span>
            oper_trans_write.<span style="color: #4f97d7;">apply</span><span style="color: #4f97d7;">()</span>

        log.debug<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">"Hello from background worker process, increment counter from {} to {}"</span>.<span style="color: #4f97d7;">format</span><span style="color: #bc6ec5;">(</span>cur_val, cur_val+<span style="color: #a45bad;">1</span><span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">if</span> random.randint<span style="color: #4f97d7;">(</span><span style="color: #a45bad;">0</span>, <span style="color: #a45bad;">10</span><span style="color: #4f97d7;">)</span> == <span style="color: #a45bad;">9</span>:
            log.error<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">"Bad dice value"</span><span style="color: #4f97d7;">)</span>
            sys.<span style="color: #a45bad;">exit</span><span style="color: #4f97d7;">(</span><span style="color: #a45bad;">1</span><span style="color: #4f97d7;">)</span>
        time.sleep<span style="color: #4f97d7;">(</span><span style="color: #a45bad;">2</span><span style="color: #4f97d7;">)</span>

<span style="color: #4f97d7; font-weight: bold;">class</span> <span style="color: #ce537a; font-weight: bold;">Main</span><span style="color: #4f97d7;">(</span>ncs.application.Application<span style="color: #4f97d7;">)</span>:
    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">setup</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">self</span>.log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">'Main RUNNING'</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.p = background_process.Process<span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>, bg_worker, config_path=<span style="color: #2d9574;">'/bgworker/enabled'</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.p.start<span style="color: #4f97d7;">()</span>

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">teardown</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">self</span>.log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">'Main FINISHED'</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.p.stop<span style="color: #4f97d7;">()</span>
</pre>
</div>

<p>
This is the example in the <a href="https://github.com/plajjan/bgworker">bgworker repo</a> and it shows the simple worker that increments an operational state value once per second. Every now and then it dies, which then shows that the supervisor correctly monitors the child process and restarts it. You can disable it by setting <code>/bgworker/enabled</code> to <code>false</code>.
</p>

<p>
The main functionality is implemented in the <code>bg_worker()</code> function and we use the background process library to run that function in the background.
</p>

<p>
It is the following lines, which are part of a standard NSO Application definition, where we hook in and run the background process by instantiating <code>background_process.Process()</code> and feeding it the function we want it to run. Further we tell it that the path to the enable/disable leaf of this background worker is <code>/bgworker/enabled</code>. The library then takes over and does the needful.
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #4f97d7; font-weight: bold;">class</span> <span style="color: #ce537a; font-weight: bold;">Main</span><span style="color: #4f97d7;">(</span>ncs.application.Application<span style="color: #4f97d7;">)</span>:
    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">setup</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">self</span>.log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">'Main RUNNING'</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.p = background_process.Process<span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>, bg_worker, config_path=<span style="color: #2d9574;">'/bgworker/enabled'</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.p.start<span style="color: #4f97d7;">()</span>

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">teardown</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">self</span>.log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">'Main FINISHED'</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.p.stop<span style="color: #4f97d7;">()</span>
</pre>
</div>

<p>
We aimed for a simple interface and I think we succeeded.
</p>

<p>
The idea behind placing all of this functionality into a library is that we hide the complexity from the user of our library. A developer that needs a background worker wants to spend 90% of the time on the actual functionality of the background worker rather than writing the surrounding overhead code necessary for running the background worker function. This is essentially the promise of any programming language or technique ever written - <i>spend your time on your business logic and not on overhead tasks</i> - nonetheless I think we accomplished what we set out to do.
</p>
</div>
</div>

<div id="outline-container-orgde8b56e" class="outline-3">
<h3 id="orgde8b56e">Finale</h3>
<div class="outline-text-3" id="text-orgde8b56e">
<p>
And with that, we conclude the interesting parts of how to implement a background worker for Cisco NSO. I hope you've found it interesting to read about. It was fun and interesting implementing, in particular as it's been a while for me since I was this deep into the low level workings of things. I am a staunch believer that we generally need to use libraries when implementing network automation or other application/business logic so we can focus on the right set of the problems rather than interweaving say the low level details of POSIX processes with our application logic. In essence; using the right abstraction layers. Our human brains can only focus on so many things at a time and using the right abstractions is therefore crucial. Most of the time I mostly deal with high level languages touching high level things - exactly as I want it to be. However, once in a while, when the framework (NSO in this case) doesn't provide what you need (a way to run background workers), you just have to do it yourself.
</p>

<p>
I hope you will also appreciate the amount of energy that went into writing the <a href="https://github.com/plajjan/bgworker">bgworker</a> package.py library that you can reuse. It is a rewrite of the common set of core functionality of the background workers we already had, resulting in a much better and cleaner implementation using a generic library style interface allowing anyone to use it. If you have the need for running background workers in NSO I strongly recommend that you make use of it. There's a lot of lessons learned here and starting over from scratch with a naive implementation means you will learn all of them the hard way. If bgworker doesn't fit in your architecture then feel free to give feedback and perhaps we can find a way forward together.
</p>
</div>
</div>
</div>
<div class="taglist"><a href="tags.html">Tags</a>: <a href="tag-nso.html">NSO</a> </div>]]></description>
  <category>NSO</category>
  <link>https://plajjan.github.io/2019-07-29-writing-a-background-worker-for-cisco-nso-finale.html</link>
  <pubDate>Mon, 29 Jul 2019 14:00:00 +0200</pubDate>
</item>
<item>
  <title>This blog now powered by org-mode</title>
  <description><![CDATA[

<figure>
<img src="./images/1920px-Org-mode-unicorn.svg.png" alt="1920px-Org-mode-unicorn.svg.png" width="300px" style="float:left;">

</figure>

<p>
I've used Jekyll for quite some time to power my blog. I would commit markdown files to a git repository and then the magic sauce of Jekyll and Github Pages would turn this into beautiful HTML pages and publish it. It worked fine but as I have switched to Emacs as my primary editor, which features something called org-mode, that among other things feature a syntax that I find way better and more intuitive than markdown, I decided to switch over my blogging to this format.
</p>

<p>
org-mode is a markup language, just like markdown, but it's been around for a wee bit longer. I use quite a lot of markdown in various places and its popularity means its widely accepted. I naturally prefer it over something like Word documents. However, it has limitations, it is inconsistent and not very intuitive. The arguments have been made before and I won't repeat it all here, instead if you are interested in org-mode vs *, <a href="https://karl-voit.at/2017/09/23/orgmode-as-markup-only/">Karl Voit sums it up</a> best.
</p>

<p>
It should also be noted that org-mode does so much more. My calendar, todo list and various notes are all in org-mode and it provides various useful tools to work with it. It's often listed as a unique selling point for Emacs. If you are technology oriented, likes to tinker and setup tools your way, care about your time (efficiency), then org-mode might be for you.
</p>

<p>
Anyway, I'm not trying to sell org-mode, just saying I'm now using it to power this blog. I use org-static-blog to actually render the org files into HTML. Not super happy with it but it works for now (I can switch to something else that also is based on org, like org-publish, without having to rewrite all my posts). In the end, what this switch to org-mode might mean is that the threshold for me to write something is lowered just a tiny bit and that might just result in a slightly increased post publishing cadence.
</p>
<div class="taglist"><a href="tags.html">Tags</a>: <a href="tag-nso.html">NSO</a> </div>]]></description>
  <category>NSO</category>
  <link>https://plajjan.github.io/2019-07-29-this-blog-now-powered-by-org-mode.html</link>
  <pubDate>Mon, 29 Jul 2019 08:00:00 +0200</pubDate>
</item>
<item>
  <title>Writing a Python background worker for Cisco NSO - part deux</title>
  <description><![CDATA[

<div id="outline-container-org9284543" class="outline-2">
<h2 id="org9284543"><span class="section-number-2">1</span> Writing a Python background worker for Cisco NSO - part deux (2)</h2>
<div class="outline-text-2" id="text-1">
<p>
We ended the first part with a chunk of code that implements all the functionality we had listed as our requirements. You'll find the code <a href="https://github.com/plajjan/bgworker/commit/281324399c56f520f99920d00075c9c23557cb1c">in this commit</a> in case you want to look at it in more detail and how it then evolved, which is what I'll detail in this post.
</p>

<p>
First thing I did, after having played around with this code myself for some time, was to hand it over to my colleague Marko. Marko just happened to be implementing an NSO component that needed to run in the background and so he was in need of the background_process design that I had been working on. I couldn't find a better beta tester than Marko, as he was in fact involved in the design of this background worker process pattern and so was familiar with the whole idea but hadn't, up to this point, written any code on it. I expected to get some feedback on if the interface was any good or how documentation was lacking. Instead he comes back saying NSO <i>hangs</i>.
</p>
</div>

<div id="outline-container-orgc51092b" class="outline-3">
<h3 id="orgc51092b"><span class="section-number-3">1.1</span> Debugging a <i>hung</i> Python VM</h3>
<div class="outline-text-3" id="text-1-1">
<p>
At work we have a rather sleek way of starting up a development environment for NSO. We call it a <i>playground</i> and it consists of one or more containers running NSO and a number of virtual routers or other support containers that together form a small topology. Starting a playground is just a matter of executing one script, waiting a few minutes (both NSO and virtual routers are slow in starting up) and then you can start coding. There are different topologies you can choose from as well as options for controlling persistence of data or restarting playgrounds until tests fail (for finding bug reproduction cases). We start the same topologies in CI for testing. All in all it gives a rather good guarantee that the environment we develop and test in are all uniform.
</p>

<p>
When Marko said his NSO had hung I was perplexed as it had worked so well for me. We started looking into differences but there were none, or very few. We ran the same playground topology using the same code versions and we were even running it on the same physical machine. Yet mine worked fine, being able to consistently redeploy the bgworker package and his didn't. It was clear we needed to find out what was going on and fix it.
</p>

<p>
To reproduce the hang, using the bgworker <a href="https://github.com/plajjan/bgworker/commit/281324399c56f520f99920d00075c9c23557cb1c">as it looked then</a> all that is required is to redeploy the package a few times and you are likely to encounter the hang. The background worker would periodically log a message and when it was hung there would simply be no message. We tried adding print statements but it made little difference. We tried to instead write some data to a temporary file but it didn't work.
</p>

<p>
Increasing the log level to debug from a lower level seemed to increase the likelihood of the hang but we still didn't understand why. We added a stack dumper and a signal handler so when we sent a USR1 signal we would dump the stack to a file which we could inspect to understand what the program was doing. The stack:
</p>

<div class="org-src-container">
<pre class="src src-text">File "/usr/lib/python3.5/logging/__init__.py", line 1487, in callHandlers
  hdlr.handle(record)

File "/usr/lib/python3.5/logging/__init__.py", line 853, in handle
  self.acquire()

File "/usr/lib/python3.5/logging/__init__.py", line 804, in acquire
  self.lock.acquire()
</pre>
</div>

<p>
Finally some progress. We repeated this, taking a stack dump for multiple invocations when Python had hung and they all showed the same stack. We were waiting on acquiring a lock!
</p>
</div>
</div>

<div id="outline-container-orgfb4c911" class="outline-3">
<h3 id="orgfb4c911"><span class="section-number-3">1.2</span> A ten year old bug</h3>
<div class="outline-text-3" id="text-1-2">
<p>
The stack dump further reveals that the lock is being acquired in the logging module, which simply takes a lock around the output in the handler when it is emitting a log message. I didn't actually know the logging module took locks - mostly because I never thought about how it worked internally - but it's fairly natural since we would otherwise risk two log messages emitted at the same time overwriting each other.
</p>

<p>
The bgworker uses a mix of logging, threads and multiprocessing. As it turns out, <a href="https://bugs.python.org/issue6721">there is a bug related to this exact mix</a> that Marko found. The bug is ten years old and hadn't yet been fixed.
</p>

<p>
The multiprocessing module uses fork to create a child process. <code>fork()</code> works by creating a copy of itself, the running process, so that there are two processes after the <code>fork()</code> call, one parent and one child process. The child process thus has a copy of all the file handles, sockets and other things in memory.. and if a lock happened to be taken while the child was forked then the lock would be held in both the parent and child, although it is at this time different locks as they had been copied.
</p>

<p>
Just using multiprocessing and logging is safe since a single threaded program will only do one thing at a time; it will either be logging a message or starting a new child process through fork. As we also mix in the threading module and run multiple threads there is a possibility that we will be forking at the exact moment when a separate thread is logging a message and then the lock will be held! In the parent process the thread emitting a log message will release the lock as soon as it is done but in the child process that never happens since the logging thread isn't running there and the lock is thus held indefinitely. When we then try to log something in the child we first try to acquire the lock but since it is indefinitely held, our Python VM <i>hangs</i>.
</p>

<p>
When bgworker starts up, it is starting multiple threads and forks off the child all around the same time. It also logs quite a few things on startup which means the likelihood of forking while emitting a log message is actually quite high. Raising the log level to debug naturally increases the likelihood even more.
</p>

<p>
It now also became clear why this hadn't manifested itself for me as I was developing bgworker in a standalone instance whereas Marko was integrating it into a larger package that also ran a number of other threads - also emitting log messages on startup, thus increasing the likelihood of a hang.
</p>
</div>
</div>

<div id="outline-container-orgb55dfd7" class="outline-3">
<h3 id="orgb55dfd7"><span class="section-number-3">1.3</span> Incredible timing</h3>
<div class="outline-text-3" id="text-1-3">
<p>
Note that the version of bgworker that we are talking about was committed on the 5th of July. After that it took us a few days, till the 8th, to hunt this bug down. 8th of July is also the day that Python 3.7.4rc2 was released and 3.7.4rc2 should address this issue!
</p>

<p>
<b>We find a bug that is over ten years old and on the day we find it, a fixed version of Python is released. What are the odds?</b>
</p>
</div>
</div>

<div id="outline-container-org796f2df" class="outline-3">
<h3 id="org796f2df"><span class="section-number-3">1.4</span> Revamping the NSO docker container</h3>
<div class="outline-text-3" id="text-1-4">
<p>
We run NSO in a docker container so switching Python version is relatively simple, but we still have various components and NEDs that include a couple too many dependencies, which does make it trickier to upgrade. We also try to rely on official packages from the distribution repositories rather than pulling down and compiling our own Python build&#x2026; but we wanted to make progress, so that had to go out the window.
</p>

<p>
Marko and I each rewrote the Dockerfile producing our NSO image, getting multiple alternatives of how we could get a newer Python version in there. We tried pyenv, manual install, some PPA (which wasn't on 3.7.4 yet but we figured we could have waited a few days).
</p>

<p>
In the end however, it turns out 3.7.4 doesn't really fix our issue. While it does bring improvements it ultimately does not address our issue. More code would be needed for that (you can't just remove the locks - so trying to log to the same file from what is now two UNIX processes would instead require inter-process locks). Anyway, we needed to fix the real problem through a redesign of our application code.
</p>
</div>
</div>

<div id="outline-container-org14bc75f" class="outline-3">
<h3 id="org14bc75f"><span class="section-number-3">1.5</span> A fresh start</h3>
<div class="outline-text-3" id="text-1-5">
<p>
The multiprocessing library uses <code>fork()</code> per default on UNIX like operating systems but this can be influenced through an argument and instead of <code>fork()</code> we can tell the multiprocessing library to <code>spawn</code> which I'm pretty sure maps to <code>posix_spawn()</code> under the hood. Unlike <code>fork()</code>, <code>posix_spawn()</code> doesn't copy all of the memory of the parent to the child process and so we won't get a copy of the held locks - instead we start off fresh. It also means we don't have any loggers at all so we have to set those up. What we want to provide to the user of our background_process micro-framework is a smooth experience and it's just nice if the loggers are already set up for you so you can focus on your own code instead of overhead stuff like logging.
</p>

<p>
We wanted to continue using the same log files that NCS uses per default, like ncs-python-vm-bgworker.log, so that the operations aspect remain the same regardless if you are writing standard Python components for NSO or if you are using the backgrund process design. Since we couldn't write to the same log file from two processes we would have to ship the logs from the child process to the parent process which then could write the messages to the file.
</p>

<p>
Marko quickly put together a queue listener and emitter so we could send log messages over a multiprocessing.Queue. The logging tree in Python is a singleton so we can attach a queue emitting handler in the child process and wrap all this away so that the user of our framework don't have to think about this. We do all this through a wrapping function, like this:
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">_bg_wrapper</span><span style="color: #4f97d7;">(</span>bg_fun, q, log_level, *bg_fun_args<span style="color: #4f97d7;">)</span>:
    <span style="color: #9f8766;">"""Internal wrapper for the background worker function.</span>
<span style="color: #9f8766;">    Used to set up logging via a QueueHandler in the child process. The other end</span>
<span style="color: #9f8766;">    of the queue is observed by a QueueListener in the parent process.</span>
<span style="color: #9f8766;">    """</span>
    <span style="color: #7590db;">queue_hdlr</span> = logging.handlers.QueueHandler<span style="color: #4f97d7;">(</span>q<span style="color: #4f97d7;">)</span>
    <span style="color: #7590db;">root</span> = logging.getLogger<span style="color: #4f97d7;">()</span>
    root.setLevel<span style="color: #4f97d7;">(</span>log_level<span style="color: #4f97d7;">)</span>
    root.addHandler<span style="color: #4f97d7;">(</span>queue_hdlr<span style="color: #4f97d7;">)</span>
    <span style="color: #7590db;">logger</span> = logging.getLogger<span style="color: #4f97d7;">(</span>bg_fun.<span style="color: #4f97d7;">__name__</span><span style="color: #4f97d7;">)</span>
    bg_fun<span style="color: #4f97d7;">(</span>logger, *bg_fun_args<span style="color: #4f97d7;">)</span>
</pre>
</div>

<p>
The queue log handler is set up and after this we run the bg_function provided to us by the user of the framework.
</p>
</div>
</div>

<div id="outline-container-org39f679a" class="outline-3">
<h3 id="org39f679a"><span class="section-number-3">1.6</span> The promise of efficient logging</h3>
<div class="outline-text-3" id="text-1-6">
<p>
Logging can be tricky. We often want to add log messages in various places to easily understand what our program is doing. However, logging itself comes at a cost, not just writing the messages but actually doing the string formatting of them can be relatively expensive. Python's standard logging module is pretty clever and will only format+emit a message if the log level is set high enough. If you have a tight loop and a <code>log.debug()</code> statement it won't actually run unless the log level is set to debug. This makes it possible to leave the logging statements in your code and know it will normally run fast. You will only incur a performance penalty when you actually turn on debugging.
</p>

<p>
We can easily show this using a simple program:
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #292e34;">#</span><span style="color: #2aa1ae; background-color: #292e34;">!/usr/bin/env python3</span>

<span style="color: #4f97d7; font-weight: bold;">import</span> logging
<span style="color: #4f97d7; font-weight: bold;">import</span> timeit

<span style="color: #7590db;">log</span> = logging.getLogger<span style="color: #4f97d7;">()</span>
<span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">noop</span><span style="color: #4f97d7;">()</span>:
    <span style="color: #7590db;">a</span> = <span style="color: #a45bad;">1</span>

<span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">log_some</span><span style="color: #4f97d7;">()</span>:
    <span style="color: #7590db;">a</span> = <span style="color: #a45bad;">1</span>
    log.debug<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">"foo"</span><span style="color: #4f97d7;">)</span>

<span style="color: #4f97d7; font-weight: bold;">if</span> <span style="color: #4f97d7;">__name__</span> == <span style="color: #2d9574;">'__main__'</span>:
    <span style="color: #4f97d7; font-weight: bold;">print</span><span style="color: #4f97d7;">(</span><span style="color: #2d9574;">"Noop                     : {}"</span>.<span style="color: #4f97d7;">format</span><span style="color: #bc6ec5;">(</span>timeit.timeit<span style="color: #2d9574;">(</span>noop, number=<span style="color: #a45bad;">100000</span><span style="color: #2d9574;">)</span><span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>
    log.setLevel<span style="color: #4f97d7;">(</span>logging.INFO<span style="color: #4f97d7;">)</span>
    <span style="color: #4f97d7; font-weight: bold;">print</span><span style="color: #4f97d7;">(</span><span style="color: #2d9574;">"Without debug log level  : {}"</span>.<span style="color: #4f97d7;">format</span><span style="color: #bc6ec5;">(</span>timeit.timeit<span style="color: #2d9574;">(</span>log_some, number=<span style="color: #a45bad;">100000</span><span style="color: #2d9574;">)</span><span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>
    log.setLevel<span style="color: #4f97d7;">(</span>logging.DEBUG<span style="color: #4f97d7;">)</span>
    <span style="color: #4f97d7; font-weight: bold;">print</span><span style="color: #4f97d7;">(</span><span style="color: #2d9574;">"With debug log level     : {}"</span>.<span style="color: #4f97d7;">format</span><span style="color: #bc6ec5;">(</span>timeit.timeit<span style="color: #2d9574;">(</span>log_some, number=<span style="color: #a45bad;">100000</span><span style="color: #2d9574;">)</span><span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>
    <span style="color: #7590db;">ch</span> = logging.FileHandler<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">'foo.log'</span><span style="color: #4f97d7;">)</span>
    ch.setLevel<span style="color: #4f97d7;">(</span>logging.DEBUG<span style="color: #4f97d7;">)</span>
    log.addHandler<span style="color: #4f97d7;">(</span>ch<span style="color: #4f97d7;">)</span>
    <span style="color: #4f97d7; font-weight: bold;">print</span><span style="color: #4f97d7;">(</span><span style="color: #2d9574;">"With debug log level + FH: {}"</span>.<span style="color: #4f97d7;">format</span><span style="color: #bc6ec5;">(</span>timeit.timeit<span style="color: #2d9574;">(</span>log_some, number=<span style="color: #a45bad;">100000</span><span style="color: #2d9574;">)</span><span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>
    log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">"foo"</span><span style="color: #4f97d7;">)</span>
</pre>
</div>

<div class="org-src-container">
<pre class="src src-shell">kll@nuc:~$ python3 slowlog.py 
Noop                     : <span style="color: #a45bad;">0.005788944661617279</span>
Without debug log level  : <span style="color: #a45bad;">0.03270535729825497</span>
With debug log level     : <span style="color: #a45bad;">0.7911096690222621</span>
With debug log level + FH: <span style="color: #a45bad;">1.8663266659714282</span>
kll@nuc:~$ 
</pre>
</div>

<p>
As we can see, calling a function that doesn't call <code>log.debug()</code> at all is vastly faster than calling a function that does call <code>log.debug()</code> - it's roughly an order of magnitude. Then enabling the DEBUG log level makes it roughly an order of magnitude slower and finally, actually writing the messages to a file slows it down to about half the speed.
</p>

<p>
I think of this as a promise to the programmer. You should be able to put log statements in tight loops that need to run fast (obviously not the tightest of loops - there you simply need to strip out your log statements for running in production). The log calls, when the debug logging isn't enabled, should be very very cheap.
</p>

<p>
Reconfiguring log levels in NCS will only reconfigure the log handler level in the parent process. The child process will remain oblivious. For us to be able to capture all log messages the child process must therefore always emit all log messages, including debug messages, to the queue and then we can filter them away in the parent process in case the current log level doesn't include debug messages.
</p>

<p>
This is however a rather naive implementation design and it breaks the promise of cheap logging. We need to do better.
</p>
</div>
</div>

<div id="outline-container-org6e91913" class="outline-3">
<h3 id="org6e91913"><span class="section-number-3">1.7</span> Log control queue</h3>
<div class="outline-text-3" id="text-1-7">
<p>
To uphold the promise of cheap logging in an environment with multiple processes like ours we need to propagate the log level configuration to the child process so it doesn't need to format and emit the log messages unless enabled by the currently configured logging level.
</p>

<p>
<a href="https://github.com/plajjan/bgworker/commit/c6ff59c3e72f152ec9706a97549b389d3c7546e4">I implemented</a> a CDB subscriber that listens to changes of the logging configuration and then passes this through a queue to the child process which then reconfigures its logging handler with the appropriate level.
</p>

<p>
Mission accomplished!
</p>
<ul class="org-ul">
<li>No more hangs of the Python VM</li>
<li>Consistent logging ergonomics with and without the background process framework</li>
<li>Cheap logging calls when debug is disabled</li>
</ul>

<p>
Read the <a href="./2019-07-29-writing-a-background-worker-for-cisco-nso-finale.html">final part</a> on how to avoid busy polling and efficiently implementing process monitoring!
</p>
</div>
</div>
</div>
<div class="taglist"><a href="tags.html">Tags</a>: <a href="tag-nso.html">NSO</a> </div>]]></description>
  <category>NSO</category>
  <link>https://plajjan.github.io/2019-07-26-writing-a-background-worker-for-cisco-nso-part-deux.html</link>
  <pubDate>Fri, 26 Jul 2019 00:00:00 +0200</pubDate>
</item>
<item>
  <title>Writing a Python background worker for Cisco NSO</title>
  <description><![CDATA[

<div id="outline-container-org9bf29f6" class="outline-2">
<h2 id="org9bf29f6"><span class="section-number-2">1</span> Writing a Python background worker for Cisco NSO</h2>
<div class="outline-text-2" id="text-1">
<p>
The <code>create()</code> callback is the primary means of which we get things done in Cisco NSO. NSO is most often used for configuration provisioning and so the <code>create()</code> callback, which reacts to changes on a YANG configuration subtree is the perfect tool; new configuration input leads to running of our <code>create()</code> code which renders new configuration output that we can push to devices or other services. In the YANG model we use a <code>servicepoints</code> for attaching a <code>create()</code> callback to a particular subtree in the YANG model. In addition to <code>create()</code> <code>servicepoint</code> we also have <code>actionpoints</code> which allow us to attach our code to YANG actions. Both <code>servicepoint</code> and <code>actionpoint</code> attach to the YANG model and lets code be executed upon external stimuli, either the request to run an action or the change of configuration. What if you want to decide yourself when something should happen or perhaps execute things at a certain periodicity? That's a job for a background worker which is running continuously. With such a background worker, it would be entirely up to you to shape and form the code of the worker to do whatever you need to accomplish. This post is about implementing such a background worker.
</p>

<p>
It should be noted that there is functionality in NSO to schedule periodic activities in a cron job style but I find it somewhat lacking, not that it's worse than cron but cron just isn't the right tool for everything. You would probably do well in understanding it before deciding on how to solve your specific challenge. Either way, as is common with us technical people the question of why or why not is not the focus of this post. Rather, we want to focus on the <b>how</b>. <i>If</i> you feel the need for a background worker in NSO, how do you actually go about implementing one?
</p>

<p>
I'll assume you have some experience with Cisco NSO and that you know how to implement basic services, actions etc. Since I have a strong preference of Python over Java, this will focus on how to do this using the Python support in NSO. Let's go on a journey of implementing a Python background worker for Cisco NSO!
</p>
</div>

<div id="outline-container-org7389e34" class="outline-3">
<h3 id="org7389e34"><span class="section-number-3">1.1</span> TL;DR;</h3>
<div class="outline-text-3" id="text-1-1">
<p>
If you just want to skip to the result, check out <a href="https://github.com/plajjan/bgworker">bgworker on github</a>.
</p>
</div>
</div>

<div id="outline-container-org55f29ac" class="outline-3">
<h3 id="org55f29ac"><span class="section-number-3">1.2</span> Anatomy of the Python VM</h3>
<div class="outline-text-3" id="text-1-2">
<p>
The NSO core is written in Erlang and so to run user code written in Python it runs a separate Python VM process that communicates with the NSO core over a number of APIs. It will spawn one Python VM process for each NSO package that wants to run Python code. Thus there is some separation between different packages and given the GIL (Giant Interpreter Lock) in the standard Python interpreter it also allows for a natural way to get past the parallel execution problem, at least to a certain extent, as different NSO packages will run in their own python process.
</p>

<p>
Within each Python VM there will be a main thread and then multiple other threads for the various components that are specified by the <code>package-meta-data.xml</code> file.
</p>
</div>
</div>

<div id="outline-container-org7782c02" class="outline-3">
<h3 id="org7782c02"><span class="section-number-3">1.3</span> A naive approach</h3>
<div class="outline-text-3" id="text-1-3">
<p>
Okay, so let's get started. Let's try writing a background worker. We'll start by making a new package and we'll start off from the python service skeleton.
</p>

<div class="org-src-container">
<pre class="src src-shell">ncs-make-package --service-skeleton python
</pre>
</div>

<p>
The purpose of our background worker, as an example, will be to increment a counter at a periodic interval. It's stupid simple and not useful on its own but as we will see, our focus won't be on the work carried out but primarily on the things around setting up a worker and so this will serve as a simple example. I'm sure you'll be able to adapt it to your task.
</p>

<p>
Edit or replace the YANG model to the following. We just want a simple leaf called counter, that is config false (i.e. operational state data). To avoid total chaos we put it under a bgworker container.
</p>

<div class="org-src-container">
<pre class="src src-yang"><span style="color: #4f97d7; font-weight: bold;">module</span> <span style="color: #ce537a; font-weight: bold;">bgworker</span> <span style="color: #4f97d7;">{</span>

  <span style="color: #4f97d7; font-weight: bold;">namespace</span> <span style="color: #2d9574;">"http://example.com/bgworker"</span>;
  <span style="color: #4f97d7; font-weight: bold;">prefix</span> <span style="color: #ce537a; font-weight: bold;">bgworker</span>;

  <span style="color: #4f97d7; font-weight: bold;">container</span> <span style="color: #ce537a; font-weight: bold;">bgworker</span> <span style="color: #bc6ec5;">{</span>
    <span style="color: #4f97d7; font-weight: bold;">leaf</span> <span style="color: #ce537a; font-weight: bold;">counter</span> <span style="color: #2d9574;">{</span>
      <span style="color: #4f97d7; font-weight: bold;">config</span> <span style="color: #a45bad;">false</span>;
      <span style="color: #4f97d7; font-weight: bold;">type</span> <span style="color: #ce537a; font-weight: bold;">uint32</span>;
      <span style="color: #4f97d7; font-weight: bold;">default</span> <span style="color: #a45bad;">0</span>;
    <span style="color: #2d9574;">}</span>
  <span style="color: #bc6ec5;">}</span>
<span style="color: #4f97d7;">}</span>
</pre>
</div>

<p>
There are some other things, like revision and description of the module that you should add in but I'm trying to keep it to an absolute bare minimum in order to focus on what is relevant for our scenario.
</p>

<p>
We set the default value to 0 which means the counter will be 0 each time NCS starts up. Unlike configuration data, state data in NCS is not persisted per default which is why our leaf will go back to a value of 0 each time NCS starts. We could add <code>tailf:persistent "true"</code> to the leaf to make it persisted in CDB.
</p>

<p>
With a YANG model in place, how do we actually go about implementing the worker itself? The <code>ncs.application.Application</code> class offered by the NSO Python libraries allows us to define an "Application" which is our entry point and way of hooking into NSO. The normal example skeleton code produced by <code>ncs-make-package</code> shows us the use of the <code>setup()</code> and <code>teardown()</code> methods to hook into the start and stop of our Application.
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">-*- mode: python; python-indent: 4 -*-</span>
<span style="color: #4f97d7; font-weight: bold;">import</span> ncs
<span style="color: #4f97d7; font-weight: bold;">from</span> ncs.application <span style="color: #4f97d7; font-weight: bold;">import</span> Service


<span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">------------------------</span>
<span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">SERVICE CALLBACK EXAMPLE</span>
<span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">------------------------</span>
<span style="color: #4f97d7; font-weight: bold;">class</span> <span style="color: #ce537a; font-weight: bold;">ServiceCallbacks</span><span style="color: #4f97d7;">(</span>Service<span style="color: #4f97d7;">)</span>:

    <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">The create() callback is invoked inside NCS FASTMAP and</span>
    <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">must always exist.</span>
    <span style="color: #ce537a; font-weight: bold;">@Service.create</span>
    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">cb_create</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>, tctx, root, service, proplist<span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">self</span>.log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">'Service create(service='</span>, service._path, <span style="color: #2d9574;">')'</span><span style="color: #4f97d7;">)</span>


    <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">The pre_modification() and post_modification() callbacks are optional,</span>
    <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">and are invoked outside FASTMAP. pre_modification() is invoked before</span>
    <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">create, update, or delete of the service, as indicated by the enum</span>
    <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">ncs_service_operation op parameter. Conversely</span>
    <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">post_modification() is invoked after create, update, or delete</span>
    <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">of the service. These functions can be useful e.g. for</span>
    <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">allocations that should be stored and existing also when the</span>
    <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">service instance is removed.</span>

    <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">@Service.pre_lock_create</span>
    <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">def cb_pre_lock_create(self, tctx, root, service, proplist):</span>
    <span style="color: #2aa1ae; background-color: #292e34;">#     </span><span style="color: #2aa1ae; background-color: #292e34;">self.log.info('Service plcreate(service=', service._path, ')')</span>

    <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">@Service.pre_modification</span>
    <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">def cb_pre_modification(self, tctx, op, kp, root, proplist):</span>
    <span style="color: #2aa1ae; background-color: #292e34;">#     </span><span style="color: #2aa1ae; background-color: #292e34;">self.log.info('Service premod(service=', kp, ')')</span>

    <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">@Service.post_modification</span>
    <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">def cb_post_modification(self, tctx, op, kp, root, proplist):</span>
    <span style="color: #2aa1ae; background-color: #292e34;">#     </span><span style="color: #2aa1ae; background-color: #292e34;">self.log.info('Service premod(service=', kp, ')')</span>


<span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">---------------------------------------------</span>
<span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">COMPONENT THREAD THAT WILL BE STARTED BY NCS.</span>
<span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">---------------------------------------------</span>
<span style="color: #4f97d7; font-weight: bold;">class</span> <span style="color: #ce537a; font-weight: bold;">Main</span><span style="color: #4f97d7;">(</span>ncs.application.Application<span style="color: #4f97d7;">)</span>:
    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">setup</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">The application class sets up logging for us. It is accessible</span>
        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">through 'self.log' and is a ncs.log.Log instance.</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">'Main RUNNING'</span><span style="color: #4f97d7;">)</span>

        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">Service callbacks require a registration for a 'service point',</span>
        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">as specified in the corresponding data model.</span>
        <span style="color: #2aa1ae; background-color: #292e34;">#</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.register_service<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">'bgworker-servicepoint'</span>, ServiceCallbacks<span style="color: #4f97d7;">)</span>

        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">If we registered any callback(s) above, the Application class</span>
        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">took care of creating a daemon (related to the service/action point).</span>

        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">When this setup method is finished, all registrations are</span>
        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">considered done and the application is 'started'.</span>

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">teardown</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">When the application is finished (which would happen if NCS went</span>
        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">down, packages were reloaded or some error occurred) this teardown</span>
        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">method will be called.</span>

        <span style="color: #4f97d7; font-weight: bold;">self</span>.log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">'Main FINISHED'</span><span style="color: #4f97d7;">)</span>
</pre>
</div>

<p>
As can be seen by this comment, this is a component thread and runs as a thread in the Python VM.
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">---------------------------------------------</span>
<span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">COMPONENT THREAD THAT WILL BE STARTED BY NCS.</span>
<span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">---------------------------------------------</span>
<span style="color: #4f97d7; font-weight: bold;">class</span> <span style="color: #ce537a; font-weight: bold;">Main</span><span style="color: #4f97d7;">(</span>ncs.application.Application<span style="color: #4f97d7;">)</span>:
    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">setup</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        ...
</pre>
</div>

<p>
We want a background worker, so all we have to do is start another thread from this <code>setup()</code> method, right?
</p>

<p>
Here's the modified Python code:
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">-*- mode: python; python-indent: 4 -*-</span>
<span style="color: #4f97d7; font-weight: bold;">import</span> threading
<span style="color: #4f97d7; font-weight: bold;">import</span> time

<span style="color: #4f97d7; font-weight: bold;">import</span> ncs
<span style="color: #4f97d7; font-weight: bold;">from</span> ncs.application <span style="color: #4f97d7; font-weight: bold;">import</span> Service


<span style="color: #4f97d7; font-weight: bold;">class</span> <span style="color: #ce537a; font-weight: bold;">BgWorker</span><span style="color: #4f97d7;">(</span>threading.Thread<span style="color: #4f97d7;">)</span>:
    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">run</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">while</span> <span style="color: #a45bad;">True</span>:
            <span style="color: #4f97d7; font-weight: bold;">print</span><span style="color: #4f97d7;">(</span><span style="color: #2d9574;">"Hello from background worker"</span><span style="color: #4f97d7;">)</span>
            time.sleep<span style="color: #4f97d7;">(</span><span style="color: #a45bad;">1</span><span style="color: #4f97d7;">)</span>


<span style="color: #4f97d7; font-weight: bold;">class</span> <span style="color: #ce537a; font-weight: bold;">Main</span><span style="color: #4f97d7;">(</span>ncs.application.Application<span style="color: #4f97d7;">)</span>:
    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">setup</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">self</span>.log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">'Main RUNNING'</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.bgw = BgWorker<span style="color: #4f97d7;">()</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.bgw.start<span style="color: #4f97d7;">()</span>

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">teardown</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">self</span>.log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">'Main FINISHED'</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.bgw.stop<span style="color: #4f97d7;">()</span>
</pre>
</div>

<p>
I ripped out the <code>ServiceCallbacks</code> class with its <code>cb_create()</code> since we don't need that here and instead created a new thread definition called <code>BgWorker</code> which is instantiated and started from the <code>setup()</code> method of our Application. Let's try loading the package by running <code>request packages reload</code> on our NCS instance (I'm presuming you know how to start up NCS, put the package in the right place etc).
</p>

<div class="org-src-container">
<pre class="src src-text">admin@ncs&gt; request packages reload force

&gt;&gt;&gt; System upgrade is starting.
&gt;&gt;&gt; Sessions in configure mode must exit to operational mode.
&gt;&gt;&gt; No configuration changes can be performed until upgrade has completed.
&gt;&gt;&gt; System upgrade has completed successfully.
reload-result {
    package bgworker
    result true
}
[ok][2019-07-01 13:43:04]
admin@ncs&gt;
</pre>
</div>

<p>
The only thing our background worker does at this point is print a message once a second. Since they are printed and not logged, they will show up in the main python log of NCS <code>ncs-python-vm.log</code>. 
</p>

<div class="org-src-container">
<pre class="src src-text">kll@nuc:~/ncs-4.7.4.2/ncs-run/logs$ tail -f ncs-python-vm.log 
&lt;INFO&gt; 1-Jul-2019::13:43:04.534 nuc ncs[11832]: Started PyVM: &lt;&lt;"bgworker"&gt;&gt; , Port=#Port&lt;0.26560&gt; , OSpid="26111"
&lt;INFO&gt; 1-Jul-2019::13:43:04.535 nuc ncs[11832]: bgworker :: Starting /home/kll/ncs-4.7.4.2/src/ncs/pyapi/ncs_pyvm/startup.py -l info -f ./logs/ncs-python-vm -i bgworker
&lt;INFO&gt; 1-Jul-2019::13:43:04.595 nuc ncs[11832]: bgworker :: Hello from background worker
&lt;INFO&gt; 1-Jul-2019::13:43:05.597 nuc ncs[11832]: bgworker :: Hello from background worker
&lt;INFO&gt; 1-Jul-2019::13:43:06.598 nuc ncs[11832]: bgworker :: Hello from background worker
&lt;INFO&gt; 1-Jul-2019::13:43:07.599 nuc ncs[11832]: bgworker :: Hello from background worker
&lt;INFO&gt; 1-Jul-2019::13:43:08.599 nuc ncs[11832]: bgworker :: Hello from background worker
</pre>
</div>

<p>
Et voilà! It's working.
</p>
</div>
</div>

<div id="outline-container-org67c41d5" class="outline-3">
<h3 id="org67c41d5"><span class="section-number-3">1.4</span> Reacting to NCS package events like reload and redeploy</h3>
<div class="outline-text-3" id="text-1-4">
<p>
<code>request packages reload</code> is the "standard" way of loading in new packages, including loading new packages, loading a newer version of an existing already loaded package as well as unloading package (in which case you have to also provide the <code>force</code> as NCS will complain over the removal of a namespace, which it thinks is a mistake). It covers all changes like config template changes, YANG model changes and code changes. It is however quite slow and if you have a lot of packages you will soon be rather annoyed over the time it takes (around 2 minutes with the packages we usually have loaded in my work environment). Code changes are perhaps the most common changes during development as you are changing lines, wanting to get them loaded immediately and then run your code again. There is a <code>redeploy</code> command for exactly this purpose which can redeploy the code for a single package. In our case, the package is called <code>bgworker</code> and so we can redeploy the code by running <code>request packages package bgworker redeploy</code>. It normally runs in a second or so.
</p>

<p>
Let's try:
</p>
<div class="org-src-container">
<pre class="src src-text">admin@ncs&gt; request packages package bgworker redeploy
result false
[ok][2019-07-01 13:48:49]
admin@ncs&gt; 
</pre>
</div>

<p>
uh oh. <code>result false</code>, why?
</p>

<p>
Well, our thread runs a <code>while True</code> loop and so it simply doesn't have a way of exiting. Unlike UNIX processes, there is no way to kill a thread. They can't be interrupted through signals or similar. If you want to stop a thread, the thread itself has to cooperate, so in effect what you are doing is to <i>ask</i> the thread to shut down. We can still forcibly stop our thread by stopping the entire Python VM for our NCS package, since it is running as a UNIX process and can thus be terminated, which will naturally bring down the thread as well. There is a <code>request python-vm stop</code> command in NCS or we can just run <code>request packages reload</code> which also involves restarting the Python VM (restart being a stop of the old version and a start of the new version). 
</p>

<p>
We want to be able to run <code>redeploy</code> though, so how do we get our background worker to play nice? The requirement is that the work has to stop within 3 seconds or NCS thinks it's a failure.
</p>

<p>
Using a Python events might be the most natural way:
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">-*- mode: python; python-indent: 4 -*-</span>
<span style="color: #4f97d7; font-weight: bold;">import</span> threading
<span style="color: #4f97d7; font-weight: bold;">import</span> time

<span style="color: #4f97d7; font-weight: bold;">import</span> ncs
<span style="color: #4f97d7; font-weight: bold;">from</span> ncs.application <span style="color: #4f97d7; font-weight: bold;">import</span> Service


<span style="color: #4f97d7; font-weight: bold;">class</span> <span style="color: #ce537a; font-weight: bold;">BgWorker</span><span style="color: #4f97d7;">(</span>threading.Thread<span style="color: #4f97d7;">)</span>:
    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">__init__</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        threading.Thread.__init__<span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>._exit_flag = threading.Event<span style="color: #4f97d7;">()</span>

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">run</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">while</span> <span style="color: #4f97d7; font-weight: bold;">not</span> <span style="color: #4f97d7; font-weight: bold;">self</span>._exit_flag.wait<span style="color: #4f97d7;">(</span>timeout=<span style="color: #a45bad;">1</span><span style="color: #4f97d7;">)</span>:
            <span style="color: #4f97d7; font-weight: bold;">print</span><span style="color: #4f97d7;">(</span><span style="color: #2d9574;">"Hello from background worker"</span><span style="color: #4f97d7;">)</span>

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">stop</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">self</span>._exit_flag.<span style="color: #4f97d7;">set</span><span style="color: #4f97d7;">()</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.join<span style="color: #4f97d7;">()</span>


<span style="color: #4f97d7; font-weight: bold;">class</span> <span style="color: #ce537a; font-weight: bold;">Main</span><span style="color: #4f97d7;">(</span>ncs.application.Application<span style="color: #4f97d7;">)</span>:
    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">setup</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">self</span>.log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">'Main RUNNING'</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.bgw = BgWorker<span style="color: #4f97d7;">()</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.bgw.start<span style="color: #4f97d7;">()</span>

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">teardown</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">self</span>.log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">'Main FINISHED'</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.bgw.stop<span style="color: #4f97d7;">()</span>
</pre>
</div>

<p>
We modify our code a bit, inserting a check on a threading.Event in the main loop and then set the Event externally in the thread <code>stop()</code> method. Since we can run <code>wait()</code> on the Event with a timeout of 1 second we no longer need the separate <code>time.sleep(1)</code> call.
</p>

<p>
We override <code>__init__()</code> but since we have to call the overwritten <code>__init__</code> we do that by calling <code>threading.Thread.__init__(self)</code>.
</p>

<p>
Now running redeploy works just fine:
</p>

<div class="org-src-container">
<pre class="src src-text">admin@ncs&gt; request packages package bgworker redeploy               
result true
[ok][2019-07-01 15:02:09]
admin@ncs&gt; 
</pre>
</div>

<p>
Maybe we should implement the main functionality of our program, to increment the counter, instead of just printing a message. Let's rewrite the <code>run</code> method. I've included the full module here but the changes are only in the <code>run</code> method.
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">-*- mode: python; python-indent: 4 -*-</span>
<span style="color: #4f97d7; font-weight: bold;">import</span> threading
<span style="color: #4f97d7; font-weight: bold;">import</span> time

<span style="color: #4f97d7; font-weight: bold;">import</span> ncs
<span style="color: #4f97d7; font-weight: bold;">from</span> ncs.application <span style="color: #4f97d7; font-weight: bold;">import</span> Service


<span style="color: #4f97d7; font-weight: bold;">class</span> <span style="color: #ce537a; font-weight: bold;">BgWorker</span><span style="color: #4f97d7;">(</span>threading.Thread<span style="color: #4f97d7;">)</span>:
    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">__init__</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        threading.Thread.__init__<span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>._exit_flag = threading.Event<span style="color: #4f97d7;">()</span>

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">run</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">while</span> <span style="color: #4f97d7; font-weight: bold;">not</span> <span style="color: #4f97d7; font-weight: bold;">self</span>._exit_flag.wait<span style="color: #4f97d7;">(</span>timeout=<span style="color: #a45bad;">1</span><span style="color: #4f97d7;">)</span>:
            <span style="color: #4f97d7; font-weight: bold;">with</span> ncs.maapi.single_write_trans<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">'bgworker'</span>, <span style="color: #2d9574;">'system'</span>, db=ncs.OPERATIONAL<span style="color: #4f97d7;">)</span> <span style="color: #4f97d7; font-weight: bold;">as</span> oper_trans_write:
                <span style="color: #7590db;">root</span> = ncs.maagic.get_root<span style="color: #4f97d7;">(</span>oper_trans_write<span style="color: #4f97d7;">)</span>
                <span style="color: #7590db;">cur_val</span> = root.bgworker.counter
                <span style="color: #7590db;">root.bgworker.counter</span> += <span style="color: #a45bad;">1</span>
                oper_trans_write.<span style="color: #4f97d7;">apply</span><span style="color: #4f97d7;">()</span>

            <span style="color: #4f97d7; font-weight: bold;">print</span><span style="color: #4f97d7;">(</span><span style="color: #2d9574;">"Hello from background worker, increment counter from {} to {}"</span>.<span style="color: #4f97d7;">format</span><span style="color: #bc6ec5;">(</span>cur_val, cur_val+<span style="color: #a45bad;">1</span><span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">stop</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">self</span>._exit_flag.<span style="color: #4f97d7;">set</span><span style="color: #4f97d7;">()</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.join<span style="color: #4f97d7;">()</span>


<span style="color: #4f97d7; font-weight: bold;">class</span> <span style="color: #ce537a; font-weight: bold;">Main</span><span style="color: #4f97d7;">(</span>ncs.application.Application<span style="color: #4f97d7;">)</span>:
    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">setup</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">self</span>.log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">'Main RUNNING'</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.bgw = BgWorker<span style="color: #4f97d7;">()</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.bgw.start<span style="color: #4f97d7;">()</span>

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">teardown</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">self</span>.log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">'Main FINISHED'</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.bgw.stop<span style="color: #4f97d7;">()</span>
</pre>
</div>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #4f97d7; font-weight: bold;">with</span> ncs.maapi.single_write_trans<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">'bgworker'</span>, <span style="color: #2d9574;">'system'</span>, db=ncs.OPERATIONAL<span style="color: #4f97d7;">)</span> <span style="color: #4f97d7; font-weight: bold;">as</span> oper_trans_write:
</pre>
</div>
<p>
We've added some code where we open a single MAAPI write transaction using <code>single_write_trans()</code> which allows us to open both a maapi context, session and transaction all in one call. We use it as a context manager to ensure we close all those resources in case of errors or normal exit. There are three parameters to this call. The first and second are the "authentication" information to the system. All of this is running over a trusted MAAPI session but we can tell it what user we are then running our session as. The <code>system</code> user is special and has access to pretty much everything. It doesn't rely on the AAA system and so it is a good candidate for writing these kinds of background workers - if someone messes up the AAA configuration you still don't risk your background workers stopping. The first parameter is a context name. I've found that it's very useful to use a good name (you can use an empty string) since it makes troubleshooting so much easier - this context name shows up in <code>ncs --status</code> and other places - if you want to be able to know who is holding a lock, you want to put something useful here. The third parameter is where we say we are only interested in the operational datastore, whereas if we wanted to change any configuration this would have to be <code>running</code>, which also is the default so we could just leave out the argument completely.
</p>

<p>
Once we have a transaction to the operational database we want to find our node, read out its value, add 1 and write it back which is what the following three lines accomplishes:
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #7590db;">root</span> = ncs.maagic.get_root<span style="color: #4f97d7;">(</span>oper_trans_write<span style="color: #4f97d7;">)</span>
<span style="color: #7590db;">cur_val</span> = root.bgworker.counter
<span style="color: #7590db;">root.bgworker.counter</span> += <span style="color: #a45bad;">1</span>
oper_trans_write.<span style="color: #4f97d7;">apply</span><span style="color: #4f97d7;">()</span>
</pre>
</div>

<p>
finally we <code>apply()</code> the transaction.
</p>

<p>
In the logs we can now see our log message reflecting what it is doing:
</p>

<div class="org-src-container">
<pre class="src src-text">&lt;INFO&gt; 1-Jul-2019::15:11:54.906 nuc ncs[11832]: Started PyVM: &lt;&lt;"bgworker"&gt;&gt; , Port=#Port&lt;0.34116&gt; , OSpid="32328"
&lt;INFO&gt; 1-Jul-2019::15:11:54.906 nuc ncs[11832]: bgworker :: Starting /home/kll/ncs-4.7.4.2/src/ncs/pyapi/ncs_pyvm/startup.py -l info -f ./logs/ncs-python-vm -i bgworker
&lt;INFO&gt; 1-Jul-2019::15:11:55.956 nuc ncs[11832]: bgworker :: Hello from background worker, increment counter from 0 to 1
&lt;INFO&gt; 1-Jul-2019::15:11:56.964 nuc ncs[11832]: bgworker :: Hello from background worker, increment counter from 1 to 2
&lt;INFO&gt; 1-Jul-2019::15:11:57.977 nuc ncs[11832]: bgworker :: Hello from background worker, increment counter from 2 to 3
&lt;INFO&gt; 1-Jul-2019::15:11:58.982 nuc ncs[11832]: bgworker :: Hello from background worker, increment counter from 3 to 4
&lt;INFO&gt; 1-Jul-2019::15:11:59.997 nuc ncs[11832]: bgworker :: Hello from background worker, increment counter from 4 to 5
&lt;INFO&gt; 1-Jul-2019::15:12:01.007 nuc ncs[11832]: bgworker :: Hello from background worker, increment counter from 5 to 6
</pre>
</div>

<p>
And if we go look at the value through the CLI we can see how it is being incremented:
</p>
<div class="org-src-container">
<pre class="src src-text">admin@ncs&gt; show bgworker counter 
bgworker counter 845
[ok][2019-07-01 15:26:08]
admin@ncs&gt; 
</pre>
</div>

<p>
Success!
</p>

<p>
If we <code>redeploy</code> the <code>bgworker</code> package or reload all packages, the worker would continue incrementing the counter from where it left off. This is because we only restart the Python VM while NCS is still running and since the value is stored in CDB, which is part of NCS, it will not go back to the default value of 0 unless we restart NCS.
</p>

<p>
Let's clean up our code a bit. Instead of printing these messages to stdout we want to use standard Python logging (well, it's actually overridden by an NCS logging module but it acts the same, just allowing reconfiguration from within NCS itself). We want to hide this background thread and just make it look like our application is printing the messages and so we pass the log object down (you can do it in other ways if you want to):
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">-*- mode: python; python-indent: 4 -*-</span>
<span style="color: #4f97d7; font-weight: bold;">import</span> threading
<span style="color: #4f97d7; font-weight: bold;">import</span> time

<span style="color: #4f97d7; font-weight: bold;">import</span> ncs
<span style="color: #4f97d7; font-weight: bold;">from</span> ncs.application <span style="color: #4f97d7; font-weight: bold;">import</span> Service


<span style="color: #4f97d7; font-weight: bold;">class</span> <span style="color: #ce537a; font-weight: bold;">BgWorker</span><span style="color: #4f97d7;">(</span>threading.Thread<span style="color: #4f97d7;">)</span>:
    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">__init__</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>, log<span style="color: #4f97d7;">)</span>:
        threading.Thread.__init__<span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.log = log
        <span style="color: #4f97d7; font-weight: bold;">self</span>._exit_flag = threading.Event<span style="color: #4f97d7;">()</span>

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">run</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">while</span> <span style="color: #4f97d7; font-weight: bold;">not</span> <span style="color: #4f97d7; font-weight: bold;">self</span>._exit_flag.wait<span style="color: #4f97d7;">(</span>timeout=<span style="color: #a45bad;">1</span><span style="color: #4f97d7;">)</span>:
            <span style="color: #4f97d7; font-weight: bold;">with</span> ncs.maapi.single_write_trans<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">'bgworker'</span>, <span style="color: #2d9574;">'system'</span>, db=ncs.OPERATIONAL<span style="color: #4f97d7;">)</span> <span style="color: #4f97d7; font-weight: bold;">as</span> oper_trans_write:
                <span style="color: #7590db;">root</span> = ncs.maagic.get_root<span style="color: #4f97d7;">(</span>oper_trans_write<span style="color: #4f97d7;">)</span>
                <span style="color: #7590db;">cur_val</span> = root.bgworker.counter
                <span style="color: #7590db;">root.bgworker.counter</span> += <span style="color: #a45bad;">1</span>
                oper_trans_write.<span style="color: #4f97d7;">apply</span><span style="color: #4f97d7;">()</span>

            <span style="color: #4f97d7; font-weight: bold;">self</span>.log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">"Hello from background worker, increment counter from {} to {}"</span>.<span style="color: #4f97d7;">format</span><span style="color: #bc6ec5;">(</span>cur_val, cur_val+<span style="color: #a45bad;">1</span><span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">stop</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">self</span>._exit_flag.<span style="color: #4f97d7;">set</span><span style="color: #4f97d7;">()</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.join<span style="color: #4f97d7;">()</span>


<span style="color: #4f97d7; font-weight: bold;">class</span> <span style="color: #ce537a; font-weight: bold;">Main</span><span style="color: #4f97d7;">(</span>ncs.application.Application<span style="color: #4f97d7;">)</span>:
    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">setup</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">self</span>.log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">'Main RUNNING'</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.bgw = BgWorker<span style="color: #4f97d7;">(</span>log=<span style="color: #4f97d7; font-weight: bold;">self</span>.log<span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.bgw.start<span style="color: #4f97d7;">()</span>

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">teardown</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">self</span>.log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">'Main FINISHED'</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.bgw.stop<span style="color: #4f97d7;">()</span>
</pre>
</div>

<p>
And looking in the log <code>ncs-python-vm-bgworker-log</code> (notice the package name <code>bgworker</code> in the file name) we see how it is now logging there as expected:
</p>

<div class="org-src-container">
<pre class="src src-text">&lt;INFO&gt; 01-Jul-2019::15:30:06.582 bgworker MainThread: - Python 2.7.16 (default, Apr  6 2019, 01:42:57) [GCC 8.3.0]
&lt;INFO&gt; 01-Jul-2019::15:30:06.582 bgworker MainThread: - Starting...
&lt;INFO&gt; 01-Jul-2019::15:30:06.583 bgworker MainThread: - Started
&lt;INFO&gt; 01-Jul-2019::15:30:06.602 bgworker ComponentThread:main: - Main RUNNING
&lt;INFO&gt; 01-Jul-2019::15:30:07.607 bgworker Thread-5: - Hello from background worker, increment counter from 1061 to 1062
&lt;INFO&gt; 01-Jul-2019::15:30:08.620 bgworker Thread-5: - Hello from background worker, increment counter from 1062 to 1063
&lt;INFO&gt; 01-Jul-2019::15:30:09.624 bgworker Thread-5: - Hello from background worker, increment counter from 1063 to 1064
&lt;INFO&gt; 01-Jul-2019::15:30:10.628 bgworker Thread-5: - Hello from background worker, increment counter from 1064 to 1065
</pre>
</div>

<p>
(you can also sort of figure out how long I am taking to write the various sections of this post based on the counter).
</p>
</div>
</div>


<div id="outline-container-orgf63786f" class="outline-3">
<h3 id="orgf63786f"><span class="section-number-3">1.5</span> Back to killable threads</h3>
<div class="outline-text-3" id="text-1-5">
<p>
Now that we've opened a transaction towards CDB there is one issue we will inevitable face. The running datastore has a global lock and while there are no locks on the operational datastore, applying a transaction can still take some time. For example, in a HA cluster the operational data is synchronously replicated and if other nodes are busy or there are other things ahead of us queued up, it can take some time to apply a transaction. Remember that we have to exit in three seconds. The way we structured our code, we read the <code>self._exit_flag</code> waiting for up to a second for any values to happen, then we open the transaction and write some data and then we come back to looking at our exit flag again. If we spend more than three seconds in the transaction part of the code we won't observe the exit flag and we will fail to exit in three seconds.
</p>

<p>
How do we avoid this? How can we leave a guarantee on being able to exit in three seconds?
</p>

<p>
One solution is to avoid threads altogether and instead use separate processes and this is the route which we will go down. A process can be interrupted by signals like TERM or KILL, which is the functionality we are after here.
</p>

<p>
Also, David Beazley did an interesting talk on killable threads <a href="https://www.youtube.com/watch?v=U66KuyD3T0M">https://www.youtube.com/watch?v=U66KuyD3T0M</a> which you're encouraged to check out. It's rather interesting&#x2026; but back to our background worker process!
</p>
</div>
</div>

<div id="outline-container-org4283d96" class="outline-3">
<h3 id="org4283d96"><span class="section-number-3">1.6</span> multiprocessing</h3>
<div class="outline-text-3" id="text-1-6">
<p>
Python has a very convenient library called <code>multiprocessing</code> which is close to a drop in replacement for the threading library and as we'll see, we can simplify the code quite a bit since we no longer have to do cooperative shutdown - we can just terminate the background worker process when we want to stop it.
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">-*- mode: python; python-indent: 4 -*-</span>
<span style="color: #4f97d7; font-weight: bold;">import</span> multiprocessing
<span style="color: #4f97d7; font-weight: bold;">import</span> time

<span style="color: #4f97d7; font-weight: bold;">import</span> ncs
<span style="color: #4f97d7; font-weight: bold;">from</span> ncs.application <span style="color: #4f97d7; font-weight: bold;">import</span> Service

<span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">bg_worker</span><span style="color: #4f97d7;">(</span>log<span style="color: #4f97d7;">)</span>:
    <span style="color: #4f97d7; font-weight: bold;">while</span> <span style="color: #a45bad;">True</span>:
        <span style="color: #4f97d7; font-weight: bold;">with</span> ncs.maapi.single_write_trans<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">'bgworker'</span>, <span style="color: #2d9574;">'system'</span>, db=ncs.OPERATIONAL<span style="color: #4f97d7;">)</span> <span style="color: #4f97d7; font-weight: bold;">as</span> oper_trans_write:
            <span style="color: #7590db;">root</span> = ncs.maagic.get_root<span style="color: #4f97d7;">(</span>oper_trans_write<span style="color: #4f97d7;">)</span>
            <span style="color: #7590db;">cur_val</span> = root.bgworker.counter
            <span style="color: #7590db;">root.bgworker.counter</span> += <span style="color: #a45bad;">1</span>
            oper_trans_write.<span style="color: #4f97d7;">apply</span><span style="color: #4f97d7;">()</span>

        log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">"Hello from background worker process, increment counter from {} to {}"</span>.<span style="color: #4f97d7;">format</span><span style="color: #bc6ec5;">(</span>cur_val, cur_val+<span style="color: #a45bad;">1</span><span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>
        time.sleep<span style="color: #4f97d7;">(</span><span style="color: #a45bad;">1</span><span style="color: #4f97d7;">)</span>


<span style="color: #4f97d7; font-weight: bold;">class</span> <span style="color: #ce537a; font-weight: bold;">Main</span><span style="color: #4f97d7;">(</span>ncs.application.Application<span style="color: #4f97d7;">)</span>:
    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">setup</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">self</span>.log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">'Main RUNNING'</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.bgw = multiprocessing.Process<span style="color: #4f97d7;">(</span>target=bg_worker, args=<span style="color: #bc6ec5;">[</span><span style="color: #4f97d7; font-weight: bold;">self</span>.log<span style="color: #bc6ec5;">]</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.bgw.start<span style="color: #4f97d7;">()</span>

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">teardown</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">self</span>.log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">'Main FINISHED'</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.bgw.terminate<span style="color: #4f97d7;">()</span>
</pre>
</div>

<p>
Much simpler, no? And the result is the same, in fact, since we are passing in the logging object, it is inseparable from the threading solution in the log:
</p>

<div class="org-src-container">
<pre class="src src-text">&lt;INFO&gt; 01-Jul-2019::21:12:42.897 bgworker ComponentThread:main: - Main RUNNING
&lt;INFO&gt; 01-Jul-2019::21:12:42.905 bgworker ComponentThread:main: - Hello from background worker process, increment counter from 21271 to 21272
&lt;INFO&gt; 01-Jul-2019::21:12:43.911 bgworker ComponentThread:main: - Hello from background worker process, increment counter from 21272 to 21273
</pre>
</div>

<p>
well, I changed the log message slightly so I'd actually see it was from the background worker <b>process</b>.
</p>
</div>
</div>

<div id="outline-container-orga0bf44b" class="outline-3">
<h3 id="orga0bf44b"><span class="section-number-3">1.7</span> Reacting to worker process events</h3>
<div class="outline-text-3" id="text-1-7">
<p>
What happens if something goes wrong with our worker process? Let's try.
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">bg_worker</span><span style="color: #4f97d7;">(</span>log<span style="color: #4f97d7;">)</span>:
    <span style="color: #4f97d7; font-weight: bold;">while</span> <span style="color: #a45bad;">True</span>:
        <span style="color: #4f97d7; font-weight: bold;">with</span> ncs.maapi.single_write_trans<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">'bgworker'</span>, <span style="color: #2d9574;">'system'</span>, db=ncs.OPERATIONAL<span style="color: #4f97d7;">)</span> <span style="color: #4f97d7; font-weight: bold;">as</span> oper_trans_write:
            <span style="color: #7590db;">root</span> = ncs.maagic.get_root<span style="color: #4f97d7;">(</span>oper_trans_write<span style="color: #4f97d7;">)</span>
            <span style="color: #7590db;">cur_val</span> = root.bgworker.counter
            <span style="color: #7590db;">root.bgworker.counter</span> += <span style="color: #a45bad;">1</span>
            oper_trans_write.<span style="color: #4f97d7;">apply</span><span style="color: #4f97d7;">()</span>

        log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">"Hello from background worker process, increment counter from {} to {}"</span>.<span style="color: #4f97d7;">format</span><span style="color: #bc6ec5;">(</span>cur_val, cur_val+<span style="color: #a45bad;">1</span><span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">if</span> random.randint<span style="color: #4f97d7;">(</span><span style="color: #a45bad;">0</span>, <span style="color: #a45bad;">9</span><span style="color: #4f97d7;">)</span> == <span style="color: #a45bad;">9</span>:
            <span style="color: #4f97d7; font-weight: bold;">raise</span> <span style="color: #ce537a; font-weight: bold;">ValueError</span><span style="color: #4f97d7;">(</span><span style="color: #2d9574;">"bad dice value"</span><span style="color: #4f97d7;">)</span>
        time.sleep<span style="color: #4f97d7;">(</span><span style="color: #a45bad;">1</span><span style="color: #4f97d7;">)</span>

</pre>
</div>

<p>
so we'll throw our ten sided dice and if we hit 9 we'll throw an error which should lead to termination of the python vm in the background process.
</p>

<div class="org-src-container">
<pre class="src src-text">kll@nuc:~/ncs-4.7.4.2/ncs-run/logs$ tail -f ncs-python-vm-bgworker.log ncs-python-vm.log 
...
==&gt; ncs-python-vm-bgworker.log &lt;==
&lt;INFO&gt; 01-Jul-2019::21:21:56.770 bgworker ComponentThread:main: - Hello from background worker process, increment counter from 21804 to 21805
&lt;INFO&gt; 01-Jul-2019::21:21:57.783 bgworker ComponentThread:main: - Hello from background worker process, increment counter from 21805 to 21806
&lt;INFO&gt; 01-Jul-2019::21:21:58.788 bgworker ComponentThread:main: - Hello from background worker process, increment counter from 21806 to 21807
&lt;INFO&gt; 01-Jul-2019::21:21:59.798 bgworker ComponentThread:main: - Hello from background worker process, increment counter from 21807 to 21808
&lt;INFO&gt; 01-Jul-2019::21:22:00.807 bgworker ComponentThread:main: - Hello from background worker process, increment counter from 21808 to 21809
&lt;INFO&gt; 01-Jul-2019::21:22:01.824 bgworker ComponentThread:main: - Hello from background worker process, increment counter from 21809 to 21810
&lt;INFO&gt; 01-Jul-2019::21:22:02.841 bgworker ComponentThread:main: - Hello from background worker process, increment counter from 21810 to 21811
&lt;INFO&gt; 01-Jul-2019::21:22:03.859 bgworker ComponentThread:main: - Hello from background worker process, increment counter from 21811 to 21812
&lt;INFO&gt; 01-Jul-2019::21:22:04.873 bgworker ComponentThread:main: - Hello from background worker process, increment counter from 21812 to 21813
&lt;INFO&gt; 01-Jul-2019::21:22:05.880 bgworker ComponentThread:main: - Hello from background worker process, increment counter from 21813 to 21814
&lt;INFO&gt; 01-Jul-2019::21:22:06.898 bgworker ComponentThread:main: - Hello from background worker process, increment counter from 21814 to 21815

==&gt; ncs-python-vm.log &lt;==
&lt;INFO&gt; 1-Jul-2019::21:22:06.899 nuc ncs[11832]: bgworker :: Process Process-1:
Traceback (most recent call last):
  File "/usr/lib/python2.7/multiprocessing/process.py", line 267, in _bootstrap
&lt;INFO&gt; 1-Jul-2019::21:22:06.899 nuc ncs[11832]: bgworker ::     self.run()
  File "/usr/lib/python2.7/multiprocessing/process.py", line 114, in run
    self._target(*self._args, **self._kwargs)
  File "/home/kll/ncs-4.7.4.2/ncs-run/state/packages-in-use/1/bgworker/python/bgworker/main.py", line 19, in bg_worker
    raise ValueError("bad dice value")
ValueError: bad dice value
^C
</pre>
</div>

<p>
Lo and behold, it did. After this, nothing more happens as our process is dead. If we want the process restarted, we are going to have to do it ourselves. First, we need to monitor for liveness of the process and take action based on that&#x2026; but before we do that, let's think through some other things that might happen and which we should react to.
</p>
</div>
</div>

<div id="outline-container-orgb6c4db0" class="outline-3">
<h3 id="orgb6c4db0"><span class="section-number-3">1.8</span> Reacting to configuration events</h3>
<div class="outline-text-3" id="text-1-8">
<p>
Since you are reading this you probably haven't implemented a background worker yet so let me share some advice - add an <b>off</b> button. When you are troubleshooting your system it can be rather difficult with lots of things going on, triggered by these background workers. Having multiple background workers both of different type and multiple instances of the same type exacerbate the issue. With an off button we can easily turn them off and troubleshoot the interesting parts. It might seem crude, and I think it is, but in lack of better instrumentation in NCS, it is the best we have.
</p>

<p>
The most intuitive way of doing this, and the way I've done it so far, is to simply add some configuration that controls whether the background worker is enabled or not. Going back to our YANG model, we add an <code>enabled</code> leaf to control if the worker is enabled or not.
</p>

<div class="org-src-container">
<pre class="src src-yang"><span style="color: #4f97d7; font-weight: bold;">module</span> <span style="color: #ce537a; font-weight: bold;">bgworker</span> <span style="color: #4f97d7;">{</span>

  <span style="color: #4f97d7; font-weight: bold;">namespace</span> <span style="color: #2d9574;">"http://example.com/bgworker"</span>;
  <span style="color: #4f97d7; font-weight: bold;">prefix</span> <span style="color: #ce537a; font-weight: bold;">bgworker</span>;

  <span style="color: #4f97d7; font-weight: bold;">container</span> <span style="color: #ce537a; font-weight: bold;">bgworker</span> <span style="color: #bc6ec5;">{</span>
    <span style="color: #4f97d7; font-weight: bold;">leaf</span> <span style="color: #ce537a; font-weight: bold;">enabled</span> <span style="color: #2d9574;">{</span>
      <span style="color: #4f97d7; font-weight: bold;">type</span> <span style="color: #ce537a; font-weight: bold;">boolean</span>;
      <span style="color: #4f97d7; font-weight: bold;">default</span> <span style="color: #a45bad;">true</span>;
    <span style="color: #2d9574;">}</span>

    <span style="color: #4f97d7; font-weight: bold;">leaf</span> <span style="color: #ce537a; font-weight: bold;">counter</span> <span style="color: #2d9574;">{</span>
      <span style="color: #4f97d7; font-weight: bold;">config</span> <span style="color: #a45bad;">false</span>;
      <span style="color: #4f97d7; font-weight: bold;">type</span> <span style="color: #ce537a; font-weight: bold;">uint32</span>;
      <span style="color: #4f97d7; font-weight: bold;">default</span> <span style="color: #a45bad;">0</span>;
    <span style="color: #2d9574;">}</span>
  <span style="color: #bc6ec5;">}</span>
<span style="color: #4f97d7;">}</span>
</pre>
</div>
</div>
</div>

<div id="outline-container-org4e43f6e" class="outline-3">
<h3 id="org4e43f6e"><span class="section-number-3">1.9</span> Reacting to HA events</h3>
<div class="outline-text-3" id="text-1-9">
<p>
Finally, we have to react to High Availability (HA) events. Depending on which type of worker we are implementing we might want different behaviour. I've so far only had to deal with background workers that write configuration and since that can only be done on the master of a HA system, our background worker should only run on the master node. If you on the other hand are operating on some other data or perhaps not writing anything to CDB, it is possible to still run the worker on all nodes.
</p>

<p>
Assuming you only want to run on the HA master we have to determine;
</p>
<ul class="org-ul">
<li>if HA is enabled</li>
<li>what the HA mode is</li>
</ul>

<p>
Getting HA mode is quite simple, it's available from <code>/ncs:ncs-state/ha/mode</code>.
</p>

<p>
I wrote this simple decision table for the behaviour we are looking for:
</p>

<table>


<colgroup>
<col  class="org-left">

<col  class="org-left">

<col  class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">HA enabled</th>
<th scope="col" class="org-left">mode</th>
<th scope="col" class="org-left">run worker?</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">enabled</td>
<td class="org-left">master</td>
<td class="org-left">true</td>
</tr>

<tr>
<td class="org-left">enabled</td>
<td class="org-left">slave</td>
<td class="org-left">false</td>
</tr>

<tr>
<td class="org-left">enabled</td>
<td class="org-left">none</td>
<td class="org-left">false</td>
</tr>

<tr>
<td class="org-left">disabled</td>
<td class="org-left">none</td>
<td class="org-left">true</td>
</tr>
</tbody>
</table>

<p>
The sort of tricky thing is that when we are in mode <code>none</code> we should either run or not depending on if the whole HA functionality is enabled or not, which means we need to look at both. <code>/ncs:ncs-state/ha</code> is a presence container and is only present when HA is enabled, thus allowing us to determine if HA is enabled or not.
</p>

<p>
Another problem around HA event monitoring is that the <code>/ncs:ncs-state/ha</code> path isn't in CDB oper as one might have thought, it is actually data provider (DP) backed meaning that we can't use the CDB subscriber design pattern to listen to events. Instead there is a new API that was introduced with NCS 4.7.3 that allows us to subscribe to various events. I'm not sure how I feel about this because one of the strengths of NCS was the YANG modeled nature of everything and that's been effectively abandoned here in benefit of some other interfaces. I've written code that repetitively reads from the <code>/ncs:ncs-state/ha</code> path but as it turns out, it's not very fast, probably due to the DP simply not being very fast. We should avoid hammering this path with reads and instead try to subscribe to changes.
</p>
</div>
</div>

<div id="outline-container-org18cb06a" class="outline-3">
<h3 id="org18cb06a"><span class="section-number-3">1.10</span> Rube Goldberg</h3>
<div class="outline-text-3" id="text-1-10">
<p>
Okay, so we've gathered all our requirements and are ready to write, as we will see, the Rube Goldberg of NSO background worker process frameworks!
</p>

<p>
To sum up, we want:
</p>
<ul class="org-ul">
<li>react to NCS package events (redeploy primarily)</li>
<li>react to the background worker dying (supervisor style)</li>
<li>react to changes of the configuration for our background worker (enabled or not)</li>
<li>react to HA events</li>
</ul>

<p>
The basic challenge is that we have multiple different data sources we want to read and monitor but they come in different shape and form. For example, we can write some code that listens for HA events:
</p>

<div class="org-src-container">
<pre class="src src-python"><span style="color: #7590db;">mask</span> = events.NOTIF_HA_INFO
<span style="color: #7590db;">event_socket</span> = socket.socket<span style="color: #4f97d7;">()</span>
events.notifications_connect<span style="color: #4f97d7;">(</span>event_socket, mask, ip=<span style="color: #2d9574;">'127.0.0.1'</span>, port=ncs.NCS_PORT<span style="color: #4f97d7;">)</span>
<span style="color: #4f97d7; font-weight: bold;">while</span> <span style="color: #4f97d7; font-weight: bold;">not</span> <span style="color: #4f97d7; font-weight: bold;">self</span>._exit_flag.wait<span style="color: #4f97d7;">(</span>timeout=<span style="color: #a45bad;">1</span><span style="color: #4f97d7;">)</span>:
    <span style="color: #7590db;">notification</span> = events.read_notification<span style="color: #4f97d7;">(</span>event_socket<span style="color: #4f97d7;">)</span>
</pre>
</div>

<p>
The standard way of monitoring say multiple sockets would be by using a select loop, but then everything has to be a socket. While the HA event socket is, the CDB subscriber is not nor is the main queue we use to to signal events. Instead we end up in some form of loop where we need to run various read or wait calls on the things we want to monitor. If we do that using non-blocking calls on all the things it means we will busy loop, which is bad due to CPU usage. If we do blocking calls with a timeout on at least one item, then it means we are blocking on item X while an event could come in on item Y. Maybe the sleep isn't long enough to make it a real problem but it's not an elegant solution and means we are bound to always (statistically) wait for some time before reacting to events.
</p>

<p>
We'll solve all this by defining multiple cooperating pieces:
</p>
<ul class="org-ul">
<li>a worker that is running as its own UNIX process through the multiprocessing library</li>
<li>a supervisor thread that starts and stop the worker process
<ul class="org-ul">
<li>the supervisor has a queue over which it receives events from other components</li>
<li>it also monitors the process itself merely checking if the worker process is alive and restarts it if not</li>
</ul></li>
<li>a CDB subscriber for monitoring the configuration of the background worker (if it's enabled or not) and puts these as messages on the supervisor queue</li>
<li>a HA event listener thread that subscribes to HA mode changes and notifies the supervisor through the supervisor queue</li>
</ul>

<p>
It's only the worker process that is an actual UNIX process as I believe we can write all the other components in a way that allows them to exit in a guaranteed time.
</p>

<p>
The final code (don't actually use this - as it turns out later, there are multiple bugs in this):
</p>
<div class="org-src-container">
<pre class="src src-python"><span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">-*- mode: python; python-indent: 4 -*-</span>
<span style="color: #9f8766;">"""A micro-framework for running background processes in Cisco NSO Python VM.</span>

<span style="color: #9f8766;">Running any kind of background workers in Cisco NSO can be rather tricky. This</span>
<span style="color: #9f8766;">will help you out! Just define a function that does what you want and create a</span>
<span style="color: #9f8766;">Process instance to run it!</span>

<span style="color: #9f8766;">We react to:</span>
<span style="color: #9f8766;"> - background worker process dying (will restart it)</span>
<span style="color: #9f8766;"> - NCS package events, like redeploy</span>
<span style="color: #9f8766;"> - configuration changes (disable the background worker)</span>
<span style="color: #9f8766;"> - HA events (if we are a slave)</span>
<span style="color: #9f8766;">"""</span>
<span style="color: #4f97d7; font-weight: bold;">import</span> multiprocessing
<span style="color: #4f97d7; font-weight: bold;">import</span> os
<span style="color: #4f97d7; font-weight: bold;">import</span> select
<span style="color: #4f97d7; font-weight: bold;">import</span> socket
<span style="color: #4f97d7; font-weight: bold;">import</span> threading

<span style="color: #4f97d7; font-weight: bold;">import</span> ncs
<span style="color: #4f97d7; font-weight: bold;">from</span> ncs.experimental <span style="color: #4f97d7; font-weight: bold;">import</span> Subscriber
<span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">queue module is called Queue in py2, we import with py3 name since the</span>
<span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">exposed interface is similar enough</span>
<span style="color: #4f97d7; font-weight: bold;">try</span>:
    <span style="color: #4f97d7; font-weight: bold;">import</span> queue
<span style="color: #4f97d7; font-weight: bold;">except</span> <span style="color: #ce537a; font-weight: bold;">ImportError</span>:
    <span style="color: #4f97d7; font-weight: bold;">import</span> Queue <span style="color: #4f97d7; font-weight: bold;">as</span> queue

<span style="color: #4f97d7; font-weight: bold;">class</span> <span style="color: #ce537a; font-weight: bold;">Process</span><span style="color: #4f97d7;">(</span>threading.Thread<span style="color: #4f97d7;">)</span>:
    <span style="color: #9f8766;">"""Supervisor for running the main background process and reacting to</span>
<span style="color: #9f8766;">    various events</span>
<span style="color: #9f8766;">    """</span>
    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">__init__</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>, app, bg_fun, bg_fun_args=<span style="color: #a45bad;">None</span>, config_path=<span style="color: #a45bad;">None</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7;">super</span><span style="color: #4f97d7;">(</span>Process, <span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>.__init__<span style="color: #4f97d7;">()</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.app = app
        <span style="color: #4f97d7; font-weight: bold;">self</span>.bg_fun = bg_fun
        <span style="color: #4f97d7; font-weight: bold;">if</span> bg_fun_args <span style="color: #4f97d7; font-weight: bold;">is</span> <span style="color: #a45bad;">None</span>:
            <span style="color: #7590db;">bg_fun_args</span> = <span style="color: #4f97d7;">[]</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.bg_fun_args = bg_fun_args
        <span style="color: #4f97d7; font-weight: bold;">self</span>.config_path = config_path

        <span style="color: #4f97d7; font-weight: bold;">self</span>.log = app.log
        <span style="color: #4f97d7; font-weight: bold;">self</span>.name = <span style="color: #2d9574;">"{}.{}"</span>.<span style="color: #4f97d7;">format</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>.app.__class__.__module__,
                                   <span style="color: #4f97d7; font-weight: bold;">self</span>.app.__class__.<span style="color: #4f97d7;">__name__</span><span style="color: #4f97d7;">)</span>

        <span style="color: #4f97d7; font-weight: bold;">self</span>.log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">"{} supervisor starting"</span>.<span style="color: #4f97d7;">format</span><span style="color: #bc6ec5;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>.name<span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.q = multiprocessing.Queue<span style="color: #4f97d7;">()</span>

        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">start the config subscriber thread</span>
        <span style="color: #4f97d7; font-weight: bold;">if</span> <span style="color: #4f97d7; font-weight: bold;">self</span>.config_path <span style="color: #4f97d7; font-weight: bold;">is</span> <span style="color: #4f97d7; font-weight: bold;">not</span> <span style="color: #a45bad;">None</span>:
            <span style="color: #4f97d7; font-weight: bold;">self</span>.config_subscriber = Subscriber<span style="color: #4f97d7;">(</span>app=<span style="color: #4f97d7; font-weight: bold;">self</span>.app, log=<span style="color: #4f97d7; font-weight: bold;">self</span>.log<span style="color: #4f97d7;">)</span>
            <span style="color: #7590db;">subscriber_iter</span> = ConfigSubscriber<span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>.q, <span style="color: #4f97d7; font-weight: bold;">self</span>.config_path<span style="color: #4f97d7;">)</span>
            subscriber_iter.register<span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>.config_subscriber<span style="color: #4f97d7;">)</span>
            <span style="color: #4f97d7; font-weight: bold;">self</span>.config_subscriber.start<span style="color: #4f97d7;">()</span>

        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">start the HA event listener thread</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.ha_event_listener = HaEventListener<span style="color: #4f97d7;">(</span>app=<span style="color: #4f97d7; font-weight: bold;">self</span>.app, q=<span style="color: #4f97d7; font-weight: bold;">self</span>.q<span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.ha_event_listener.start<span style="color: #4f97d7;">()</span>

        <span style="color: #4f97d7; font-weight: bold;">self</span>.worker = <span style="color: #a45bad;">None</span>

        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">Read initial configuration, using two separate transactions</span>
        <span style="color: #4f97d7; font-weight: bold;">with</span> ncs.maapi.Maapi<span style="color: #4f97d7;">()</span> <span style="color: #4f97d7; font-weight: bold;">as</span> m:
            <span style="color: #4f97d7; font-weight: bold;">with</span> ncs.maapi.Session<span style="color: #4f97d7;">(</span>m, <span style="color: #2d9574;">'{}_supervisor'</span>.<span style="color: #4f97d7;">format</span><span style="color: #bc6ec5;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>.name<span style="color: #bc6ec5;">)</span>, <span style="color: #2d9574;">'system'</span><span style="color: #4f97d7;">)</span>:
                <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">in the 1st transaction read config data from the 'enabled' leaf</span>
                <span style="color: #4f97d7; font-weight: bold;">with</span> m.start_read_trans<span style="color: #4f97d7;">()</span> <span style="color: #4f97d7; font-weight: bold;">as</span> t_read:
                    <span style="color: #4f97d7; font-weight: bold;">if</span> config_path <span style="color: #4f97d7; font-weight: bold;">is</span> <span style="color: #4f97d7; font-weight: bold;">not</span> <span style="color: #a45bad;">None</span>:
                        <span style="color: #7590db;">enabled</span> = t_read.get_elem<span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>.config_path<span style="color: #4f97d7;">)</span>
                        <span style="color: #4f97d7; font-weight: bold;">self</span>.config_enabled = <span style="color: #4f97d7;">bool</span><span style="color: #4f97d7;">(</span>enabled<span style="color: #4f97d7;">)</span>
                    <span style="color: #4f97d7; font-weight: bold;">else</span>:
                        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">if there is no config_path we assume the process is always enabled</span>
                        <span style="color: #4f97d7; font-weight: bold;">self</span>.config_enabled = <span style="color: #a45bad;">True</span>

                <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">In the 2nd transaction read operational data regarding HA.</span>
                <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">This is an expensive operation invoking a data provider, thus</span>
                <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">we don't want to incur any unnecessary locks</span>
                <span style="color: #4f97d7; font-weight: bold;">with</span> m.start_read_trans<span style="color: #4f97d7;">(</span>db=ncs.OPERATIONAL<span style="color: #4f97d7;">)</span> <span style="color: #4f97d7; font-weight: bold;">as</span> oper_t_read:
                    <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">check if HA is enabled</span>
                    <span style="color: #4f97d7; font-weight: bold;">if</span> oper_t_read.exists<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">"/tfnm:ncs-state/tfnm:ha"</span><span style="color: #4f97d7;">)</span>:
                        <span style="color: #4f97d7; font-weight: bold;">self</span>.ha_enabled = <span style="color: #a45bad;">True</span>
                    <span style="color: #4f97d7; font-weight: bold;">else</span>:
                        <span style="color: #4f97d7; font-weight: bold;">self</span>.ha_enabled = <span style="color: #a45bad;">False</span>

                    <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">determine HA state if HA is enabled</span>
                    <span style="color: #4f97d7; font-weight: bold;">if</span> <span style="color: #4f97d7; font-weight: bold;">self</span>.ha_enabled:
                        <span style="color: #7590db;">ha_mode</span> = <span style="color: #4f97d7;">str</span><span style="color: #4f97d7;">(</span>ncs.maagic.get_node<span style="color: #bc6ec5;">(</span>oper_t_read, <span style="color: #2d9574;">'/tfnm:ncs-state/tfnm:ha/tfnm:mode'</span><span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>
                        <span style="color: #4f97d7; font-weight: bold;">self</span>.ha_master = <span style="color: #4f97d7;">(</span>ha_mode == <span style="color: #2d9574;">'master'</span><span style="color: #4f97d7;">)</span>


    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">run</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">self</span>.app.add_running_thread<span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>.name + <span style="color: #2d9574;">' (Supervisor)'</span><span style="color: #4f97d7;">)</span>

        <span style="color: #4f97d7; font-weight: bold;">while</span> <span style="color: #a45bad;">True</span>:
            <span style="color: #7590db;">should_run</span> = <span style="color: #4f97d7; font-weight: bold;">self</span>.config_enabled <span style="color: #4f97d7; font-weight: bold;">and</span> <span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">not</span> <span style="color: #4f97d7; font-weight: bold;">self</span>.ha_enabled <span style="color: #4f97d7; font-weight: bold;">or</span> <span style="color: #4f97d7; font-weight: bold;">self</span>.ha_master<span style="color: #4f97d7;">)</span>

            <span style="color: #4f97d7; font-weight: bold;">if</span> should_run <span style="color: #4f97d7; font-weight: bold;">and</span> <span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>.worker <span style="color: #4f97d7; font-weight: bold;">is</span> <span style="color: #a45bad;">None</span> <span style="color: #4f97d7; font-weight: bold;">or</span> <span style="color: #4f97d7; font-weight: bold;">not</span> <span style="color: #4f97d7; font-weight: bold;">self</span>.worker.is_alive<span style="color: #bc6ec5;">()</span><span style="color: #4f97d7;">)</span>:
                <span style="color: #4f97d7; font-weight: bold;">self</span>.log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">"Background worker process should run but is not running, starting"</span><span style="color: #4f97d7;">)</span>
                <span style="color: #4f97d7; font-weight: bold;">if</span> <span style="color: #4f97d7; font-weight: bold;">self</span>.worker <span style="color: #4f97d7; font-weight: bold;">is</span> <span style="color: #4f97d7; font-weight: bold;">not</span> <span style="color: #a45bad;">None</span>:
                    <span style="color: #4f97d7; font-weight: bold;">self</span>.worker_stop<span style="color: #4f97d7;">()</span>
                <span style="color: #4f97d7; font-weight: bold;">self</span>.worker_start<span style="color: #4f97d7;">()</span>
            <span style="color: #4f97d7; font-weight: bold;">if</span> <span style="color: #4f97d7; font-weight: bold;">self</span>.worker <span style="color: #4f97d7; font-weight: bold;">is</span> <span style="color: #4f97d7; font-weight: bold;">not</span> <span style="color: #a45bad;">None</span> <span style="color: #4f97d7; font-weight: bold;">and</span> <span style="color: #4f97d7; font-weight: bold;">self</span>.worker.is_alive<span style="color: #4f97d7;">()</span> <span style="color: #4f97d7; font-weight: bold;">and</span> <span style="color: #4f97d7; font-weight: bold;">not</span> should_run:
                <span style="color: #4f97d7; font-weight: bold;">self</span>.log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">"Background worker process is running but should not run, stopping"</span><span style="color: #4f97d7;">)</span>
                <span style="color: #4f97d7; font-weight: bold;">self</span>.worker_stop<span style="color: #4f97d7;">()</span>

            <span style="color: #4f97d7; font-weight: bold;">try</span>:
                <span style="color: #7590db;">item</span> = <span style="color: #4f97d7; font-weight: bold;">self</span>.q.get<span style="color: #4f97d7;">(</span>timeout=<span style="color: #a45bad;">1</span><span style="color: #4f97d7;">)</span>
            <span style="color: #4f97d7; font-weight: bold;">except</span> queue.Empty:
                <span style="color: #4f97d7; font-weight: bold;">continue</span>

            <span style="color: #7590db;">k</span>, <span style="color: #7590db;">v</span> = item
            <span style="color: #4f97d7; font-weight: bold;">if</span> k == <span style="color: #2d9574;">'exit'</span>:
                <span style="color: #4f97d7; font-weight: bold;">return</span>
            <span style="color: #4f97d7; font-weight: bold;">elif</span> k == <span style="color: #2d9574;">'enabled'</span>:
                <span style="color: #4f97d7; font-weight: bold;">self</span>.config_enabled = v


    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">stop</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #9f8766;">"""stop is called when the supervisor thread should stop and is part of</span>
<span style="color: #9f8766;">        the standard Python interface for threading.Thread</span>
<span style="color: #9f8766;">        """</span>
        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">stop the HA event listener</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.ha_event_listener.stop<span style="color: #4f97d7;">()</span>

        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">stop CDB subscriber</span>
        <span style="color: #4f97d7; font-weight: bold;">if</span> <span style="color: #4f97d7; font-weight: bold;">self</span>.config_path <span style="color: #4f97d7; font-weight: bold;">is</span> <span style="color: #4f97d7; font-weight: bold;">not</span> <span style="color: #a45bad;">None</span>:
            <span style="color: #4f97d7; font-weight: bold;">self</span>.config_subscriber.stop<span style="color: #4f97d7;">()</span>

        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">stop us, the supervisor</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.q.put<span style="color: #4f97d7;">(</span><span style="color: #bc6ec5;">(</span><span style="color: #2d9574;">'exit'</span>, <span style="color: #a45bad;">None</span><span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.join<span style="color: #4f97d7;">()</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.app.del_running_thread<span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>.name + <span style="color: #2d9574;">' (Supervisor)'</span><span style="color: #4f97d7;">)</span>

        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">stop the background worker process</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.worker_stop<span style="color: #4f97d7;">()</span>


    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">worker_start</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #9f8766;">"""Starts the background worker process</span>
<span style="color: #9f8766;">        """</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">"{}: starting the background worker process"</span>.<span style="color: #4f97d7;">format</span><span style="color: #bc6ec5;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>.name<span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>
        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">Instead of using the usual worker thread, we use a separate process here.</span>
        <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">This allows us to terminate the process on package reload / NSO shutdown.</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.worker = multiprocessing.Process<span style="color: #4f97d7;">(</span>target=<span style="color: #4f97d7; font-weight: bold;">self</span>.bg_fun, args=<span style="color: #4f97d7; font-weight: bold;">self</span>.bg_fun_args<span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.worker.start<span style="color: #4f97d7;">()</span>


    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">worker_stop</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #9f8766;">"""Stops the background worker process</span>
<span style="color: #9f8766;">        """</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">"{}: stopping the background worker process"</span>.<span style="color: #4f97d7;">format</span><span style="color: #bc6ec5;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>.name<span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.worker.terminate<span style="color: #4f97d7;">()</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.worker.join<span style="color: #4f97d7;">(</span>timeout=<span style="color: #a45bad;">1</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">if</span> <span style="color: #4f97d7; font-weight: bold;">self</span>.worker.is_alive<span style="color: #4f97d7;">()</span>:
            <span style="color: #4f97d7; font-weight: bold;">self</span>.log.error<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">"{}: worker not terminated on time, alive: {}  process: {}"</span>.<span style="color: #4f97d7;">format</span><span style="color: #bc6ec5;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>, <span style="color: #4f97d7; font-weight: bold;">self</span>.worker.is_alive<span style="color: #2d9574;">()</span>, <span style="color: #4f97d7; font-weight: bold;">self</span>.worker<span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>



<span style="color: #4f97d7; font-weight: bold;">class</span> <span style="color: #ce537a; font-weight: bold;">ConfigSubscriber</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7;">object</span><span style="color: #4f97d7;">)</span>:
    <span style="color: #9f8766;">"""CDB subscriber for background worker process</span>

<span style="color: #9f8766;">    It is assumed that there is an 'enabled' leaf that controls whether a</span>
<span style="color: #9f8766;">    background worker process should be enabled or disabled. Given the path to</span>
<span style="color: #9f8766;">    that leaf, this subscriber can monitor it and send any changes to the</span>
<span style="color: #9f8766;">    supervisor which in turn starts or stops the background worker process.</span>

<span style="color: #9f8766;">    The enabled leaf has to be a boolean where true means the background worker</span>
<span style="color: #9f8766;">    process is enabled and should run.</span>
<span style="color: #9f8766;">    """</span>
    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">__init__</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>, q, config_path<span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">self</span>.q = q
        <span style="color: #4f97d7; font-weight: bold;">self</span>.config_path = config_path

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">register</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>, subscriber<span style="color: #4f97d7;">)</span>:
        subscriber.register<span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>.config_path, priority=<span style="color: #a45bad;">101</span>, iter_obj=<span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">pre_iterate</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">return</span> <span style="color: #4f97d7;">{</span><span style="color: #2d9574;">'enabled'</span>: <span style="color: #a45bad;">False</span><span style="color: #4f97d7;">}</span>

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">iterate</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>, keypath_unused, operation_unused, oldval_unused, newval, state<span style="color: #4f97d7;">)</span>:
        <span style="color: #7590db;">state</span><span style="color: #4f97d7;">[</span><span style="color: #2d9574;">'enabled'</span><span style="color: #4f97d7;">]</span> = newval
        <span style="color: #4f97d7; font-weight: bold;">return</span> ncs.ITER_RECURSE

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">should_post_iterate</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>, state_unused<span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">return</span> <span style="color: #a45bad;">True</span>

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">post_iterate</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>, state<span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">self</span>.q.put<span style="color: #4f97d7;">(</span><span style="color: #bc6ec5;">(</span><span style="color: #2d9574;">"enabled"</span>, <span style="color: #4f97d7;">bool</span><span style="color: #2d9574;">(</span>state<span style="color: #67b11d;">[</span><span style="color: #2d9574;">'enabled'</span><span style="color: #67b11d;">]</span><span style="color: #2d9574;">)</span><span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>


<span style="color: #4f97d7; font-weight: bold;">class</span> <span style="color: #ce537a; font-weight: bold;">HaEventListener</span><span style="color: #4f97d7;">(</span>threading.Thread<span style="color: #4f97d7;">)</span>:
    <span style="color: #9f8766;">"""HA Event Listener</span>
<span style="color: #9f8766;">    HA events, like HA-mode transitions, are exposed over a notification API.</span>
<span style="color: #9f8766;">    We listen on that and forward relevant messages over the queue to the</span>
<span style="color: #9f8766;">    supervisor which can act accordingly.</span>

<span style="color: #9f8766;">    We use a WaitableEvent rather than a threading.Event since the former</span>
<span style="color: #9f8766;">    allows us to wait on it using a select loop. The HA events are received</span>
<span style="color: #9f8766;">    over a socket which can also be waited upon using a select loop, thus</span>
<span style="color: #9f8766;">    making it possible to wait for the two inputs we have using a single select</span>
<span style="color: #9f8766;">    loop.</span>
<span style="color: #9f8766;">    """</span>
    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">__init__</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>, app, q<span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7;">super</span><span style="color: #4f97d7;">(</span>HaEventListener, <span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>.__init__<span style="color: #4f97d7;">()</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.app = app
        <span style="color: #4f97d7; font-weight: bold;">self</span>.log = app.log
        <span style="color: #4f97d7; font-weight: bold;">self</span>.q = q
        <span style="color: #4f97d7; font-weight: bold;">self</span>.log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">'{} supervisor: init'</span>.<span style="color: #4f97d7;">format</span><span style="color: #bc6ec5;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.exit_flag = WaitableEvent<span style="color: #4f97d7;">()</span>

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">run</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">self</span>.app.add_running_thread<span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>.__class__.<span style="color: #4f97d7;">__name__</span> + <span style="color: #2d9574;">' (HA event listener)'</span><span style="color: #4f97d7;">)</span>

        <span style="color: #4f97d7; font-weight: bold;">self</span>.log.info<span style="color: #4f97d7;">(</span><span style="color: #2d9574;">'run() HA event listener'</span><span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">from</span> _ncs <span style="color: #4f97d7; font-weight: bold;">import</span> events
        <span style="color: #7590db;">mask</span> = events.NOTIF_HA_INFO
        <span style="color: #7590db;">event_socket</span> = socket.socket<span style="color: #4f97d7;">()</span>
        events.notifications_connect<span style="color: #4f97d7;">(</span>event_socket, mask, ip=<span style="color: #2d9574;">'127.0.0.1'</span>, port=ncs.NCS_PORT<span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">while</span> <span style="color: #a45bad;">True</span>:
            <span style="color: #7590db;">rl</span>, <span style="color: #7590db;">_</span>, <span style="color: #7590db;">_</span> = select.select<span style="color: #4f97d7;">(</span><span style="color: #bc6ec5;">[</span><span style="color: #4f97d7; font-weight: bold;">self</span>.exit_flag, event_socket<span style="color: #bc6ec5;">]</span>, <span style="color: #bc6ec5;">[]</span>, <span style="color: #bc6ec5;">[]</span><span style="color: #4f97d7;">)</span>
            <span style="color: #4f97d7; font-weight: bold;">if</span> <span style="color: #4f97d7; font-weight: bold;">self</span>.exit_flag <span style="color: #4f97d7; font-weight: bold;">in</span> rl:
                event_socket.close<span style="color: #4f97d7;">()</span>
                <span style="color: #4f97d7; font-weight: bold;">return</span>

            <span style="color: #7590db;">notification</span> = events.read_notification<span style="color: #4f97d7;">(</span>event_socket<span style="color: #4f97d7;">)</span>
            <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">Can this fail? Could we get a KeyError here? Afraid to catch it</span>
            <span style="color: #2aa1ae; background-color: #292e34;"># </span><span style="color: #2aa1ae; background-color: #292e34;">because I don't know what it could mean.</span>
            <span style="color: #7590db;">ha_notif_type</span> = notification<span style="color: #4f97d7;">[</span><span style="color: #2d9574;">'hnot'</span><span style="color: #4f97d7;">][</span><span style="color: #2d9574;">'type'</span><span style="color: #4f97d7;">]</span>

            <span style="color: #4f97d7; font-weight: bold;">if</span> ha_notif_type == events.HA_INFO_IS_MASTER:
                <span style="color: #4f97d7; font-weight: bold;">self</span>.q.put<span style="color: #4f97d7;">(</span><span style="color: #bc6ec5;">(</span><span style="color: #2d9574;">'ha-mode'</span>, <span style="color: #2d9574;">'master'</span><span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>
            <span style="color: #4f97d7; font-weight: bold;">elif</span> ha_notif_type == events.HA_INFO_IS_NONE:
                <span style="color: #4f97d7; font-weight: bold;">self</span>.q.put<span style="color: #4f97d7;">(</span><span style="color: #bc6ec5;">(</span><span style="color: #2d9574;">'ha-mode'</span>, <span style="color: #2d9574;">'none'</span><span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">stop</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">self</span>.exit_flag.<span style="color: #4f97d7;">set</span><span style="color: #4f97d7;">()</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.join<span style="color: #4f97d7;">()</span>
        <span style="color: #4f97d7; font-weight: bold;">self</span>.app.del_running_thread<span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>.__class__.<span style="color: #4f97d7;">__name__</span> + <span style="color: #2d9574;">' (HA event listener)'</span><span style="color: #4f97d7;">)</span>


<span style="color: #4f97d7; font-weight: bold;">class</span> <span style="color: #ce537a; font-weight: bold;">WaitableEvent</span>:
    <span style="color: #9f8766;">"""Provides an abstract object that can be used to resume select loops with</span>
<span style="color: #9f8766;">    indefinite waits from another thread or process. This mimics the standard</span>
<span style="color: #9f8766;">    threading.Event interface."""</span>
    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">__init__</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">self</span>._read_fd, <span style="color: #4f97d7; font-weight: bold;">self</span>._write_fd = os.pipe<span style="color: #4f97d7;">()</span>

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">wait</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>, timeout=<span style="color: #a45bad;">None</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #7590db;">rfds</span>, <span style="color: #7590db;">_</span>, <span style="color: #7590db;">_</span> = select.select<span style="color: #4f97d7;">(</span><span style="color: #bc6ec5;">[</span><span style="color: #4f97d7; font-weight: bold;">self</span>._read_fd<span style="color: #bc6ec5;">]</span>, <span style="color: #bc6ec5;">[]</span>, <span style="color: #bc6ec5;">[]</span>, timeout<span style="color: #4f97d7;">)</span>
        <span style="color: #4f97d7; font-weight: bold;">return</span> <span style="color: #4f97d7; font-weight: bold;">self</span>._read_fd <span style="color: #4f97d7; font-weight: bold;">in</span> rfds

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">is_set</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">return</span> <span style="color: #4f97d7; font-weight: bold;">self</span>.wait<span style="color: #4f97d7;">(</span><span style="color: #a45bad;">0</span><span style="color: #4f97d7;">)</span>

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">isSet</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">return</span> <span style="color: #4f97d7; font-weight: bold;">self</span>.wait<span style="color: #4f97d7;">(</span><span style="color: #a45bad;">0</span><span style="color: #4f97d7;">)</span>

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">clear</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">if</span> <span style="color: #4f97d7; font-weight: bold;">self</span>.isSet<span style="color: #4f97d7;">()</span>:
            os.read<span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>._read_fd, <span style="color: #a45bad;">1</span><span style="color: #4f97d7;">)</span>

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">set</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #4f97d7; font-weight: bold;">if</span> <span style="color: #4f97d7; font-weight: bold;">not</span> <span style="color: #4f97d7; font-weight: bold;">self</span>.isSet<span style="color: #4f97d7;">()</span>:
            os.write<span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>._write_fd, b<span style="color: #2d9574;">'1'</span><span style="color: #4f97d7;">)</span>

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">fileno</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        <span style="color: #9f8766;">"""Return the FD number of the read side of the pipe, allows this</span>
<span style="color: #9f8766;">        object to be used with select.select()</span>
<span style="color: #9f8766;">        """</span>
        <span style="color: #4f97d7; font-weight: bold;">return</span> <span style="color: #4f97d7; font-weight: bold;">self</span>._read_fd

    <span style="color: #4f97d7; font-weight: bold;">def</span> <span style="color: #bc6ec5; font-weight: bold;">__del__</span><span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span><span style="color: #4f97d7;">)</span>:
        os.close<span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>._read_fd<span style="color: #4f97d7;">)</span>
        os.close<span style="color: #4f97d7;">(</span><span style="color: #4f97d7; font-weight: bold;">self</span>._write_fd<span style="color: #4f97d7;">)</span>
</pre>
</div>

<p>
(Do not use the above code, as I later found out, it has bugs and has been further improved, but more on that in the next post).
</p>

<p>
It's rather elaborate, a little Rube Goldbergian, but I think it offers some rather nice properties in the end. The promises of reacting to NCS package reload / redeploy is upheld and we can quickly and efficiently react to HA and reconfiguration events.
</p>

<p>
I called that our final version of the code, which turns out to not hold true. As a consequence of our new design we end up using threads, multiprocessing (which forks) and the standard logging library. The three of them together leads to a intricate situation which can leave the child process hanging. This must of course be solved, but that's for <a href="./2019-07-26-writing-a-background-worker-for-cisco-nso-part-deux.html">part two</a>.
</p>
</div>
</div>
</div>
<div class="taglist"><a href="tags.html">Tags</a>: <a href="tag-nso.html">NSO</a> </div>]]></description>
  <category>NSO</category>
  <link>https://plajjan.github.io/2019-07-25-writing-a-background-worker-for-cisco-nso.html</link>
  <pubDate>Thu, 25 Jul 2019 00:00:00 +0200</pubDate>
</item>
<item>
  <title>Simple data validation with YANG using yanglint</title>
  <description><![CDATA[
<p>
I've shown in the past how I used pyang and yang2dsdl to validate XML instance data against a YANG model. It's not the best user experience though; it'd be better with an integrated tool not exposing things like DSDL and something that provides better error message. Enter yanglint!
</p>

<p>
yanglint comes as a part of libyang. Install libyang and you'll get yanglint.
</p>

<p>
Operation of it is rather simple, I'll show it using the same example I used when showing yang2dsdl.
</p>

<p>
The YANG module tubecats.yang:
</p>

<div class="org-src-container">
<pre class="src src-yang"><span style="color: #4f97d7; font-weight: bold;">module</span> <span style="color: #ce537a; font-weight: bold;">tubecats</span> <span style="color: #4f97d7;">{</span>
    <span style="color: #4f97d7; font-weight: bold;">namespace</span> <span style="color: #2d9574;">"http://plajjan.github.io/ns/yang/tubecats"</span>;
    <span style="color: #4f97d7; font-weight: bold;">prefix</span> <span style="color: #ce537a; font-weight: bold;">tc</span>;

    <span style="color: #4f97d7; font-weight: bold;">revision</span> <span style="color: #a45bad;">2017-03-15</span> <span style="color: #bc6ec5;">{</span>
        <span style="color: #4f97d7; font-weight: bold;">description</span> <span style="color: #2d9574;">"First and only version"</span>;
    <span style="color: #bc6ec5;">}</span>

    <span style="color: #4f97d7; font-weight: bold;">container</span> <span style="color: #ce537a; font-weight: bold;">internet</span> <span style="color: #bc6ec5;">{</span>
        <span style="color: #4f97d7; font-weight: bold;">list</span> <span style="color: #ce537a; font-weight: bold;">cat</span> <span style="color: #2d9574;">{</span>
            <span style="color: #4f97d7; font-weight: bold;">key</span> <span style="color: #ce537a; font-weight: bold;">name</span>;
            <span style="color: #4f97d7; font-weight: bold;">leaf</span> <span style="color: #ce537a; font-weight: bold;">name</span> <span style="color: #67b11d;">{</span>
                <span style="color: #4f97d7; font-weight: bold;">type</span> <span style="color: #ce537a; font-weight: bold;">string</span>;
            <span style="color: #67b11d;">}</span>
        <span style="color: #2d9574;">}</span>
    <span style="color: #bc6ec5;">}</span>
<span style="color: #4f97d7;">}</span>
</pre>
</div>

<p>
Some instance data, which is supposedly valid:
</p>

<div class="org-src-container">
<pre class="src src-xml">&lt;<span style="color: #4f97d7;">ns0</span>:<span style="color: #bc6ec5; font-weight: bold;">data</span> <span style="color: #4f97d7;">xmlns</span>:<span style="color: #7590db;">ns0</span>=<span style="color: #2d9574;">"urn:ietf:params:xml:ns:netconf:base:1.0"</span>&gt;
    &lt;<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">internet</span> <span style="color: #4f97d7;">xmlns</span>:<span style="color: #7590db;">tc</span>=<span style="color: #2d9574;">"http://plajjan.github.io/ns/yang/tubecats"</span>&gt;
        &lt;<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">cat</span>&gt;
            &lt;<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">name</span>&gt;jingles&lt;/<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">name</span>&gt;
        &lt;/<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">cat</span>&gt;
        &lt;<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">cat</span>&gt;
            &lt;<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">name</span>&gt;fluffy&lt;/<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">name</span>&gt;
        &lt;/<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">cat</span>&gt;
    &lt;/<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">internet</span>&gt;
&lt;/<span style="color: #4f97d7;">ns0</span>:<span style="color: #bc6ec5; font-weight: bold;">data</span>&gt;
</pre>
</div>

<p>
We did validate this instance data against the YANG model <a href="file:///validating-data-with-YANG"><i>with yang2dsdl</i></a> so we can be fairly certain but let's test it again with yanglint:
</p>

<div class="org-src-container">
<pre class="src src-sh">kll@minemacs:~/yang-test$ yanglint --strict tubecats.yang data1.xml 
kll@minemacs:~/yang-test$ echo $<span style="color: #7590db;">?</span>
<span style="color: #a45bad;">0</span>
kll@minemacs:~/yang-test$ 
</pre>
</div>

<p>
And let's introduce an error, a 'foo' node under the second cat entry which isn't in the model:
</p>

<div class="org-src-container">
<pre class="src src-xml">&lt;<span style="color: #4f97d7;">ns0</span>:<span style="color: #bc6ec5; font-weight: bold;">data</span> <span style="color: #4f97d7;">xmlns</span>:<span style="color: #7590db;">ns0</span>=<span style="color: #2d9574;">"urn:ietf:params:xml:ns:netconf:base:1.0"</span>&gt;
    &lt;<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">internet</span> <span style="color: #4f97d7;">xmlns</span>:<span style="color: #7590db;">tc</span>=<span style="color: #2d9574;">"http://plajjan.github.io/ns/yang/tubecats"</span>&gt;
        &lt;<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">cat</span>&gt;
            &lt;<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">name</span>&gt;jingles&lt;/<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">name</span>&gt;
        &lt;/<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">cat</span>&gt;
        &lt;<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">cat</span>&gt;
            &lt;<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">name</span>&gt;fluffy&lt;/<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">name</span>&gt;
            &lt;<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">foo</span>&gt;bar&lt;/<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">foo</span>&gt;
        &lt;/<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">cat</span>&gt;
    &lt;/<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">internet</span>&gt;
&lt;/<span style="color: #4f97d7;">ns0</span>:<span style="color: #bc6ec5; font-weight: bold;">data</span>&gt;
</pre>
</div>

<p>
lo and behold as this time around it complains loudly:
</p>

<div class="org-src-container">
<pre class="src src-sh">kll@minemacs:~/yang-test$ yanglint --strict tubecats.yang data2.xml 
err : Unknown element <span style="color: #2d9574;">"foo"</span>. <span style="color: #4f97d7;">(</span>/tubecats:internet/cat<span style="color: #bc6ec5;">[</span><span style="color: #7590db;">name</span>=<span style="color: #2d9574;">'fluffy'</span><span style="color: #bc6ec5;">]</span><span style="color: #4f97d7;">)</span>
kll@minemacs:~/yang-test$ echo $<span style="color: #7590db;">?</span>
<span style="color: #a45bad;">1</span>
kll@minemacs:~/yang-test$ 
</pre>
</div>

<p>
With a rather clear error message too! YANG tools have come some way over the years! yanglint supports instance data in JSON format too, so you can validate that directly.
</p>

<p>
While there is normally no generic method to convert XML to JSON or vice versa, due to the difference in the data formats, it is possible when you have a YANG model because YANG defines both XML and JSON representations of the same instance data and so it becomes possible to convert the data in a generic way with no ambiguities. yanglint provides this capability, so if we prefer to read JSON we can convert the above XML config to JSON:
</p>

<div class="org-src-container">
<pre class="src src-sh">kll@minemacs:~/yang-test$ yanglint --strict tubecats.yang data1.xml --format json 
<span style="color: #4f97d7;">{</span>
  <span style="color: #2d9574;">"tubecats:internet"</span>: <span style="color: #bc6ec5;">{</span>
    <span style="color: #2d9574;">"cat"</span>: <span style="color: #2d9574;">[</span>
      <span style="color: #67b11d;">{</span>
        <span style="color: #2d9574;">"name"</span>: <span style="color: #2d9574;">"jingles"</span>
      <span style="color: #67b11d;">}</span>,
      <span style="color: #67b11d;">{</span>
        <span style="color: #2d9574;">"name"</span>: <span style="color: #2d9574;">"fluffy"</span>
      <span style="color: #67b11d;">}</span>
    <span style="color: #2d9574;">]</span>
  <span style="color: #bc6ec5;">}</span>
<span style="color: #4f97d7;">}</span>

kll@minemacs:~/yang-test$ echo $<span style="color: #7590db;">?</span>
</pre>
</div>

<p>
some people prefer YAML to JSON and while there is no YAML representation defined for YANG modeled instance data, YAML is similar enough to JSON that we can easily convert JSON to YAML. Using python (and install <code>python3-yaml</code> on Debian/Ubuntu) we can write a simple program to convert JSON to YAML:
</p>

<div class="org-src-container">
<pre class="src src-python3">#!/usr/bin/env python3
import json
import sys
import yaml

jf = open(sys.argv[1])

print(yaml.dump(json.load(jf)))
</pre>
</div>

<div class="org-src-container">
<pre class="src src-sh">kll@minemacs:~/yang-test$ yanglint --strict tubecats.yang data1.xml --format json | ./j2y.py /dev/stdin
tubecats:internet:
  cat:
  - <span style="color: #4f97d7;">{</span>name: jingles<span style="color: #4f97d7;">}</span>
  - <span style="color: #4f97d7;">{</span>name: fluffy<span style="color: #4f97d7;">}</span>

kll@minemacs:~/yang-test$
</pre>
</div>

<p>
Similarly converting in the other direction, we reverse the python program:
</p>

<div class="org-src-container">
<pre class="src src-python3">#!/usr/bin/env python3
import json
import sys
import yaml

yf = open(sys.argv[1])

print(json.dumps(yaml.load(yf)))
</pre>
</div>

<div class="org-src-container">
<pre class="src src-sh">kll@minemacs:~/yang-test$ yanglint --strict tubecats.yang data1.xml --format json | ./j2y.py /dev/stdin | ./y2j.py /dev/stdin | jq
<span style="color: #4f97d7;">{</span>
  <span style="color: #2d9574;">"tubecats:internet"</span>: <span style="color: #bc6ec5;">{</span>
    <span style="color: #2d9574;">"cat"</span>: <span style="color: #2d9574;">[</span>
      <span style="color: #67b11d;">{</span>
        <span style="color: #2d9574;">"name"</span>: <span style="color: #2d9574;">"jingles"</span>
      <span style="color: #67b11d;">}</span>,
      <span style="color: #67b11d;">{</span>
        <span style="color: #2d9574;">"name"</span>: <span style="color: #2d9574;">"fluffy"</span>
      <span style="color: #67b11d;">}</span>
    <span style="color: #2d9574;">]</span>
  <span style="color: #bc6ec5;">}</span>
<span style="color: #4f97d7;">}</span>
</pre>
</div>

<p>
I wrote the program to read a file and not stdin so when piping we give it the file /dev/stdin which then accomplishes the same thing. I also run jq at the end to nicely format the JSON output as <code>json.dumps</code> just writes the whole JSON string on one line.
</p>

<p>
Now go validate all that config, in whatever format you prefer, before you try to configure your router :)
</p>

<div id="outline-container-org3897179" class="outline-2">
<h2 id="org3897179">Appendix</h2>
<div class="outline-text-2" id="text-org3897179">
</div>
<div id="outline-container-orge600fd0" class="outline-3">
<h3 id="orge600fd0">What is the difficulty of converting XML to JSON or vice versa?</h3>
<div class="outline-text-3" id="text-orge600fd0">
<p>
JSON has built in data structures that are presented with the data, for example <code>[1,2,3]</code> is a list / array while <code>{'a': 1}</code> is a dict / hash / associative array. In XML there are no such data structure in the data format itself so taking a few nodes of XML it is impossible to know whether it should be converted to multiple dicts or a list or something else. However, if we have a YANG model then we have the definiton of the data structure and so we know what it should be converted to. The simplest example of this is that it is impossible to differentiate between a list with a single element and a container, just by reading the XML file.
</p>
</div>
</div>
</div>
<div class="taglist"><a href="tags.html">Tags</a>: <a href="tag-yang.html">YANG</a> </div>]]></description>
  <category>NSO</category>
  <link>https://plajjan.github.io/2019-02-23-simple-data-validation-with-YANG-using-yanglint.html</link>
  <pubDate>Sat, 23 Feb 2019 08:00:00 +0100</pubDate>
</item>
<item>
  <title>YANG validation in the real world</title>
  <description><![CDATA[
<p>
Some time ago I wrote an [introductory post on how to validate data using YANG](/validating-data-with-YANG).  A simple example as it were, it can be difficult to apply to the real world as there are some blanks to fill in. This time around we'll follow up and use the same tools to validate if the NETCONF / YANG interface of a Huawei router is sound and adheres to standards.
</p>

<p>
Evaluating whether NETCONF / YANG interfaces are RFC compliant is something I
do on a rather frequent basis. Unfortunately I can't share all the YANG models
or our configuration as both are secret or private in one way or another. I
could perhaps have censored but that would likely have required much more time
than I was willing to spend on this post.
</p>

<p>
The Huawei router is running a software build that is compiled for us
(TeraStream) so you can't currently download or get your hands on this (unless
you ask Huawei nicely to compile one for you too, I guess).
</p>

<p>
I got the YANG models separately from Huawei;
</p>

<div class="org-src-container">
<pre class="src src-shell">kll@lingloi:~/vrp-netconf/yang$ ls
huawei-aaa-action.yang
huawei-aaa-lam-action.yang
huawei-aaa-lam-type.yang
huawei-aaa-lam.yang
huawei-aaa-type.yang
huawei-aaa.yang
huawei-acl-action.yang
huawei-acl-type.yang
huawei-acl.yang
huawei-bfd-action.yang
huawei-bfd-type.yang
huawei-bfd.yang
huawei-bgp-action.yang
huawei-bgp-bgpcomm-action.yang
huawei-bgp-bgpcomm.yang
huawei-bgp-bgpmultiinstcomm.yang
huawei-bgp-type.yang
huawei-bgp.yang
huawei-dcn-action.yang
huawei-dcn-dscpremark.yang
huawei-dcn-type.yang
huawei-dcn.yang
huawei-devm-action.yang
huawei-devm-type.yang
huawei-devm.yang
huawei-dgmp-type.yang
huawei-dgmp.yang
huawei-dhcpv6-action.yang
huawei-dhcpv6-relay-action.yang
huawei-dhcpv6-relay-type.yang
huawei-dhcpv6-relay.yang
huawei-dhcpv6-server-action.yang
huawei-dhcpv6-server-type.yang
huawei-dhcpv6-server.yang
huawei-dhcpv6-type.yang
huawei-dhcpv6.yang
huawei-dns-action.yang
huawei-dns-type.yang
huawei-dns.yang
huawei-ethernet-action.yang
huawei-ethernet-stacking.yang
huawei-ethernet-type.yang
huawei-ethernet.yang
huawei-extension.yang
huawei-hwtacacs-action.yang
huawei-hwtacacs-type.yang
huawei-hwtacacs.yang
huawei-ifm-action.yang
huawei-ifmatm-type.yang
huawei-ifmatm.yang
huawei-ifmbundle-type.yang
huawei-ifmbundle.yang
huawei-ifmcpostrunk-type.yang
huawei-ifmcpostrunk.yang
huawei-ifm-flowalarm.yang
huawei-ifm-fr-type.yang
huawei-ifm-fr.yang
huawei-ifm-hdlc-type.yang
huawei-ifm-hdlc.yang
huawei-ifmima-type.yang
huawei-ifmima.yang
huawei-ifmlag-action.yang
huawei-ifmlag-type.yang
huawei-ifmlag.yang
huawei-ifmmp-type.yang
huawei-ifmmp.yang
huawei-ifmpostrunk-type.yang
huawei-ifmpostrunk.yang
huawei-ifm-pppbase-type.yang
huawei-ifm-pppbase.yang
huawei-ifmtrunk-action.yang
huawei-ifmtrunk-type.yang
huawei-ifmtrunk.yang
huawei-ifm-type.yang
huawei-ifm.yang
huawei-ipsec-action.yang
huawei-ipsec-ike-action.yang
huawei-ipsec-ike-type.yang
huawei-ipsec-ike.yang
huawei-ipsec-type.yang
huawei-ipsec.yang
huawei-isiscomm-action.yang
huawei-isiscomm-type.yang
huawei-isiscomm.yang
huawei-l2tpv3-action.yang
huawei-l2tpv3-type.yang
huawei-l2tpv3.yang
huawei-l3vpn-action.yang
huawei-l3vpn-l3vpncomm-type.yang
huawei-l3vpn-l3vpncomm.yang
huawei-l3vpn-mpls-type.yang
huawei-l3vpn-mpls.yang
huawei-l3vpn-netslice.yang
huawei-l3vpn-qos-action.yang
huawei-l3vpn-qos-type.yang
huawei-l3vpn-qos.yang
huawei-l3vpn-staticfrr.yang
huawei-l3vpn-tnl-type.yang
huawei-l3vpn-tnl.yang
huawei-l3vpn-type.yang
huawei-l3vpn.yang
huawei-mcastbase-type.yang
huawei-mcastbase.yang
huawei-nd-action.yang
huawei-nd-type.yang
huawei-nd.yang
huawei-netconf-authorization-type.yang
huawei-netconf-authorization.yang
huawei-netconf-notification-type.yang
huawei-netconf-notification.yang
huawei-netconf-type.yang
huawei-netconf.yang
huawei-ntp-type.yang
huawei-ntp.yang
huawei-pim-pimafspro-type.yang
huawei-pim-pimafspro.yang
huawei-pim-type.yang
huawei-pim.yang
huawei-pub-type.yang
huawei-qos-action.yang
huawei-qos-cbqos-type.yang
huawei-qos-cbqos.yang
huawei-qos-hqos-type.yang
huawei-qos-hqos.yang
huawei-qos-type.yang
huawei-qos-vllpipe.yang
huawei-qos-wred.yang
huawei-qos.yang
huawei-rm-action.yang
huawei-rm-l3vpn-labelstack.yang
huawei-rm-rmbase-type.yang
huawei-rm-rmbase.yang
huawei-rm.yang
huawei-rsa-type.yang
huawei-rsa.yang
huawei-rtp-action.yang
huawei-rtp-type.yang
huawei-rtp.yang
huawei-snmp-action.yang
huawei-snmp-type.yang
huawei-snmp.yang
huawei-sshc-action.yang
huawei-sshc-type.yang
huawei-sshc.yang
huawei-sshs-action.yang
huawei-sshs-type.yang
huawei-sshs.yang
huawei-staticrt-staticmrt-type.yang
huawei-staticrt-staticmrt.yang
huawei-staticrt-staticrtbase-type.yang
huawei-staticrt-staticrtbase.yang
huawei-staticrt.yang
huawei-syslog-action.yang
huawei-syslog-type.yang
huawei-syslog.yang
huawei-system-action.yang
huawei-system-type.yang
huawei-system.yang
huawei-timerange-type.yang
huawei-timerange.yang
huawei-tty-type.yang
huawei-tty.yang
huawei-vlan-action.yang
huawei-vlan-type.yang
huawei-vlan.yang
huawei-vty-action.yang
huawei-vty-type.yang
huawei-vty.yang
huawei-wdm-type.yang
huawei-wdm.yang
huawei-y1731-action.yang
huawei-y1731-dtools-action.yang
huawei-y1731-dtools-type.yang
huawei-y1731-dtools.yang
huawei-y1731-type.yang
huawei-y1731.yang
ietf-inet-types.yang
ietf-yang-types.yang
</pre>
</div>

<p>
Quite a few models!
</p>

<p>
Before this point we've had numerous issues with the NETCONF server but most of
them seem to have been resolved so that we can get the config using NETCONFs
get-config RPC. We use netconf-console to do this but you can use whatever
NETCONF client you might have handy, like ncclient (which is kinda a personal
favourite of mine).
</p>

<div class="org-src-container">
<pre class="src src-shell">kll@lingloi:~/vrp-netconf$ netconf-console -u test -p secr3tpassw0rd --proto ssh --port <span style="color: #a45bad;">830</span> --host my-vrp-lab-router --get-config &gt; config-from-netconf
kll@lingloi:~/vrp-netconf$ wc -l config-from-netconf
<span style="color: #a45bad;">205780</span> config-from-netconf
</pre>
</div>

<p>
Gulp. That's a lot. The config on the router isn't very large at all so something seems off.
</p>

<p>
Just reading the file I find 141523 lines from the huawei-fib model. It starts with:
</p>
<div class="org-src-container">
<pre class="src src-xml">  &lt;<span style="color: #bc6ec5; font-weight: bold;">fib</span> <span style="color: #4f97d7;">xmlns</span>=<span style="color: #2d9574;">"http://www.huawei.com/netconf/vrp/huawei-fib"</span>&gt;
    &lt;<span style="color: #bc6ec5; font-weight: bold;">uniAfs</span>&gt;
      &lt;<span style="color: #bc6ec5; font-weight: bold;">uniAf</span>&gt;
        &lt;<span style="color: #bc6ec5; font-weight: bold;">fibRoutes</span>&gt;
          &lt;<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;/<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;/<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;/<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;/<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;/<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;/<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;/<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
        &lt;/<span style="color: #bc6ec5; font-weight: bold;">fibRoutes</span>&gt;
        &lt;<span style="color: #bc6ec5; font-weight: bold;">fibStatisticss</span>&gt;
          &lt;<span style="color: #bc6ec5; font-weight: bold;">fibStatistics</span>&gt;
          &lt;/<span style="color: #bc6ec5; font-weight: bold;">fibStatistics</span>&gt;
        &lt;/<span style="color: #bc6ec5; font-weight: bold;">fibStatisticss</span>&gt;
      &lt;/<span style="color: #bc6ec5; font-weight: bold;">uniAf</span>&gt;
      &lt;<span style="color: #bc6ec5; font-weight: bold;">uniAf</span>&gt;
        &lt;<span style="color: #bc6ec5; font-weight: bold;">fibRoutes</span>&gt;
          &lt;<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;/<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;/<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;/<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;/<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;/<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;/<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;/<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
        &lt;/<span style="color: #bc6ec5; font-weight: bold;">fibRoutes</span>&gt;
        &lt;<span style="color: #bc6ec5; font-weight: bold;">fibStatisticss</span>&gt;
          &lt;<span style="color: #bc6ec5; font-weight: bold;">fibStatistics</span>&gt;
          &lt;/<span style="color: #bc6ec5; font-weight: bold;">fibStatistics</span>&gt;
        &lt;/<span style="color: #bc6ec5; font-weight: bold;">fibStatisticss</span>&gt;
      &lt;/<span style="color: #bc6ec5; font-weight: bold;">uniAf</span>&gt;
      &lt;<span style="color: #bc6ec5; font-weight: bold;">uniAf</span>&gt;
        &lt;<span style="color: #bc6ec5; font-weight: bold;">fibRoutes</span>&gt;
          &lt;<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;/<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;/<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;/<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;/<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;/<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;/<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;/<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;/<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;/<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;/<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;/<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;/<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;/<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;/<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;/<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;/<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
          &lt;/<span style="color: #bc6ec5; font-weight: bold;">fibRoute</span>&gt;
...
</pre>
</div>

<p>
and continues like that. This is clearly some bug. We are seeing a long list of
entries but there is no data populated in each entry. We don't have 141k routes
configured on this router (more like 1 static) and so I suspect that I'm
getting back operational data, despite only asking for config data with
get-config. This has happened with Huawei before so I find it entirely possible
it is happening again.
</p>

<p>
If we ignore that though we can see if we can validate the rest of the data
using the same principles as in the previous post. Using yang2dsdl, that is:
</p>

<div class="org-src-container">
<pre class="src src-shell">kll@lingloi:~/vrp-netconf/yang$ yang2dsdl -v ../config-from-netconf *.yang
huawei-pub-type.yang:75: warning: the escape sequence <span style="color: #2d9574;">"\."</span> is unsafe<span style="color: #4f97d7; font-weight: bold;"> in</span> double quoted strings - pass the flag --lax-quote-checks to avoid this warning
huawei-pub-type.yang:75: warning: the escape sequence <span style="color: #2d9574;">"\."</span> is unsafe<span style="color: #4f97d7; font-weight: bold;"> in</span> double quoted strings - pass the flag --lax-quote-checks to avoid this warning
huawei-pub-type.yang:146: warning: the escape sequence <span style="color: #2d9574;">"\d"</span> is unsafe<span style="color: #4f97d7; font-weight: bold;"> in</span> double quoted strings - pass the flag --lax-quote-checks to avoid this warning
huawei-pub-type.yang:146: warning: the escape sequence <span style="color: #2d9574;">"\d"</span> is unsafe<span style="color: #4f97d7; font-weight: bold;"> in</span> double quoted strings - pass the flag --lax-quote-checks to avoid this warning
huawei-pub-type.yang:271: warning: the escape sequence <span style="color: #2d9574;">"\s"</span> is unsafe<span style="color: #4f97d7; font-weight: bold;"> in</span> double quoted strings - pass the flag --lax-quote-checks to avoid this warning
huawei-pub-type.yang:271: warning: the escape sequence <span style="color: #2d9574;">"\s"</span> is unsafe<span style="color: #4f97d7; font-weight: bold;"> in</span> double quoted strings - pass the flag --lax-quote-checks to avoid this warning
huawei-pub-type.yang:434: warning: the escape sequence <span style="color: #2d9574;">"\s"</span> is unsafe<span style="color: #4f97d7; font-weight: bold;"> in</span> double quoted strings - pass the flag --lax-quote-checks to avoid this warning
huawei-pub-type.yang:434: warning: the escape sequence <span style="color: #2d9574;">"\-"</span> is unsafe<span style="color: #4f97d7; font-weight: bold;"> in</span> double quoted strings - pass the flag --lax-quote-checks to avoid this warning
huawei-pub-type.yang:434: warning: the escape sequence <span style="color: #2d9574;">"\."</span> is unsafe<span style="color: #4f97d7; font-weight: bold;"> in</span> double quoted strings - pass the flag --lax-quote-checks to avoid this warning
huawei-pub-type.yang:434: warning: the escape sequence <span style="color: #2d9574;">"\("</span> is unsafe<span style="color: #4f97d7; font-weight: bold;"> in</span> double quoted strings - pass the flag --lax-quote-checks to avoid this warning
huawei-pub-type.yang:434: warning: the escape sequence <span style="color: #2d9574;">"\)"</span> is unsafe<span style="color: #4f97d7; font-weight: bold;"> in</span> double quoted strings - pass the flag --lax-quote-checks to avoid this warning
huawei-pub-type.yang:434: warning: the escape sequence <span style="color: #2d9574;">"\s"</span> is unsafe<span style="color: #4f97d7; font-weight: bold;"> in</span> double quoted strings - pass the flag --lax-quote-checks to avoid this warning
huawei-pub-type.yang:434: warning: the escape sequence <span style="color: #2d9574;">"\-"</span> is unsafe<span style="color: #4f97d7; font-weight: bold;"> in</span> double quoted strings - pass the flag --lax-quote-checks to avoid this warning
huawei-pub-type.yang:434: warning: the escape sequence <span style="color: #2d9574;">"\."</span> is unsafe<span style="color: #4f97d7; font-weight: bold;"> in</span> double quoted strings - pass the flag --lax-quote-checks to avoid this warning
huawei-pub-type.yang:434: warning: the escape sequence <span style="color: #2d9574;">"\("</span> is unsafe<span style="color: #4f97d7; font-weight: bold;"> in</span> double quoted strings - pass the flag --lax-quote-checks to avoid this warning
huawei-pub-type.yang:434: warning: the escape sequence <span style="color: #2d9574;">"\)"</span> is unsafe<span style="color: #4f97d7; font-weight: bold;"> in</span> double quoted strings - pass the flag --lax-quote-checks to avoid this warning
huawei-pub-type.yang:449: warning: the escape sequence <span style="color: #2d9574;">"\d"</span> is unsafe<span style="color: #4f97d7; font-weight: bold;"> in</span> double quoted strings - pass the flag --lax-quote-checks to avoid this warning
huawei-pub-type.yang:449: warning: the escape sequence <span style="color: #2d9574;">"\s"</span> is unsafe<span style="color: #4f97d7; font-weight: bold;"> in</span> double quoted strings - pass the flag --lax-quote-checks to avoid this warning
huawei-pub-type.yang:449: warning: the escape sequence <span style="color: #2d9574;">"\d"</span> is unsafe<span style="color: #4f97d7; font-weight: bold;"> in</span> double quoted strings - pass the flag --lax-quote-checks to avoid this warning
huawei-pub-type.yang:449: warning: the escape sequence <span style="color: #2d9574;">"\s"</span> is unsafe<span style="color: #4f97d7; font-weight: bold;"> in</span> double quoted strings - pass the flag --lax-quote-checks to avoid this warning
huawei-pub-type.yang:464: warning: the escape sequence <span style="color: #2d9574;">"\d"</span> is unsafe<span style="color: #4f97d7; font-weight: bold;"> in</span> double quoted strings - pass the flag --lax-quote-checks to avoid this warning
huawei-pub-type.yang:464: warning: the escape sequence <span style="color: #2d9574;">"\d"</span> is unsafe<span style="color: #4f97d7; font-weight: bold;"> in</span> double quoted strings - pass the flag --lax-quote-checks to avoid this warning
huawei-pub-type.yang:472: warning: the escape sequence <span style="color: #2d9574;">"\d"</span> is unsafe<span style="color: #4f97d7; font-weight: bold;"> in</span> double quoted strings - pass the flag --lax-quote-checks to avoid this warning
huawei-pub-type.yang:472: warning: the escape sequence <span style="color: #2d9574;">"\d"</span> is unsafe<span style="color: #4f97d7; font-weight: bold;"> in</span> double quoted strings - pass the flag --lax-quote-checks to avoid this warning
Cannot translate submodules
kll@lingloi:~/vrp-netconf/yang$
</pre>
</div>
<p>
Okay, a bunch of warnings and then an error at the end. I don't like seeing
warnings (sometimes they later lead to errors) so let's start with those. Line
75 of huawei-pub-type.yang is the pattern line:
</p>

<div class="org-src-container">
<pre class="src src-yang"><span style="color: #4f97d7; font-weight: bold;">typedef</span> <span style="color: #ce537a; font-weight: bold;">ipv4Address</span> <span style="color: #4f97d7;">{</span>
  <span style="color: #4f97d7; font-weight: bold;">type</span> <span style="color: #ce537a; font-weight: bold;">string</span> <span style="color: #bc6ec5;">{</span>
    <span style="color: #4f97d7; font-weight: bold;">length</span> <span style="color: #2d9574;">"0..255"</span>;
    <span style="color: #4f97d7; font-weight: bold;">pattern</span> <span style="color: #2d9574;">"((([1-9]?[0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([1-9]?[0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5]))"</span>;
  <span style="color: #bc6ec5;">}</span>
  <span style="color: #4f97d7; font-weight: bold;">description</span>
    <span style="color: #2d9574;">"An IPV4 address in dotted decimal notation"</span>;
<span style="color: #4f97d7;">}</span>
</pre>
</div>

<p>
<code>\.</code> is used in the middle to mean a literal <code>.</code>. This is fine but as the
warning messages tells us, doing escapes in a double quoted string is not safe.
Simply changing the pattern to use single quotes removes the warning and stays
true to the intent of the pattern.
</p>

<p>
With that fixed we are left with the error about submodules which is simply
because we are telling yang2dsdl to validate an instance data document using a
submodule. That's simply wrong and not valid. The correct thing to do is to
validate using the module which naturally includes the submodule, thus we need
to filter our submodules. All submodules include the statement <code>belongs-to</code> to
point out which module they belong to.
</p>

<p>
This grep will thus yield all the submodules in the directory (-l displays
files with matches but not the matching line itself):
</p>

<div class="org-src-container">
<pre class="src src-shell">kll@lingloi:~/vrp-netconf/yang$ grep -l belongs-to *.yang
</pre>
</div>

<p>
What we are looking for is all modules that are NOT submodules, thus we list
everything and then do a inverse grep on that, like this:
</p>

<div class="org-src-container">
<pre class="src src-shell">kll@lingloi:~/vrp-netconf/yang$ ls *.yang | grep -vf &lt;<span style="color: #4f97d7;">(</span>grep -l belongs-to *.yang<span style="color: #4f97d7;">)</span>
</pre>
</div>

<p>
<code>grep -f</code> takes a file as input for things to grep after and so we use a bash
trick using <code>&lt;()</code> to let the output of a sub-shell look like a file to the
current command. The <code>-v</code> is to invert the match. This yields the list of files
we want, now we give it to yang2dsdl by using a sub-shell for expansion:
</p>

<div class="org-src-container">
<pre class="src src-shell">kll@lingloi:~/vrp-netconf/yang$ yang2dsdl -v ../config-from-netconf $<span style="color: #4f97d7;">(</span><span style="color: #fa8072;">ls</span> *.yang | grep -vf &lt;<span style="color: #bc6ec5;">(</span>grep -l belongs-to *<span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>
/usr/bin/yang2dsdl: <span style="color: #a45bad;">243:</span> /usr/bin/yang2dsdl: xsltproc: not found
== Generating RELAX NG schema <span style="color: #2d9574;">'./-data.rng'</span>
/usr/bin/yang2dsdl: <span style="color: #a45bad;">76:</span> /usr/bin/yang2dsdl: xsltproc: not found
kll@lingloi:~/vrp-netconf/yang$ xsltproc
The program <span style="color: #2d9574;">'xsltproc'</span> is currently not installed. You can install it by typing:
sudo apt install xsltproc
kll@lingloi:~/vrp-netconf/yang$ sudo apt install xsltproc
</pre>
</div>

<p>
Whops! I'm normally validating YANG etc on a computer in our lab but I'm now
using the same computer which I'm writing this post on and I'm apparently
missing some tools. I'll include it since you are likely to run into the same
problem. Just install xsltproc and try again
</p>

<div class="org-src-container">
<pre class="src src-shell">kll@lingloi:~/vrp-netconf/yang$ yang2dsdl -v ../config-from-netconf $<span style="color: #4f97d7;">(</span><span style="color: #fa8072;">ls</span> *.yang | grep -vf &lt;<span style="color: #bc6ec5;">(</span>grep -l belongs-to *<span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>
warning: failed to load external entity <span style="color: #2d9574;">"/usr/local/share/yang/xslt/basename.xsl"</span>
cannot parse /usr/local/share/yang/xslt/basename.xsl
== Generating RELAX NG schema <span style="color: #2d9574;">'./-data.rng'</span>
warning: failed to load external entity <span style="color: #2d9574;">"schema-dir"</span>
cannot parse schema-dir
</pre>
</div>

<p>
My yang2dsdl is looking in /usr/local/share instad of /usr/share. Dunno why.
Don't think I saw problem this on my other computer. Anyway, I just copied
those files:
</p>

<div class="org-src-container">
<pre class="src src-shell">kll@lingloi:~/vrp-netconf/yang$ sudo cp -a /usr/share/yang /usr/local/share/yang
</pre>
</div>

<p>
And run again:
</p>

<div class="org-src-container">
<pre class="src src-shell">kll@lingloi:~/vrp-netconf/yang$ yang2dsdl -v ../config-from-netconf $<span style="color: #4f97d7;">(</span><span style="color: #fa8072;">ls</span> *.yang | grep -vf &lt;<span style="color: #bc6ec5;">(</span>grep -l belongs-to *<span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>
== Generating RELAX NG schema <span style="color: #2d9574;">'./huawei-aaa_huawei-acl_huawei-bfd_huawei-bgp_huawei-dcn_huawei-devm_huawei-dgmp_huawei-dhcpv6_huawei-dns_huawei-ethernet_huawei-extension_huawei-hwtacacs_huawei-ifmatm_huawei-ifmbundle_huawei-ifmcpostrunk_huawei-ifmima_huawei-ifmlag_huawei-ifmmp_huawei-ifmpostrunk_huawei-ifmtrunk_huawei-ifm_huawei-ipsec_huawei-isiscomm_huawei-l2tpv3_huawei-l3vpn_huawei-mcastbase_huawei-nd_huawei-netconf_huawei-ntp_huawei-pim_huawei-pub-type_huawei-qos_huawei-rm_huawei-rsa_huawei-rtp_huawei-snmp_huawei-sshc_huawei-sshs_huawei-staticrt_huawei-syslog_huawei-system_huawei-timerange_huawei-tty_huawei-vlan_huawei-vty_huawei-wdm_huawei-y1731_ietf-inet-types_ietf-yang-types-data.rng'</span>
I/O error : Filename too long
I/O error : Filename too long
kll@lingloi:~/vrp-netconf/yang$
</pre>
</div>

<p>
Blargh. Okay, too many modules which yields too long of a name since yang2dsdl
per default concatenates the names of all the modules in its intermediate
output (it writes a single large schema file that is then used for validation).
We can specify a basename to use with <code>-b</code>:
</p>

<div class="org-src-container">
<pre class="src src-shell">kll@lingloi:~/vrp-netconf/yang$ yang2dsdl -b hejohoj -v ../config-from-netconf $<span style="color: #4f97d7;">(</span><span style="color: #fa8072;">ls</span> *.yang | grep -vf &lt;<span style="color: #bc6ec5;">(</span>grep -l belongs-to *<span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>                                                                                                                                                                                                                                                                                                                                                                
== Generating RELAX NG schema <span style="color: #2d9574;">'./hejohoj-data.rng'</span>
Done.

== Generating Schematron schema <span style="color: #2d9574;">'./hejohoj-data.sch'</span>
Done.

== Generating DSRL schema <span style="color: #2d9574;">'./hejohoj-data.dsrl'</span>
Done.

== Validating grammar and datatypes ...
/usr/bin/yang2dsdl: <span style="color: #a45bad;">103:</span> /usr/bin/yang2dsdl: xmllint: not found
</pre>
</div>

<p>
Okay, install xmllint too!
</p>

<div class="org-src-container">
<pre class="src src-shell">kll@lingloi:~/vrp-netconf/yang$ xmllint
The program <span style="color: #2d9574;">'xmllint'</span> is currently not installed. You can install it by typing:
sudo apt install libxml2-utils
kll@lingloi:~/vrp-netconf/yang$ sudo apt-get install -qy libxml2-utils
Reading package lists...
Building dependency tree...
...
</pre>
</div>

<p>
And now!
</p>

<div class="org-src-container">
<pre class="src src-shell">kll@lingloi:~/vrp-netconf/yang$ yang2dsdl -b hejohoj -v ../config-from-netconf $<span style="color: #4f97d7;">(</span><span style="color: #fa8072;">ls</span> *.yang | grep -vf &lt;<span style="color: #bc6ec5;">(</span>grep -l belongs-to *<span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>
== Generating RELAX NG schema <span style="color: #2d9574;">'./hejohoj-data.rng'</span>
Done.

== Generating Schematron schema <span style="color: #2d9574;">'./hejohoj-data.sch'</span>
Done.

== Generating DSRL schema <span style="color: #2d9574;">'./hejohoj-data.dsrl'</span>
Done.

== Validating grammar and datatypes ...
../config-from-netconf:2: element rpc-reply: Relax-NG validity error : Expecting element data, got rpc-reply
../config-from-netconf fails to validate
</pre>
</div>

<p>
Not quite :/ yang2dsdl defaults to assuming it's a "data" file we want to
validate but this is the response from a get-config query and so the "data"
element is wrapped inside a rpc-reply. We can inform yang2dsdl with <code>-t</code> that
it is a get-config-reply:
</p>

<div class="org-src-container">
<pre class="src src-shell">kll@lingloi:~/vrp-netconf/yang$ yang2dsdl -t get-config-reply -b hejohoj -v ../config-from-netconf $<span style="color: #4f97d7;">(</span><span style="color: #fa8072;">ls</span> *.yang | grep -vf &lt;<span style="color: #bc6ec5;">(</span>grep -l belongs-to *<span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>                                                                                                                                                                                                                                                                                                                                                      
== Generating RELAX NG schema <span style="color: #2d9574;">'./hejohoj-get-config-reply.rng'</span>
Done.

== Generating Schematron schema <span style="color: #2d9574;">'./hejohoj-get-config-reply.sch'</span>
Done.

== Generating DSRL schema <span style="color: #2d9574;">'./hejohoj-get-config-reply.dsrl'</span>
Done.

== Validating grammar and datatypes ...
../config-from-netconf:1976: element mac: Relax-NG validity error : Element data has extra content: mac
../config-from-netconf fails to validate
kll@lingloi:~/vrp-netconf/yang$
</pre>
</div>

<p>
Now we are getting somewhere. We found a data inconsistency on line 1976 which
tells us that at least 1975 lines actuallt passed validation! What's on line 1976?
</p>

<div class="org-src-container">
<pre class="src src-xml">&lt;<span style="color: #bc6ec5; font-weight: bold;">mac</span> <span style="color: #4f97d7;">xmlns</span>=<span style="color: #2d9574;">"http://www.huawei.com/netconf/vrp/huawei-mac"</span>&gt;
  &lt;<span style="color: #bc6ec5; font-weight: bold;">globalAttribute</span>&gt;
    &lt;<span style="color: #bc6ec5; font-weight: bold;">macAgingTime</span>&gt;300&lt;/<span style="color: #bc6ec5; font-weight: bold;">macAgingTime</span>&gt;
    &lt;<span style="color: #bc6ec5; font-weight: bold;">macAgeTimeEnable</span>&gt;enable&lt;/<span style="color: #bc6ec5; font-weight: bold;">macAgeTimeEnable</span>&gt;
    &lt;<span style="color: #bc6ec5; font-weight: bold;">macSynchronize</span>&gt;
      &lt;<span style="color: #bc6ec5; font-weight: bold;">synenable</span>&gt;false&lt;/<span style="color: #bc6ec5; font-weight: bold;">synenable</span>&gt;
    &lt;/<span style="color: #bc6ec5; font-weight: bold;">macSynchronize</span>&gt;
  &lt;/<span style="color: #bc6ec5; font-weight: bold;">globalAttribute</span>&gt;
  &lt;<span style="color: #bc6ec5; font-weight: bold;">macUsages</span>&gt;
    &lt;<span style="color: #bc6ec5; font-weight: bold;">macUsage</span>&gt;
      &lt;<span style="color: #bc6ec5; font-weight: bold;">slot</span>&gt;0&lt;/<span style="color: #bc6ec5; font-weight: bold;">slot</span>&gt;
      &lt;<span style="color: #bc6ec5; font-weight: bold;">macThreshold</span>&gt;90&lt;/<span style="color: #bc6ec5; font-weight: bold;">macThreshold</span>&gt;
    &lt;/<span style="color: #bc6ec5; font-weight: bold;">macUsage</span>&gt;
    &lt;<span style="color: #bc6ec5; font-weight: bold;">macUsage</span>&gt;
      &lt;<span style="color: #bc6ec5; font-weight: bold;">slot</span>&gt;1&lt;/<span style="color: #bc6ec5; font-weight: bold;">slot</span>&gt;
      &lt;<span style="color: #bc6ec5; font-weight: bold;">macThreshold</span>&gt;90&lt;/<span style="color: #bc6ec5; font-weight: bold;">macThreshold</span>&gt;
    &lt;/<span style="color: #bc6ec5; font-weight: bold;">macUsage</span>&gt;
    &lt;<span style="color: #bc6ec5; font-weight: bold;">macUsage</span>&gt;
      &lt;<span style="color: #bc6ec5; font-weight: bold;">slot</span>&gt;3&lt;/<span style="color: #bc6ec5; font-weight: bold;">slot</span>&gt;
      &lt;<span style="color: #bc6ec5; font-weight: bold;">macThreshold</span>&gt;90&lt;/<span style="color: #bc6ec5; font-weight: bold;">macThreshold</span>&gt;
    &lt;/<span style="color: #bc6ec5; font-weight: bold;">macUsage</span>&gt;
  &lt;/<span style="color: #bc6ec5; font-weight: bold;">macUsages</span>&gt;
&lt;/<span style="color: #bc6ec5; font-weight: bold;">mac</span>&gt;
</pre>
</div>

<p>
Looking at our YANG modules, there is none that define a namespace of huawei-mac:
</p>

<div class="org-src-container">
<pre class="src src-shell">kll@lingloi:~/vrp-netconf/yang$ grep huawei-mac *
kll@lingloi:~/vrp-netconf/yang$
</pre>
</div>
<p>
this isn't wrong per se as NETCONF allows the return of data that we don't have
YANG model for and thus can't validate. The NETCONF client should just ignore
this data. This might seem strange and first but this is actually how upgrades
are handled, i.e. if a client is using an older YANG model or simply doesn't
understand all YANG models supported by the device, that is ok, since we just
ignore the data. However, the yang2dsdl tool is a little more strict and
complains about it. For the sake of progress, I'll remove that part and
continue. After this, I actually found eight other namespaces that I did not
have YANG models for and thus just removed the corresponding instance data for
the sake of progressing with my testing.
</p>

<p>
Next error we run into is related to the qos config:
</p>

<div class="org-src-container">
<pre class="src src-shell">kll@lingloi:~/vrp-netconf/yang$ yang2dsdl -t get-config-reply -b hejohoj -v ../config-from-netconf $<span style="color: #4f97d7;">(</span><span style="color: #fa8072;">ls</span> *.yang | grep -vf &lt;<span style="color: #bc6ec5;">(</span>grep -l belongs-to *<span style="color: #bc6ec5;">)</span><span style="color: #4f97d7;">)</span>
== Generating RELAX NG schema <span style="color: #2d9574;">'./hejohoj-get-config-reply.rng'</span>
Done.

== Generating Schematron schema <span style="color: #2d9574;">'./hejohoj-get-config-reply.sch'</span>
Done.

== Generating DSRL schema <span style="color: #2d9574;">'./hejohoj-get-config-reply.dsrl'</span>
Done.

== Validating grammar and datatypes ...
Relax-NG validity error : Extra element qos<span style="color: #4f97d7; font-weight: bold;"> in</span> interleave
../config-from-netconf:5156: element qos: Relax-NG validity error : Element data failed to validate content
../config-from-netconf fails to validate
</pre>
</div>

<p>
The validation is achieved by parsing the YANG models and producing a RelaxNG
schema which in turn is used to validate the data. This means that at
validation we no longer have an understanding of YANG, which I presume (I don't
know that much about RelaxNG) leads to a loss of data. Unfortunately this
results in an overly sparse error message.
</p>

<p>
Fortunately I have some experience in reading YANG models and after reading
through a bit of the huawei-qos.yang model and its sub-modules I find that
instances of non-presence containers containing mandatory leaf nodes. This is
quite the anti-pattern of YANG module writing and this isn't the first time
I've seen it.
</p>


<p>
There are two flavours of containers in YANG; presence and non-presence
containers. Non-presence containers are the default and these containers do not
themselves carry any explicit meaning and are used merely to organise data by
providing structure. By adding the <code>presence</code> keyword under a container we can
turn it into a presence container which means the existance of the container
itself carries meaning.
</p>

<p>
Let's take a short example:
</p>
<div class="org-src-container">
<pre class="src src-yang"><span style="color: #4f97d7; font-weight: bold;">container</span> <span style="color: #ce537a; font-weight: bold;">foo</span> <span style="color: #4f97d7;">{</span>
  <span style="color: #4f97d7; font-weight: bold;">leaf</span> <span style="color: #ce537a; font-weight: bold;">bar</span> <span style="color: #bc6ec5;">{</span>
    <span style="color: #4f97d7; font-weight: bold;">type</span> <span style="color: #ce537a; font-weight: bold;">string</span>;
    <span style="color: #4f97d7; font-weight: bold;">mandatory</span> <span style="color: #a45bad;">true</span>;
  <span style="color: #bc6ec5;">}</span>
<span style="color: #4f97d7;">}</span>
</pre>
</div>
<p>
With this model, the foo container, which is a non-presence container, MUST
exist and there MUST be a bar leaf in it, since mandatory is set. I've seen
this pattern in a lot of cases where the intention is to make the leaf bar
mandatory but only when the container foo is present as a consequence of
enabling the "foo" feature. To achieve that, we can use a presence container,
like so:
</p>
<div class="org-src-container">
<pre class="src src-yang"><span style="color: #4f97d7; font-weight: bold;">container</span> <span style="color: #ce537a; font-weight: bold;">foo</span> <span style="color: #4f97d7;">{</span>
  <span style="color: #4f97d7; font-weight: bold;">presence</span> <span style="color: #2d9574;">"Enables feature foo"</span>;
  <span style="color: #4f97d7; font-weight: bold;">leaf</span> <span style="color: #ce537a; font-weight: bold;">bar</span> <span style="color: #bc6ec5;">{</span>
    <span style="color: #4f97d7; font-weight: bold;">type</span> <span style="color: #ce537a; font-weight: bold;">string</span>;
    <span style="color: #4f97d7; font-weight: bold;">mandatory</span> <span style="color: #a45bad;">true</span>;
  <span style="color: #bc6ec5;">}</span>
<span style="color: #4f97d7;">}</span>
</pre>
</div>

<p>
Now the presence of the whole container foo is optional but if it exists then
the bar leaf MUST be set (again, due to the mandatory statement).
</p>

<p>
Huawei's YANG models contain a bunch of places where they have rather deep
nesting of containers and finally we find a leaf with <code>mandatory true</code>. When
all of this data is missing in the instance data the validation fails with that
extremely sparse message. I modified the YANG modules and added in <code>presence</code>
statements on a couple of containers to make them optional, again to be able to
make progress with my evaluation.
</p>

<p>
This type of problem is in fact so widespread that I had to find a better way
of finding problematic instances. By looking at the output of <code>pyang -f tree</code>
and then filtering this I could quickly find mandatory leaf nodes under
containers. I started by removing all read-only data. I do this with vi and
<code>:g/+--ro /d</code>. Second I can remove all leaves that are optional with <code>:g/+--rw
[A-Za-z0-9]\+?/d</code>. We are now down to containers, lists and mandatory leaves.
Here's an exceprt from the routing policy model:
</p>

<div class="org-src-container">
<pre class="src src-text">module: huawei-rtp
    +--rw rtp
       +--rw asPathFilters
       |  +--rw asPathFilter* [index]
       |     +--rw index                string
       |     +--rw asPathFilterNodes
       |        +--rw asPathFilterNode* [nodeSequence]
       |           +--rw nodeSequence    uint32
       |           +--rw matchMode       rtpMatchMode
       |           +--rw regular         string
</pre>
</div>

<p>
We can see how asPathFilters is a container that holds a single list, "index"
is the key of that list and nex to it we find another container and in it a
second list which wholds the members of the filter. That inner list is keyed on
nodeSequence, which is fine and the matchMode and regular seems fine too, I
guess the regular is the actual value and it's called "regular" because it's a
regular expression. This structure seems fine.
</p>

<p>
However, if we move on down we get to the route policies themselves:
</p>

<div class="org-src-container">
<pre class="src src-text">+--rw routePolicys
|  +--rw routePolicy* [name]
|     +--rw name                string
|     +--rw routePolicyNodes
|        +--rw routePolicyNode* [nodeSequence]
|           +--rw nodeSequence      uint32
|           +--rw matchMode         rtpMatchMode
|           +--rw matchCondition
|           |  +--rw matchCosts
|           |  |  +--rw matchCost
|           |  |     +--rw costValue    uint32
|           |  +--rw matchInterfaces
|           |  |  +--rw matchInterface* [ifName]
|           |  |     +--rw ifName    pub-type:ifName
|           |  +--rw matchRouteTypes
|           |  |  +--rw matchRouteType* [routeType]
|           |  |     +--rw routeType    rtpMchRtType
|           |  +--rw matchTags
|           |  |  +--rw matchTag
|           |  |     +--rw tagValue    uint32
|           |  +--rw matchMplsLabels
|           |  |  +--rw matchMplsLabel
|           |  |     +--rw mplsLabel    boolean
...
</pre>
</div>
<p>
the model continues for another 150 lines just for the routePlicy list but I
won't list it all here.  We can see how there are a bunch of mandatory leaves
here and they are tucked into two containers, like matchCosts/matchCost is a
container in a container and inside we have the leaf costValue which is
mandatory. The way the model is written it means pretty much all potential ways
of matching things in the policy are mandatory. That can't be right!
</p>

<p>
As far as I've understood, Huawei generates their models from an internal
representation so while I've found a whole bunch of instances with the same
type of error, it doesn't actually mean fixing it is very hard. All they need
to do is patch the logic that outputs the YANG model and all faulty occurences
can be fixed in one swift go.
</p>

<p>
I found a couple of other instances of bugs but won't bore you with all the
details as they are conceptually the same. I've brought it all up with Huawei
who are committed to resolving them and improve the quality of their NETCONF /
YANG interface.
</p>

<p>
I would like to thank Huawei for providing us with early access software and
working with us on improving their NETCONF / YANG support as well as for the
opportunity to publish this post and show how some of these things work.
</p>

<p>
Reach out to me on Twitter (see footer) if you have questions!
</p>
<div class="taglist"><a href="tags.html">Tags</a>: <a href="tag-yang.html">YANG</a> </div>]]></description>
  <category>YANG</category>
  <link>https://plajjan.github.io/2017-10-30-yang-validation-in-the-real-world.html</link>
  <pubDate>Mon, 30 Oct 2017 00:00:00 +0100</pubDate>
</item>
<item>
  <title>GitBot - automating boring git operations with CI</title>
  <description><![CDATA[
<p>
Git is super useful for anyone doing a bit of development work or just trying to keep track of a bunch of text files. However as your project grows you might find yourself doing lots of boring repetitive work just around git itself. At least that's what happened to me and so I automated boring git stuff using our CI system.
</p>

<p>
There are probably all sorts of use cases for automating various git operations but I'll talk about a few that I've encountered. We're using GitLab and GitLab CI so that's what my examples will include but most of the concepts should apply to other systems as well.
</p>


<div id="outline-container-orge3043cd" class="outline-2">
<h2 id="orge3043cd"><span class="section-number-2">1</span> Automatic rebase</h2>
<div class="outline-text-2" id="text-1">
<p>
We have some git repos with code that we receive from vendors, who we can think of as our <code>upstream</code>. We don't actually share a git repo with the vendor but rather we get a tar ball every now and then. The tar ball is extracted into a git repository, on the <code>master</code> branch which thus tracks the software as it is received from upstream. In a perfect world the software we receive would be feature complete and bug free and so we would be done, but that's usually not the case. We do find bugs and if they are blocking we might decide to implement a patch to fix them ourselves. The same is true for new features where we might not want to wait for the vendor to implement it.
</p>

<p>
The result is that we have some local patches to apply. We commit such patches to a separate branch, commonly named <code>ts</code> (for TeraStream), to keep them separate from the official software. Whenever a new software version is released, we extract its content to <code>master</code> and then rebase our <code>ts</code> branch onto <code>master</code> so we get all the new official features together with our patches. Once we've implemented something we usually send it upstream to the vendor for inclusion. Sometimes they include our patches verbatim so that the next version of the code will include our exact patch, in which case a rebase will simply skip our patch. Other times there are slight or major (it might be a completely different design) changes to the patch and then someone typically needs to sort out the patches manually. Mostly though, rebasing works just fine and we don't end up with conflicts.
</p>

<p>
Now, this whole rebasing process gets a tad boring and repetitive after a while, especially considering we have a dozen of repositories with the setup described above. What I recently did was to automate this using our CI system.
</p>

<p>
The workflow thus looks like:
</p>
<ul class="org-ul">
<li>human extracts zip file, git add + git commit on <code>master</code> + git push</li>
<li>CI runs for <code>master</code> branch
<ul class="org-ul">
<li>clones a copy of itself into a new working directory</li>
<li>checks out <code>ts</code> branch (the one with our patches) in working directory</li>
<li>rebases <code>ts</code> onto <code>master</code></li>
<li>push <code>ts</code> back to <code>origin</code></li>
</ul></li>
<li>this will now trigger a CI build for the <code>ts</code> branch</li>
<li>when CI runs for the <code>ts</code> branch, it will compile, test and save the binary
output as "build artifacts", which can be included in other repositories</li>
<li>GitLab CI, which is what we use, has a CI_PIPELINE_ID that we use to version
built container images or artifacts</li>
</ul>

<p>
To do this, all you need is a few lines in a .gitlab-ci.yml file, essentially;
</p>

<div class="org-src-container">
<pre class="src src-yaml"><span style="color: #7590db;">stages</span>:
  - build
  - git-robot

<span style="color: #2aa1ae; background-color: #292e34;">...</span> build jobs ...

<span style="color: #7590db;">git-rebase-ts</span>:
  <span style="color: #7590db;">stage</span>: git-robot
  <span style="color: #7590db;">only</span>:
    - master
  <span style="color: #7590db;">allow_failure</span>: <span style="color: #a45bad;">true</span>
  <span style="color: #7590db;">before_script</span>:
    - <span style="color: #2d9574;">'which ssh-agent || ( apt-get update -y &amp;&amp; apt-get install openssh-client -y )'</span>
    - eval $(ssh-agent -s)
    - ssh-add &lt;(echo <span style="color: #2d9574;">"$GIT_SSH_PRIV_KEY"</span>)
    - git config --global user.email <span style="color: #2d9574;">"kll@dev.terastrm.net"</span>
    - git config --global user.name <span style="color: #2d9574;">"Mr. Robot"</span>
    - mkdir -p ~/.ssh
    - cat gitlab-known-hosts &gt;&gt; ~/.ssh/known_hosts
  <span style="color: #7590db;">script</span>:
    - git clone git@gitlab.dev.terastrm.net:${CI_PROJECT_PATH}.git
    - cd ${CI_PROJECT_NAME}
    - git checkout ts
    - git rebase master
    - git push --force origin ts
</pre>
</div>

<p>
We'll go through it a few lines at a time. Some basic knowledge about GitLab CI is assumed.
</p>

<p>
This first part lists the stages of our pipeline.
</p>

<div class="org-src-container">
<pre class="src src-yaml"><span style="color: #7590db;">stages</span>:
  - build
  - git-robot
</pre>
</div>

<p>
We have two stages, first the <code>build</code> stage, which does whatever you want it to do (ours compiles stuff, runs a few unit tests and packages it all up), then the git-robot stage which is where we perform the rebase.
</p>

<p>
Then there's:
</p>

<div class="org-src-container">
<pre class="src src-yaml"><span style="color: #7590db;">git-rebase-ts</span>:
  <span style="color: #7590db;">stage</span>: git-robot
  <span style="color: #7590db;">only</span>:
    - master
  <span style="color: #7590db;">allow_failure</span>: <span style="color: #a45bad;">true</span>
</pre>
</div>

<p>
We define the stage in which we run followed by the <code>only</code> statement which limits CI jobs to run only on the specified branch(es), in this case <code>master</code>.
</p>

<p>
<code>allow_failure</code> simply allows the CI job to fail but still passing the pipeline.
</p>

<p>
Since we are going to clone a copy of ourselves (the repository checked out in CI) we need SSH and SSH keys setup. We'll use ssh-agent with a password-less key to authenticate. Generate a key using ssh-keygen, for example:
</p>

<div class="org-src-container">
<pre class="src src-shell">ssh-keygen 

kll@machine ~ $ ssh-keygen -f foo
Generating public/private rsa key pair.
Enter passphrase <span style="color: #4f97d7;">(</span>empty for no passphrase<span style="color: #4f97d7;">)</span>:
Enter same passphrase again:
Your identification has been saved<span style="color: #4f97d7; font-weight: bold;"> in</span> foo.
Your public key has been saved<span style="color: #4f97d7; font-weight: bold;"> in</span> foo.pub.
The key fingerprint is:
SHA256:6s15MZJ1/kUsDU/PF2WwRGA963m6ZSwHvEJJdsRzmaA kll@machine
The key<span style="color: #2d9574;">'s randomart image is:</span>
<span style="color: #2d9574;">+---[RSA 2048]----+</span>
<span style="color: #2d9574;">|            o**.*|</span>
<span style="color: #2d9574;">|           ..o**o|</span>
<span style="color: #2d9574;">|           Eo o%o|</span>
<span style="color: #2d9574;">|          .o.+o O|</span>
<span style="color: #2d9574;">|        So oo.o+.|</span>
<span style="color: #2d9574;">|       .o o.. o+o|</span>
<span style="color: #2d9574;">|      .  . o..o+=|</span>
<span style="color: #2d9574;">|     . o ..  .o= |</span>
<span style="color: #2d9574;">|      . +.    .. |</span>
<span style="color: #2d9574;">+----[SHA256]-----+</span>
<span style="color: #2d9574;">kll@machine ~ $</span>
</pre>
</div>

<p>
Add the public key as a deploy key under Project Settings -&gt; Repository -&gt; Deploy Keys. Make sure you enable write access or you won't be able to have your git robot push commits. We then need to hand over the private key so that it can be accessed from within the CI job. We'll use a secret environment variable for that, which you can define under Project Settings -&gt; Pipelines -&gt; Environment variables). I'll use the environment variable <code>GIT_SSH_PRIV_KEY</code> for this.
</p>

<p>
Next part is the before_script:
</p>

<div class="org-src-container">
<pre class="src src-yaml"><span style="color: #7590db;">before_script</span>:
  - <span style="color: #2d9574;">'which ssh-agent || ( apt-get update -y &amp;&amp; apt-get install openssh-client -y )'</span>
  - eval $(ssh-agent -s)
  - ssh-add &lt;(echo <span style="color: #2d9574;">"$GIT_SSH_PRIV_KEY"</span>)
  - git config --global user.email <span style="color: #2d9574;">"kll@dev.terastrm.net"</span>
  - git config --global user.name <span style="color: #2d9574;">"Mr. Robot"</span>
  - mkdir -p ~/.ssh
  - cat gitlab-known-hosts &gt;&gt; ~/.ssh/known_hosts
</pre>
</div>

<p>
First ssh-agent is installed if it isn't already. We then start up ssh-agent and add the key stored in the environment variable <code>GIT_SSH_PRIV_KEY</code> (which we setup previously). The git user information is set and we finally create .ssh and add the known host information about our GitLab server to our known_hosts file. You can generate the <code>gitlab-known-hosts</code> file using the following command:
</p>

<div class="org-src-container">
<pre class="src src-shell">ssh-keyscan my-gitlab-machine &gt;&gt; gitlab-known-hosts
</pre>
</div>

<p>
As the name implies the before_script is run before the main <code>script</code> part and the ssh-agent we started in the before_script will also continue to run for the duration of the job. The ssh-agent information is stored in some environment variables which are carried across from the before_script into the main script, enabling it to work. It's also possible to put this SSH setup in the main script, I just thought it looked cleaner splitting it up between before_script and script. Note however that it appears that after_script behaves differently so while it's possible to pass environment vars from before_script to script, they do not appear to be passed to after_script. Thus, if you want to do git magic in the after_script you also need to perform the SSH setup in the after_script.
</p>

<p>
This brings us to the main script. In GitLab CI we already have a checked out clone of our project but that was automatically checked out by the CI system through the use of magic (it actually happens in a container previous to the one we are operating in, that has some special credentials) so we can't really use it, besides, checking out other branches and stuff would be really weird as it disrupts the code we are using to do this, since that's available in the git repository that's checked out. It's all rather meta.
</p>

<p>
Anyway, we'll be checking out a new git repository where we'll do our work, then change the current directory to the newly checked out repository after which we'll check out the <code>ts</code> branch, do the rebase and push it back to the origin remote.
</p>

<div class="org-src-container">
<pre class="src src-yaml">- git clone git@gitlab.dev.terastrm.net:${CI_PROJECT_PATH}.git
- cd ${CI_PROJECT_NAME}
- git checkout ts
- git rebase master
- git push --force origin ts
</pre>
</div>

<p>
&#x2026; and that's it. We've now automated the rebasing of a branch. Occasionally it will fail due to problems rebasing (most commonly merge conflicts) but then you can just step in and do the above steps manually and be interactively prompted on how to handle conflicts.
</p>
</div>
</div>


<div id="outline-container-org9fbda01" class="outline-2">
<h2 id="org9fbda01"><span class="section-number-2">2</span> Automatic merge requests</h2>
<div class="outline-text-2" id="text-2">
<p>
All the repositories I mentioned in the previous section are NEDs, a form of driver for how to communicate with a certain type of device, for Cisco NSO (a network orchestration system). We package up Cisco NSO, together with these NEDs and our own service code, in a container image. The build of that image is performed in CI and we use a repository called <code>nso-ts</code> to control that work.
</p>

<p>
The NEDs are compiled in CI from their own repository and the binaries are saved as build artifacts. Those artifacts can then be pulled in the CI build of <code>nso-ts</code>. The reference to which artifact to include is the name of the NED as well as the build version. The version number of the NED is nothing more than the pipeline id (which you'll access in CI as <code>${CI_PIPELINE_ID}</code>) and by including a specific version of the NED, rather than just use "latest" we gain a much more consistent and reproducible build.
</p>

<p>
Whenever a NED is updated a new build is run that produces new binary artifacts. We probably want to use the new version but not before we test it out in CI. The actual versions of NEDs to use is stored in a file in the <code>nso-ts</code> repository and follows a simple format, like this:
</p>

<div class="org-src-container">
<pre class="src src-text">ned-iosxr-yang=1234
ned-junos-yang=4567
...
</pre>
</div>

<p>
Thus, updating the version to use is a simple job to just rewrite this text file and replace the version number with a given CI_PIPELINE_ID version number. Again, while NED updates are more seldom than updates to <code>nso-ts</code>, they do occur and handling it is bloody boring. Enter automation!
</p>

<div class="org-src-container">
<pre class="src src-yaml"><span style="color: #7590db;">git-open-mr</span>:
  <span style="color: #7590db;">image</span>: gitlab.dev.terastrm.net:4567/terastream/cisco-nso/ci-cisco-nso:4.2.3
  <span style="color: #7590db;">stage</span>: git-robot
  <span style="color: #7590db;">only</span>:
    - ts
  <span style="color: #7590db;">tags</span>:
    - no-docker
  <span style="color: #7590db;">allow_failure</span>: <span style="color: #a45bad;">true</span>
  <span style="color: #7590db;">before_script</span>:
    - <span style="color: #2d9574;">'which ssh-agent || ( apt-get update -y &amp;&amp; apt-get install openssh-client -y )'</span>
    - eval $(ssh-agent -s)
    - ssh-add &lt;(echo <span style="color: #2d9574;">"$GIT_SSH_PRIV_KEY"</span>)
    - git config --global user.email <span style="color: #2d9574;">"kll@dev.terastrm.net"</span>
    - git config --global user.name <span style="color: #2d9574;">"Mr. Robot"</span>
    - mkdir -p ~/.ssh
    - cat gitlab-known-hosts &gt;&gt; ~/.ssh/known_hosts
  <span style="color: #7590db;">script</span>:
    - git clone git@gitlab.dev.terastrm.net:TeraStream/nso-ts.git
    - cd nso-ts
    - git checkout -b robot-update-${CI_PROJECT_NAME}-${CI_PIPELINE_ID}
    - for LIST_FILE in $(ls ../ned-package-list.* | xargs -n1 basename); do NED_BUILD=$(cat ../${LIST_FILE}); sed -i packages/${LIST_FILE} -e <span style="color: #2d9574;">"s/^${CI_PROJECT_NAME}.*/${CI_PROJECT_NAME}=${NED_BUILD}/"</span>; done
    - git diff
    - git commit -a -m <span style="color: #2d9574;">"Use ${CI_PROJECT_NAME} artifacts from pipeline ${CI_PIPELINE_ID}"</span>
    - git push origin robot-update-${CI_PROJECT_NAME}-${CI_PIPELINE_ID}
    - HOST=${CI_PROJECT_URL} CI_COMMIT_REF_NAME=robot-update-${CI_PROJECT_NAME}-${CI_PIPELINE_ID} CI_PROJECT_NAME=TeraStream/nso-ts GITLAB_USER_ID=${GITLAB_USER_ID} PRIVATE_TOKEN=${PRIVATE_TOKEN} ../open-mr.sh
</pre>
</div>

<p>
So this time around we check out a git repository into a separate working directory again, it's just that it's not the same git repository as we are running on simply because we are trying to do changes to a repository that is using the output of the repository we are running on. It doesn't make much of a difference in terms of our process. At the end, once we've modified the files we are interested in, we also open up a merge request on the target repository. Here we can see the MR (which is merged already) to use a new version of the NED <code>ned-snabbaftr-yang</code>.
</p>


<figure>
<img src="images/gitbot-ned-update-mr.png" alt="gitbot-ned-update-mr.png">

</figure>

<p>
What we end up with is that whenever there is a new version of a NED, a merge request is opened on our <code>nso-ts</code> repository to start using the new NED. That merge request is using changes on a new branch and CI will obviously run for <code>nso-ts</code> on this new branch, which will then test all of our code using the new version of the NED. We get a form of version pinning, with the form of explicit changes that it entails, yet it's a rather convenient and non-cumbersome environment to work with thanks to all the automation.
</p>
</div>
</div>


<div id="outline-container-org5356ff9" class="outline-2">
<h2 id="org5356ff9"><span class="section-number-2">3</span> Getting fancy</h2>
<div class="outline-text-2" id="text-3">
<p>
While automatically opening an MR is sweet&#x2026; we can do <del>better</del> fancier. Our <code>nso-ts</code> repository is based on Cisco NSO (Tail-F NCS), or actually the <code>nso-ts</code> docker image is based on a <code>cisco-nso</code> docker image that we build in a separate repository. We put the version of NSO as the tag of the <code>cisco-nso</code> docker image, so <code>cisco-nso:4.2.3</code> means Cisco NSO 4.2.3. This is what the <code>nso-ts</code> Dockerfile will use in its <code>FROM</code> line.
</p>

<p>
Upgrading to a new version of NCS is thus just a matter of rewriting the tag&#x2026; but what version of NCS should we use? There's 4.2.4, 4.3.3, 4.4.2 and 4.4.3 available and I'm sure there's some other version that will pop up its evil head soon enough. How do I know which version to pick? And will our current code work with the new version?
</p>

<p>
To help myself in the choice of NCS version I implemented a script that gets the README file of a new NCS version and cross references the list of fixed issues with the issues that we currently have open in the Tail-F issue tracker. The output of this is included in the merge request description so when I look at the merge request I immediately know what bugs are fixed or new features are implemented by moving to a specific version. Having this automatically generated for us is&#x2026; well, it's just damn convenient. Together with actually testing our code with the new version of NCS gives us confidence that an upgrade will be smooth.
</p>

<p>
Here are the merge requests currently opened by our GitBot
</p>


<figure>
<img src="images/gitbot-list-of-mrs.png" alt="gitbot-list-of-mrs.png">

</figure>

<p>
We can see how the system have generated MRs to move to all the different versions of NSO currently available. As we are currently on NSO v4.2.3 there's no underlying branch for that one leading to an errored build. For the other versions though, there is a branch per version that executes the CI pipeline to make sure all our code runs with this version of NSO.
</p>

<p>
As there have been a few commits today, these branches are behind by 6 commits but will be rebased this night so we get an up to date picture if they work or not with our latest code.
</p>


<figure>
<img src="images/gitbot-nso-branches.png" alt="gitbot-nso-branches.png">

</figure>

<p>
If we go back and look at one of these merge requests, we can see how the description includes information about what issues that we currently have open with Cisco / Tail-F would be solved by moving to this version.
</p>


<figure>
<img src="images/gitbot-nso-mr-description-424.png" alt="gitbot-nso-mr-description-424.png">

</figure>

<p>
This is from v4.2.4 and as we are currently on v4.2.3 we can see that there are only a few fixed issues.
</p>

<p>
If we instead look at v4.4.3 we can see that the list is significantly longer.
<img src="images/gitbot-nso-mr-description-443.png" alt="gitbot-nso-mr-description-443.png">
</p>

<p>
Pretty sweet, huh? :)
</p>

<p>
As this involves a bit more code I've put the relevant files in a <a href="https://gist.github.com/plajjan/42592665afd5ae045ee36220e19919aa">GitHub gist</a>.
</p>
</div>
</div>

<div id="outline-container-orgb3f4e3c" class="outline-2">
<h2 id="orgb3f4e3c"><span class="section-number-2">4</span> This is the end</h2>
<div class="outline-text-2" id="text-4">
<p>
If you are reading this, chances are you already have your reasons for why you want to automate some git operation. Hopefully I've provided some inspiration for how to do it.
</p>

<p>
If not or if you just want to discuss the topic in general or have more specific questions about our setup, please do reach out to me on Twitter.
</p>
</div>
</div>
<div class="taglist"><a href="tags.html">Tags</a>: <a href="tag-git.html">git</a> <a href="tag-automation.html">automation</a> </div>]]></description>
  <category>git</category>
  <category>automation</category>
  <link>https://plajjan.github.io/2017-06-29-automating-git.html</link>
  <pubDate>Thu, 29 Jun 2017 00:00:00 +0200</pubDate>
</item>
<item>
  <title>Validating data with YANG</title>
  <description><![CDATA[
<p>
Every now and then I hear about how difficult it is to use YANG to actually validate any data (we call this instance data). Since we in the TeraStream team do this quite a lot I thought I'd share how it can be done. This is using a process that we also employ in our CI pipeline.
</p>

<p>
Let's first write a simple YANG model:
</p>
<div class="org-src-container">
<pre class="src src-yang"><span style="color: #4f97d7; font-weight: bold;">module</span> <span style="color: #ce537a; font-weight: bold;">tubecats</span> <span style="color: #4f97d7;">{</span>
    <span style="color: #4f97d7; font-weight: bold;">namespace</span> <span style="color: #2d9574;">"http://plajjan.github.io/ns/yang/tubecats"</span>;
    <span style="color: #4f97d7; font-weight: bold;">prefix</span> <span style="color: #ce537a; font-weight: bold;">tc</span>;

    <span style="color: #4f97d7; font-weight: bold;">revision</span> <span style="color: #a45bad;">2017-03-15</span> <span style="color: #bc6ec5;">{</span>
        <span style="color: #4f97d7; font-weight: bold;">description</span> <span style="color: #2d9574;">"First and only version"</span>;
    <span style="color: #bc6ec5;">}</span>

    <span style="color: #4f97d7; font-weight: bold;">container</span> <span style="color: #ce537a; font-weight: bold;">internet</span> <span style="color: #bc6ec5;">{</span>
        <span style="color: #4f97d7; font-weight: bold;">list</span> <span style="color: #ce537a; font-weight: bold;">cat</span> <span style="color: #2d9574;">{</span>
            <span style="color: #4f97d7; font-weight: bold;">key</span> <span style="color: #ce537a; font-weight: bold;">name</span>;
            <span style="color: #4f97d7; font-weight: bold;">leaf</span> <span style="color: #ce537a; font-weight: bold;">name</span> <span style="color: #67b11d;">{</span>
                <span style="color: #4f97d7; font-weight: bold;">type</span> <span style="color: #ce537a; font-weight: bold;">string</span>;
            <span style="color: #67b11d;">}</span>
        <span style="color: #2d9574;">}</span>
    <span style="color: #bc6ec5;">}</span>
<span style="color: #4f97d7;">}</span>
</pre>
</div>

<p>
We all know the Internet is full of cats so I created a list under the <code>internet</code> container so we can fill it up with cats. The only valid leaf value of each cat list entry is its name.
</p>

<p>
Let's start off by actually making sure that our YANG model is valid. We can use the tool called <code>pyang</code> to do this. If you don't have pyang installed you can install it with <code>pip install pyang</code>.
</p>

<div class="org-src-container">
<pre class="src src-shell">kll@kll:~/yang-test$ pyang tubecats.yang
kll@kll:~/yang-test$ pyang --ietf tubecats.yang
tubecats.yang:1: warning: RFC <span style="color: #a45bad;">6087:</span> <span style="color: #a45bad;">4.1:</span> the module name should start with one of the strings <span style="color: #2d9574;">"ietf-"</span> or <span style="color: #2d9574;">"iana-"</span>
tubecats.yang:1: error: RFC <span style="color: #a45bad;">6087:</span> <span style="color: #a45bad;">4.7:</span> statement <span style="color: #2d9574;">"module"</span> must have a <span style="color: #2d9574;">"contact"</span> substatement
tubecats.yang:1: error: RFC <span style="color: #a45bad;">6087:</span> <span style="color: #a45bad;">4.7:</span> statement <span style="color: #2d9574;">"module"</span> must have a <span style="color: #2d9574;">"organization"</span> substatement
tubecats.yang:1: error: RFC <span style="color: #a45bad;">6087:</span> <span style="color: #a45bad;">4.7:</span> statement <span style="color: #2d9574;">"module"</span> must have a <span style="color: #2d9574;">"description"</span> substatement
tubecats.yang:2: warning: RFC <span style="color: #a45bad;">6087:</span> <span style="color: #a45bad;">4.8:</span> namespace value should be <span style="color: #2d9574;">"urn:ietf:params:xml:ns:yang:tubecats"</span>
tubecats.yang:5: error: RFC <span style="color: #a45bad;">6087:</span> <span style="color: #a45bad;">4.7:</span> statement <span style="color: #2d9574;">"revision"</span> must have a <span style="color: #2d9574;">"reference"</span> substatement
tubecats.yang:9: error: RFC <span style="color: #a45bad;">6087:</span> <span style="color: #a45bad;">4.12:</span> statement <span style="color: #2d9574;">"container"</span> must have a <span style="color: #2d9574;">"description"</span> substatement
tubecats.yang:10: error: RFC <span style="color: #a45bad;">6087:</span> <span style="color: #a45bad;">4.12:</span> statement <span style="color: #2d9574;">"list"</span> must have a <span style="color: #2d9574;">"description"</span> substatement
tubecats.yang:12: error: RFC <span style="color: #a45bad;">6087:</span> <span style="color: #a45bad;">4.12:</span> statement <span style="color: #2d9574;">"leaf"</span> must have a <span style="color: #2d9574;">"description"</span> substatement
</pre>
</div>

<p>
The <code>--ietf</code> argument makes pyang a little more strict and adheres to a bunch of IETF guidelines on how to write YANG models. Since we aren't writing an IETF model and don't have an IETF namespace for it, we'll get some warnings and errors. Anyway, our model is sound since it succeeded without <code>--ietf</code>.
</p>

<p>
Ok, so we have a valid model, let's write some data that adheres to it:
</p>
<div class="org-src-container">
<pre class="src src-xml">&lt;<span style="color: #4f97d7;">ns0</span>:<span style="color: #bc6ec5; font-weight: bold;">data</span> <span style="color: #4f97d7;">xmlns</span>:<span style="color: #7590db;">ns0</span>=<span style="color: #2d9574;">"urn:ietf:params:xml:ns:netconf:base:1.0"</span>&gt;
    &lt;<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">internet</span> <span style="color: #4f97d7;">xmlns</span>:<span style="color: #7590db;">tc</span>=<span style="color: #2d9574;">"http://plajjan.github.io/ns/yang/tubecats"</span>&gt;
        &lt;<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">cat</span>&gt;
            &lt;<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">name</span>&gt;jingles&lt;/<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">name</span>&gt;
        &lt;/<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">cat</span>&gt;
        &lt;<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">cat</span>&gt;
            &lt;<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">name</span>&gt;fluffy&lt;/<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">name</span>&gt;
        &lt;/<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">cat</span>&gt;
    &lt;/<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">internet</span>&gt;
&lt;/<span style="color: #4f97d7;">ns0</span>:<span style="color: #bc6ec5; font-weight: bold;">data</span>&gt;
</pre>
</div>

<p>
And now, to validate we use yang2dsdl which is shipped together with pyang:
</p>
<div class="org-src-container">
<pre class="src src-shell">kll@kll:~/yang-test$ /usr/bin/yang2dsdl -v data.xml tubecats.yang
== Generating RELAX NG schema <span style="color: #2d9574;">'./tubecats-data.rng'</span>
Done.

== Generating Schematron schema <span style="color: #2d9574;">'./tubecats-data.sch'</span>
Done.

== Generating DSRL schema <span style="color: #2d9574;">'./tubecats-data.dsrl'</span>
Done.

== Validating grammar and datatypes ...
data.xml validates

== Adding default values... done.

== Validating semantic constraints ...
No errors found.
kll@kll:~/yang-test$
</pre>
</div>

<p>
To make sure that our toolchain is working here we'll introduce an error in our
data file, namely a second node under one of the cat list entries:
</p>
<div class="org-src-container">
<pre class="src src-xml">&lt;<span style="color: #4f97d7;">ns0</span>:<span style="color: #bc6ec5; font-weight: bold;">data</span> <span style="color: #4f97d7;">xmlns</span>:<span style="color: #7590db;">ns0</span>=<span style="color: #2d9574;">"urn:ietf:params:xml:ns:netconf:base:1.0"</span>&gt;
    &lt;<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">internet</span> <span style="color: #4f97d7;">xmlns</span>:<span style="color: #7590db;">tc</span>=<span style="color: #2d9574;">"http://plajjan.github.io/ns/yang/tubecats"</span>&gt;
        &lt;<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">cat</span>&gt;
            &lt;<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">name</span>&gt;jingles&lt;/<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">name</span>&gt;
        &lt;/<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">cat</span>&gt;
        &lt;<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">cat</span>&gt;
            &lt;<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">name</span>&gt;fluffy&lt;/<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">name</span>&gt;
            &lt;<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">foo</span>&gt;bar&lt;/<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">foo</span>&gt;
        &lt;/<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">cat</span>&gt;
    &lt;/<span style="color: #4f97d7;">tc</span>:<span style="color: #bc6ec5; font-weight: bold;">internet</span>&gt;
&lt;/<span style="color: #4f97d7;">ns0</span>:<span style="color: #bc6ec5; font-weight: bold;">data</span>&gt;
</pre>
</div>

<p>
lo and behold as this time around it complains loudly:
</p>
<div class="org-src-container">
<pre class="src src-shell">kll@kll:~/yang-test$ /usr/bin/yang2dsdl -v data.xml tubecats.yang
== Generating RELAX NG schema <span style="color: #2d9574;">'./tubecats-data.rng'</span>
Done.

== Generating Schematron schema <span style="color: #2d9574;">'./tubecats-data.sch'</span>
Done.

== Generating DSRL schema <span style="color: #2d9574;">'./tubecats-data.dsrl'</span>
Done.

== Validating grammar and datatypes ...
data.xml:8: element foo: Relax-NG validity error : Did not expect element foo there
data.xml fails to validate
kll@kll:~/yang-test$
</pre>
</div>

<p>
So that's how you can validate your instance data with a YANG model!
</p>

<p>
The <code>&lt;data&gt;</code> tag at the root of the XML document is part of many NETCONF commands. It's also possible to ask it to validate data that is wrapped in other nodes like edit-config, get-reply etc. If you are just trying to write some data on your own and don't want to think about NETCONF you do still have to add that extra <code>&lt;data&gt;</code> tag at the root to get validation to complete&#x2026; it is a bit NETCONF centric after all.
</p>
<div class="taglist"><a href="tags.html">Tags</a>: <a href="tag-yang.html">YANG</a> </div>]]></description>
  <category>YANG</category>
  <link>https://plajjan.github.io/2017-03-15-validating-data-with-YANG.html</link>
  <pubDate>Wed, 15 Mar 2017 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Interoperable 100G DWDM equipment</title>
  <description><![CDATA[

<div id="outline-container-org3eb1f10" class="outline-2">
<h2 id="org3eb1f10"><span class="section-number-2">1</span> Interoperable coherent 100G DWDM</h2>
<div class="outline-text-2" id="text-1">
<p>
This is a non-comprehensive list of interoperable coherent 100G DWDM equipment.
</p>

<table>


<colgroup>
<col  class="org-left">

<col  class="org-left">

<col  class="org-left">

<col  class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Vendor</th>
<th scope="col" class="org-left">Model</th>
<th scope="col" class="org-left">Description</th>
<th scope="col" class="org-left">Tested</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">Juniper</td>
<td class="org-left">MIC3-100G-DWDM</td>
<td class="org-left">1x100GE IPoDWDM line card for MX</td>
<td class="org-left">TS</td>
</tr>
</tbody>
</table>
</div>
</div>


<div id="outline-container-org911a410" class="outline-2">
<h2 id="org911a410"><span class="section-number-2">2</span> Coherent 100G DWDM without interop</h2>
<div class="outline-text-2" id="text-2">
<p>
This is a non-comprehensive list of equipment that supports coherent 100G DWDM but does <b><b>NOT</b></b> support standardised FEC and mapping:
</p>

<table>


<colgroup>
<col  class="org-left">

<col  class="org-left">

<col  class="org-left">

<col  class="org-left">
</colgroup>
<thead>
<tr>
<th scope="col" class="org-left">Vendor</th>
<th scope="col" class="org-left">Model</th>
<th scope="col" class="org-left">Description</th>
<th scope="col" class="org-left">Tested</th>
</tr>
</thead>
<tbody>
<tr>
<td class="org-left">Juniper</td>
<td class="org-left">P1-PTX-2-100G-WDM</td>
<td class="org-left">2x100G IPoDWDM module for PTX</td>
<td class="org-left">&#xa0;</td>
</tr>

<tr>
<td class="org-left">Juniper</td>
<td class="org-left">PTX-5-100G-WDM</td>
<td class="org-left">5x100G IPoDWDM module for PTX</td>
<td class="org-left">&#xa0;</td>
</tr>
</tbody>
</table>
</div>
</div>
<div class="taglist"><a href="tags.html">Tags</a>: <a href="tag-terastream,.html">TeraStream,</a> <a href="tag-100g.html">100G</a> <a href="tag-dwdm.html">DWDM</a> </div>]]></description>
  <category>TeraStream,</category>
  <category>100G</category>
  <category>DWDM</category>
  <link>https://plajjan.github.io/2017-03-15-interoperable-100G-dwdm-equipment.html</link>
  <pubDate>Wed, 15 Mar 2017 00:00:00 +0100</pubDate>
</item>
<item>
  <title>Pictures from the 100G DWDM interop lab</title>
  <description><![CDATA[
<p>
These are some pictures from the coherent 100G DWDM interoperability tests performed in the TeraStream lab. Read the <a href="file:///interoperable-100G">full story</a> and look at the <a href="file:///100G-dwdm-configuration">router configuration</a>.
</p>

<div id="outline-container-orgf307a14" class="outline-2">
<h2 id="orgf307a14"><span class="section-number-2">1</span> 1500km fiber test path</h2>
<div class="outline-text-2" id="text-1">
<p>
All tests have been completed over a DWDM system in our lab. It can be slightly reconfigured but have been at least 1500km in all the tests.
</p>

<p>
The logical topology of our 1600km fiber path <img src="images/terastream-lab-1600km-fiber-link-topology.jpg" alt="terastream-lab-1600km-fiber-link-topology.jpg">
</p>

<p>
It's amplified with these EDFAs every 80km:
<img src="images/terastream-lab-1600km-fiber-link-dwdm-amps.jpg" alt="terastream-lab-1600km-fiber-link-dwdm-amps.jpg">
</p>

<p>
No RAMANs! Here's the whole amp rack:
</p>

<figure>
<img src="images/terastream-lab-1600km-fiber-link-dwdm-rack.jpg" alt="terastream-lab-1600km-fiber-link-dwdm-rack.jpg" width="880px">

</figure>

<p>
The 1600km of fiber rolls
</p>

<figure>
<img src="images/terastream-lab-1600km-fiber-link-fiber-rack.jpg" alt="terastream-lab-1600km-fiber-link-fiber-rack.jpg" width="880px">

</figure>

<p>
In a previous, slightly less carrier-grade, incarnation:
</p>

<figure>
<img src="images/terastream-lab-1600km-fiber-link-old-dwdm-fiber.jpg" alt="terastream-lab-1600km-fiber-link-old-dwdm-fiber.jpg" width="880px">

</figure>
</div>
</div>


<div id="outline-container-org69656e3" class="outline-2">
<h2 id="org69656e3"><span class="section-number-2">2</span> Router DWDM linecards</h2>
<div class="outline-text-2" id="text-2">
</div>
<div id="outline-container-orgd11d05e" class="outline-3">
<h3 id="orgd11d05e"><span class="section-number-3">2.1</span> Juniper</h3>
<div class="outline-text-3" id="text-2-1">
<p>
The first Juniper implementation was a pure beta build with the optical parts in a separate chassis and grey 100G-SR10 link back to the MX960. It looks more like a transponder but management happened exclusively from the router and the components could later simply be integrated on a linecard instead of in a separate chassis. I believe four of these were built all in all of which <del>two</del> three (one broke, so we got a replacement) ended up with us.
<img src="images/terastream-lab-juniper-100G-beta-box.jpg" alt="terastream-lab-juniper-100G-beta-box.jpg">
</p>

<p>
Juniper have since released a proper linecard. It's a single port 100G card and instead of utilizing a CFP they have shrunk it down to a CFP2. Specifically CFP2-ACO which means it's analog and all the DSP magic is happening on the linecard unlike the earlier CFP which had pretty beefy DSPs of its own.
</p>


<figure>
<img src="images/terastream-lab-juniper-1port-dwdm.jpg" alt="terastream-lab-juniper-1port-dwdm.jpg">

</figure>

<p>
We still have one of the first generation "transponders" from Juniper in use as part of a PNI (private peering link) with NorduNet (AS2603). NorduNet is running Juniper routers and they have it connected to their router in Hamburg which is then linked over a piece of metro dark fibre to a TeraStream Nokia 7750 router.
</p>
</div>
</div>

<div id="outline-container-org7bb05a8" class="outline-3">
<h3 id="org7bb05a8"><span class="section-number-3">2.2</span> Nokia</h3>
<div class="outline-text-3" id="text-2-2">
<p>
Nokia, previously Alcatel-Lucent (previously TiMetra), were one of the early partners behind the 100G DWDM standard and were also early with putting together a line card for their 7750 router:
</p>


<figure>
<img src="images/terastream-lab-alu-dwdm-frontplate.jpg" alt="terastream-lab-alu-dwdm-frontplate.jpg">

</figure>

<p>
They are now also rolling new 2-port cards for the 7950, which we're about to
install. Here's me with one of those cards:
</p>


<figure>
<img src="images/me-holding-nokia-100G-linecard.png" alt="me-holding-nokia-100G-linecard.png">

</figure>

<p>
And installed in router (the one on the left - the right one is for grey optics):
</p>


<figure>
<img src="images/terastream-lab-nokia-7950-dwdm.jpg" alt="terastream-lab-nokia-7950-dwdm.jpg">

</figure>
</div>
</div>

<div id="outline-container-orgca9b641" class="outline-3">
<h3 id="orgca9b641"><span class="section-number-3">2.3</span> Cisco</h3>
<div class="outline-text-3" id="text-2-3">
<p>
Cisco has a couple of different generations. Here's one of the first for the ASR9000 router, which has since been discontinued:
</p>


<figure>
<img src="images/terastream-lab-cisco-dwdm-linecards.jpg" alt="terastream-lab-cisco-dwdm-linecards.jpg">

</figure>

<p>
There is also a transponder for the ONS15454 that integrates with the router, much like the Juniper solution, so the DWDM configuration can be managed by the router but the optical components are situated in a ONS15454 chassis. I don't currently have a picture of this however.
</p>

<p>
Laserbeak is Cisco's latest addition to the family of 100G cards that support <i>the standard</i>, here in the middle (also with 20x10GE ports);
</p>


<figure>
<img src="images/terastream-lab-cisco-laserbeak.jpg" alt="terastream-lab-cisco-laserbeak.jpg">

</figure>

<p>
The Laserbeak card also uses the more modern CFP2-ACO optical modules.
</p>
</div>
</div>

<div id="outline-container-orge664f21" class="outline-3">
<h3 id="orge664f21"><span class="section-number-3">2.4</span> Huawei</h3>
<div class="outline-text-3" id="text-2-4">
<p>
Last but not least we have stack of Huawei routers. The 2-port card in the first two slots is the 100G card:
<img src="images/terastream-lab-huawei-ne40e_1.jpg" alt="terastream-lab-huawei-ne40e_1.jpg">
</p>
</div>
</div>
</div>
<div class="taglist"><a href="tags.html">Tags</a>: <a href="tag-terastream,.html">TeraStream,</a> <a href="tag-100g.html">100G</a> <a href="tag-dwdm.html">DWDM</a> </div>]]></description>
  <category>TeraStream,</category>
  <category>100G</category>
  <category>DWDM</category>
  <link>https://plajjan.github.io/2016-09-23-pictures-from-100G-dwdm-interop-lab.html</link>
  <pubDate>Fri, 23 Sep 2016 00:00:00 +0200</pubDate>
</item>
<item>
  <title>Configure your 100G DWDM linecard for interop!</title>
  <description><![CDATA[
<p>
This is how you configure your shiny new 100G router port for interoperability according to <a href="file:///assets/docs/standards/100G-long-haul.pdf"><i>the standard</i></a>. Read the <a href="file:///interoperable-100G">full story</a> and look at the <a href="file:///pictures-from-100G-dwdm-interop-lab">pretty pictures from our 100G interop lab</a>.
</p>

<p>
The interface number is naturally an example and you need to fill in yours. The same is true for channel / frequency / wavelength and output power. I have however shown a configuration here that is the equivalent for each platform, i.e. we use a frequency if 193.4THz, which is channel 34 on Nokia, channel 54 on Huawei and wavelength 1550.12nm on Juniper. Output power is -10dBm but this is expressed in different ways, some platforms use dBm while other work in units of 0.1 dBm which means that -10dBm is equivalent to a value of -100.
</p>

<div id="outline-container-orgab29c6d" class="outline-2">
<h2 id="orgab29c6d"><span class="section-number-2">1</span> Cisco</h2>
<div class="outline-text-2" id="text-1">
<p>
Cisco IOS XR configuration for the ASR9k. Already XML formatted so you can punt
it over the NETCONF interface and have your router configured!
</p>

<div class="org-src-container">
<pre class="src src-xml">&lt;<span style="color: #bc6ec5; font-weight: bold;">interface-configurations</span> <span style="color: #4f97d7;">xmlns</span>=<span style="color: #2d9574;">"http://cisco.com/ns/yang/Cisco-IOS-XR-ifmgr-cfg"</span>&gt;
    &lt;<span style="color: #bc6ec5; font-weight: bold;">interface-configuration</span>&gt;
        &lt;<span style="color: #bc6ec5; font-weight: bold;">active</span>&gt;act&lt;/<span style="color: #bc6ec5; font-weight: bold;">active</span>&gt;
        &lt;<span style="color: #bc6ec5; font-weight: bold;">interface-name</span>&gt;dwdm0/1/0/20/0&lt;/<span style="color: #bc6ec5; font-weight: bold;">interface-name</span>&gt;
        &lt;<span style="color: #bc6ec5; font-weight: bold;">dwdm</span> <span style="color: #4f97d7;">xmlns</span>=<span style="color: #2d9574;">"http://cisco.com/ns/yang/Cisco-IOS-XR-dwdm-ui-cfg"</span>&gt;
            &lt;<span style="color: #bc6ec5; font-weight: bold;">g709</span>&gt;
                &lt;<span style="color: #bc6ec5; font-weight: bold;">fec</span>&gt;
                    &lt;<span style="color: #bc6ec5; font-weight: bold;">fec-mode</span>&gt;high-gain-multivendor-hd&lt;/<span style="color: #bc6ec5; font-weight: bold;">fec-mode</span>&gt;
                &lt;/<span style="color: #bc6ec5; font-weight: bold;">fec</span>&gt;
                &lt;<span style="color: #bc6ec5; font-weight: bold;">enable</span>&gt;true&lt;/<span style="color: #bc6ec5; font-weight: bold;">enable</span>&gt;
            &lt;/<span style="color: #bc6ec5; font-weight: bold;">g709</span>&gt;
            &lt;<span style="color: #bc6ec5; font-weight: bold;">wavelength</span>&gt;
                &lt;<span style="color: #bc6ec5; font-weight: bold;">wave-channel</span>&gt;19340&lt;/<span style="color: #bc6ec5; font-weight: bold;">wave-channel</span>&gt;
                &lt;<span style="color: #bc6ec5; font-weight: bold;">wave-channel-number</span>&gt;channel-frequency&lt;/<span style="color: #bc6ec5; font-weight: bold;">wave-channel-number</span>&gt;
            &lt;/<span style="color: #bc6ec5; font-weight: bold;">wavelength</span>&gt;
            &lt;<span style="color: #bc6ec5; font-weight: bold;">transport-admin-state</span>&gt;in-service-config-allowed&lt;/<span style="color: #bc6ec5; font-weight: bold;">transport-admin-state</span>&gt;
            &lt;<span style="color: #bc6ec5; font-weight: bold;">transmit-power</span>&gt;-100&lt;/<span style="color: #bc6ec5; font-weight: bold;">transmit-power</span>&gt;
        &lt;/<span style="color: #bc6ec5; font-weight: bold;">dwdm</span>&gt;
    &lt;/<span style="color: #bc6ec5; font-weight: bold;">interface-configuration</span>&gt;
&lt;/<span style="color: #bc6ec5; font-weight: bold;">interface-configurations</span>&gt;
</pre>
</div>
</div>
</div>

<div id="outline-container-orga86528f" class="outline-2">
<h2 id="orga86528f"><span class="section-number-2">2</span> Huawei</h2>
<div class="outline-text-2" id="text-2">
<p>
CLI conf for Huawei since their NETCONF interface is currently an abomination.
</p>

<div class="org-src-container">
<pre class="src src-text">controller Wdm 1/0/0
 fec enhanced
#
interface 100GE 1/0/0
 optical-tx-power target -100
 wavelength-channel 54
#
</pre>
</div>
</div>
</div>

<div id="outline-container-orga4cd001" class="outline-2">
<h2 id="orga4cd001"><span class="section-number-2">3</span> Juniper</h2>
<div class="outline-text-2" id="text-3">
<p>
Juniper calls <i>the standard</i> "hgfec", here expressed in XML that you can send over a NETCONF interface!
</p>

<div class="org-src-container">
<pre class="src src-xml">&lt;<span style="color: #bc6ec5; font-weight: bold;">configuration</span> <span style="color: #4f97d7;">xmlns</span>=<span style="color: #2d9574;">"http://xml.juniper.net/xnm/1.1/xnm"</span>&gt;
    &lt;<span style="color: #bc6ec5; font-weight: bold;">interfaces</span>&gt;
        &lt;<span style="color: #bc6ec5; font-weight: bold;">interface</span>&gt;
            &lt;<span style="color: #bc6ec5; font-weight: bold;">name</span>&gt;et-10/0/0&lt;/<span style="color: #bc6ec5; font-weight: bold;">name</span>&gt;
            &lt;<span style="color: #bc6ec5; font-weight: bold;">optics-options</span>&gt;
                &lt;<span style="color: #bc6ec5; font-weight: bold;">wavelength</span>&gt;1550.12&lt;/<span style="color: #bc6ec5; font-weight: bold;">wavelength</span>&gt;
                &lt;<span style="color: #bc6ec5; font-weight: bold;">tx-power</span>&gt;-10&lt;/<span style="color: #bc6ec5; font-weight: bold;">tx-power</span>&gt;
            &lt;/<span style="color: #bc6ec5; font-weight: bold;">optics-options</span>&gt;
            &lt;<span style="color: #bc6ec5; font-weight: bold;">otn-options</span>&gt;
                &lt;<span style="color: #bc6ec5; font-weight: bold;">laser-enable</span>&gt;
                &lt;<span style="color: #bc6ec5; font-weight: bold;">fec</span>&gt;hgfec&lt;/<span style="color: #bc6ec5; font-weight: bold;">fec</span>&gt;
                &lt;<span style="color: #bc6ec5; font-weight: bold;">rate</span>&gt;otu4&lt;/<span style="color: #bc6ec5; font-weight: bold;">rate</span>&gt;
            &lt;/<span style="color: #bc6ec5; font-weight: bold;">otn-options</span>&gt;
        &lt;/<span style="color: #bc6ec5; font-weight: bold;">interface</span>&gt;
    &lt;/<span style="color: #bc6ec5; font-weight: bold;">interfaces</span>&gt;
&lt;/<span style="color: #bc6ec5; font-weight: bold;">configuration</span>&gt;
</pre>
</div>
</div>
</div>

<div id="outline-container-orgaa6c0f3" class="outline-2">
<h2 id="orgaa6c0f3"><span class="section-number-2">4</span> Nokia</h2>
<div class="outline-text-2" id="text-4">
<p>
Here's how to configure a port on Nokia SROS. "interop2" is the magic name for the interoperable FEC and bit mapping:
</p>

<div class="org-src-container">
<pre class="src src-text">port 1/2/3
    otu
    dwdm
        channel 34
        coherent
            channel 34
            compatibility interop2
            target-power -10
</pre>
</div>
</div>
</div>
<div class="taglist"><a href="tags.html">Tags</a>: <a href="tag-terastream,.html">TeraStream,</a> <a href="tag-100g.html">100G</a> <a href="tag-dwdm.html">DWDM</a> </div>]]></description>
  <category>TeraStream,</category>
  <category>100G</category>
  <category>DWDM</category>
  <link>https://plajjan.github.io/2016-09-23-100G-dwdm-configuration.html</link>
  <pubDate>Fri, 23 Sep 2016 00:00:00 +0200</pubDate>
</item>
<item>
  <title>Let there be light - interoperable 100G DWDM</title>
  <description><![CDATA[
<p>
This is the story of interoperable 100G DWDM - what we have accomplished and how
we got here.
</p>

<p>
During the summer of 2016 we, in the TeraStream team, performed a successful
test of coherent 100G DWDM linecards between routers from Juniper and Huawei. It
was the last of a long series of tests and with it, we have now verified
interoperability of coherent 100G DWDM interfaces between all of the four major
router vendors; Cisco, Huawei, Juniper and Nokia.
</p>

<p>
The standardisation work laid down by the IEEE and ITU-T have long ensured
interoperability in the networking industry, both for Ethernet (IEEE) and
various SDH (ITU-T) interfaces. However, in the land of opto all has been
dark&#x2026; since the inception of WDM networks, we have seen transponders with
proprietary technology making vendors equipment incompatible with each others.
Sometimes different ASIC generations even result in products from the same
vendor being incompatible.
</p>

<p>
Those days are now over. Cisco, Huawei, Juniper and Nokia now all produce line
cards for their routers that follow the same standard for how to do long-haul
coherent 100G DWDM.
</p>

<p>
<i>You can skip directly to the <a href="file:///pictures-from-100G-dwdm-interop-lab">pretty pictures from our lab</a> or look at how to <a href="file:///100G-dwdm-configuration">configure your router interfaces for interop</a>!</i>
</p>

<div id="outline-container-orgb538889" class="outline-2">
<h2 id="orgb538889"><span class="section-number-2">1</span> A word on optical line level codings</h2>
<div class="outline-text-2" id="text-1">
<p>
DP-QPSK is the (de-facto) standard for coherent 100G DWDM. All was fun and games in the days of 10G as OOK (On-Off Keying) was both cheap and good enough for long haul optics.
</p>

<p>
The first generation of 40G DWDM equipment was largely based on 10G technology put into overdrive. Needless to say it didn't work very well. Following this we saw a number of encoding technologies pop up with each vendor pushing their own agenda. This didn't just lead to non-interoperable products but it also resulted in sky-high prices as everyone needed their own specialised components. Among the solutions there were some vendors pushing for coherent detection but as 40G was pushing technological boundaries on a 4x10G budget, this never really took off. Too little, too late and at too high a price.
</p>

<p>
With 100G people had learnt the lesson. Coherent was the natural choice and by standardizing on a few things, like 25G lasers and gearboxes, vendors realised they would have much greater volumes and thus much lower component prices. Said and done, the Optical Internetworking Forum (OIF) declared that DP-QPSK would rule the world of 100G DWDM.
</p>
</div>
</div>

<div id="outline-container-org3c2f552" class="outline-2">
<h2 id="org3c2f552"><span class="section-number-2">2</span> The FEC and mapping mess</h2>
<div class="outline-text-2" id="text-2">
<p>
Unfortunately, using a few standardised components doesn't lead to interoperability. Here's a diagram of a coherent 100G DWDM CFP module. It's a slightly silly diagram as it shows the signal being transmitted an received by the same module but it illustrates the components both on the transmit and receive side.
</p>

<p>
<a href="file:///images/coherent-dwdm-cfp-components.png">Coherent DWDM CFP components</a>
</p>

<p>
The parts in green are standardised while red highlights proprietary components. Forward Error Correction (FEC), framing and bit mapping is performed by one or more DSPs, either located in the optical module or on the linecard and these are the areas where most proprietary algorithms take place. To achieve interoperability these algorithms needed to be defined!
</p>

<p>
Enter <a href="file:///assets/docs/standards/100G-long-haul.pdf"><i>the standard</i></a>, which describes exactly those items.
</p>
</div>
</div>

<div id="outline-container-orgd4132a0" class="outline-2">
<h2 id="orgd4132a0"><span class="section-number-2">3</span> Hard Decision "Staircase" Forward Error Correction</h2>
<div class="outline-text-2" id="text-3">
<p>
<i>The standard</i> describes a strong hard decision FEC algorithm, known as "Staircase FEC", designed by Cortina Networks (now part of Inphi).
</p>

<p>
Cortina has submitted this FEC as a proposal for standardization into ITU-T for OTU4 and beyond 100G multi vendor activity. Furthermore, Cortina intends to propose a license and royalty free fee model for use by component vendors, system manufacturers, and service providers.
</p>

<p>
There are other standardised FEC algorithms, most notably the Reed-Solomon 255,239 described in G.709 by ITU-T. While this FEC has seen widespread deployment on 10G and could potentially be used at 100G, it does not perform as well as the Cortina Staircase FEC, which would lead to a shorter reach.
</p>

<p>
The Staircase FEC has the same 7% (actually 6.7%) overhead as RS(255,239) but achieves a higher net coding gain (NCG) of &gt;9.4dB compared to roughly 6dB of RS(255,239).
</p>

<p>
It's a hard decision FEC which means it works with simple Analog-Digital Converters (ADCs) whereas a soft decision FECs requires multi-bit output from the ADC and much more processing power in the FEC DSP. Simple means less transistors which in turn translates to lower power consumption and higher production yields, thus lowering cost.
</p>

<p>
Only 20µs of latency is introduced by the Staircase FEC and it has a very low error floor at 1e-22 leading to a practical reach in excess of 1500km.
</p>
</div>
</div>


<div id="outline-container-orgf5e899f" class="outline-2">
<h2 id="orgf5e899f"><span class="section-number-2">4</span> Standardised framing and bit mapping</h2>
<div class="outline-text-2" id="text-4">
<p>
A FEC operates on block of bits and does not really need to understand the meaning of those bits, which is where the framing part comes in, in this case a standard G.709 OTU4 framing. The framing defines the start and end of our payload and includes various "overhead bits" which can be used to signal defects.
</p>

<p>
The mapping of the Staircase FEC's block of bits to G.709 OTUk frames is also defined through this standard. Through clever interleaving of bit "rows" the efficiency of the FEC is further improved by reducing the effects of "swaths of errored bits".
</p>
</div>
</div>


<div id="outline-container-orgb8550b8" class="outline-2">
<h2 id="orgb8550b8"><span class="section-number-2">5</span> TeraStream and 100G DWDM</h2>
<div class="outline-text-2" id="text-5">
<p>
Interoperable coherent 100G DWDM has been a corner stone of the TeraStream design and a requirement, based on this standard, to the vendors from day one.
</p>

<p>
Deutsche Telekom, together with the vendors, have invested considerable resources over a number of years, in the standardisation and verification of this technology and it is with joy that we can say that our work has finally paid off.
</p>

<blockquote>
<p>
Through these last tests, performed during the summer of 2016, interoperability of coherent 100G DWDM between all four major router vendors has finally been achieved.
</p>
</blockquote>

<p>
It's been an arduous task with various technical issues delaying the process. For example, clock drift due to failure to read the sync signal from the correct end, leading to alignment errors, required modification to an optical module. That modification lead to a chip respin. Respins are on the order of half a year so even the most miniscule of differences can lead to considerable delays.
</p>
</div>
</div>


<div id="outline-container-org0dcf7d8" class="outline-2">
<h2 id="org0dcf7d8"><span class="section-number-2">6</span> Now what?</h2>
<div class="outline-text-2" id="text-6">
<p>
<b>So now we have interoperable 100G DWDM, now what? What do we do with it?</b>
</p>

<p>
Having interoperable 100G DWDM is immensely useful. We have deployed 100G DWDM interfaces across the entire footprint of the TeraStream pilot networks, which includes Croatia and Germany, to enable a multi-vendor network without external DWDM components.
</p>

<p>
Here's a diagram of the logical toplogy, with a rough correlation to physical fiber paths, used by the TeraStrem pilot in Germany which is carrying these standard 100G DWDM signals.
</p>

<p>
<a href="file:///images/terastream-de-pilot-topology-2016.jpg">TeraStream DE pilot topology 2016</a>
</p>

<p>
Synchronising the technology used within a network is difficult. Doing it between multiple networks, owned by different organisations, is close to impossible, which is why interoperable 100G DWDM is such a big deal. We can now use this technology to interconnect with external networks, for example to peering partners, at 100G. You can see a 100G DWDM peering connection in Hamburg where we meet NorduNet (AS2603). NorduNet has a Juniper MX router and there's a Nokia router on the TeraStream side.
</p>

<p>
Deutsche Telekom is also part of the Telecom Infrastructure Project (TIP) initiated by Facebook and the standard 100G DWDM is now part of one of the working groups within TIP.
</p>
</div>
</div>


<div id="outline-container-orgea1d586" class="outline-2">
<h2 id="orgea1d586"><span class="section-number-2">7</span> 100G peering</h2>
<div class="outline-text-2" id="text-7">
<p>
The vast majority of peering links today are at 10G speed and using grey optics. Upgrading to 100G to meet increasing bandwidth demands presents challenges on the optical layer. While 10G is available as LR (10km), ER (40km) and ZR (80km), the selection of grey 100G optics is much more limited.
</p>

<p>
With a standard 100G DWDM interface we can now switch to using DWDM for peering interconnects. The reach, even unamplified, of these 100G DWDM links is much better than grey optics, partly due to better lasers and receivers but also thanks to FEC.
</p>

<p>
Another benefit of always having a FEC is early failure detection. With grey optics we can be dangerously close to the margin of what the receiver can detect yet have no packet loss.  Wiggling the connector or natural aging of the components can then introduce packet loss. With FEC, we know the pre-FEC BER, how many corrections we are making per second and how close to the limit of the FEC we are operating. This enables us to detect early on when we are approaching the limit and act proactively instead of reactively. In practice, it means we notify the routing system (IS-IS / BGP) of impending link failure and we can reroute traffic <b><b>before</b></b> we actually drop any packets.
</p>

<p>
TeraStream is using 100G DWDM on peering links to external partners - a feat that would be practically impossible was it not for a standardised interface. Other use cases include data center interconnects, mobile backhaul, metro distribution and so forth. Anywhere you can deploy 100G you can use interop 100G DWDM.
</p>
</div>
</div>


<div id="outline-container-org3cc8682" class="outline-2">
<h2 id="org3cc8682"><span class="section-number-2">8</span> Are you ready?</h2>
<div class="outline-text-2" id="text-8">
<p>
Make sure you <b>never buy</b> a 100G linecard that <b>does not</b> support interoperability!
</p>

<p>
What use case will you find for a standard 100G DWDM interface? While you ponder that, the TeraStream team will continue to push the limits for a harder, better, faster and stronger Internet.
</p>

<p>
We have some pretty <a href="file:///pictures-from-100G-dwdm-interop-lab">pictures from our lab</a> and you can look at the <a href="file:///100G-dwdm-configuration">router configuration</a> of how to configure your line cards for interop.
</p>
</div>
</div>
<div class="taglist"><a href="tags.html">Tags</a>: <a href="tag-terastream,.html">TeraStream,</a> <a href="tag-100g.html">100G</a> <a href="tag-dwdm.html">DWDM</a> </div>]]></description>
  <category>TeraStream,</category>
  <category>100G</category>
  <category>DWDM</category>
  <link>https://plajjan.github.io/2016-09-22-interoperable-100G.html</link>
  <pubDate>Thu, 22 Sep 2016 00:00:00 +0200</pubDate>
</item>
<item>
  <title>YANG versioning and backwards (in)compatibility</title>
  <description><![CDATA[
<div class="abstract">
<p>
A suggestion for how to handle backwards compatibility in a YANG modeled world.
</p>

</div>

<p>
YANG comes with a fairly strict set of rules for allowed modifications between model revision, so how do you make changes to your API while abiding to these rules?
</p>

<p>
If you've written YANG models yourself you might have ended up in the situation that you wanted to make backwards incompatible changes. If you are a user of YANG models you might have been bitten by someone else, like a vendor, producing YANG models with backwards incompatible changes between revision.
</p>

<p>
How do you keep a backwards compatible YANG modeled API while allowing for changes?
</p>

<div id="outline-container-orgc2b7a1e" class="outline-2">
<h2 id="orgc2b7a1e"><span class="section-number-2">1</span> YANG revision compatibility rules</h2>
<div class="outline-text-2" id="text-1">
<p>
YANG is defined in RFC6020, which has a <a href="https://tools.ietf.org/html/rfc6020#section-10">section</a> on what changes are allowed between revisions of a YANG model. 
</p>

<p>
The whole idea with having a model describing data is to leave a sort of "contract" to another party on what data is accepted. The rules in RFC6020 are defined such that you cannot break that contract.
</p>

<p>
For example, the first revision of model <code>foo</code> has the leaf <code>/bar</code>. If we realise this leaf isn't actually needed we cannot remove it in the second revision of the model since anyone with the first revision of the model might try to set a value for the <code>/bar</code> leaf.  Deleting the leaf would break the "contract".
</p>

<p>
I won't list all the rules here but they essentially boil down to only allowing additions. You cannot remove nodes or make changes that reduce the value space for a leaf.
</p>
</div>
</div>


<div id="outline-container-orgd2831ea" class="outline-2">
<h2 id="orgd2831ea"><span class="section-number-2">2</span> Offenders</h2>
<div class="outline-text-2" id="text-2">
<p>
I think one of the more clear examples of YANG compatibility breakage is Cisco's IOS XR as can be witnessed by the <a href="https://github.com/YangModels/yang/tree/master/vendor/cisco/xr/">XR YANG models published on GitHub.</a>
</p>

<p>
Cisco doesn't even try to hide that they are breaking YANG rules (kudos for that, I suppose), in fact there is a section in the README file of each subdirectory that reads:
</p>

<div class="org-src-container">
<pre class="src src-text">It should be noted that some of the modules released in
IOX-XR 6.0.1 break the backwards compatibility guidelines
defined in RFC 6020 when compared to the same modules
released in IOS-XR 6.0.1. This is because the "native" YANG
modules for IOS-XR are generated from internal schema files
that are an integral part of the implementation, and, as
such, these can change in ways that break backwards
compatibility per RFC 6020 guidelines when new features are
introduced or when bugs are fixed. Thus, while we rigorously
review the changes that impact the external YANG schema,
Cisco cannot guarantee full backwards compatibility of these
modules across releases.

However, when new versions of the native models are
released, the check-models.sh script, in conjunction with
pyang 1.6, can be used to determine what technically
incompatible changes have occurred. Please run check.sh from
this directory with pyang 1.5 or greater on your path thus:
</pre>
</div>

<p>
If you run the suggested commands you will see that there are incompatible changes between the majority of revisions:
</p>

<ul class="org-ul">
<li>5.3.0 -&gt; 5.3.1 fails</li>
<li>5.3.1 -&gt; 5.3.2 fails</li>
<li>5.3.2 -&gt; 5.3.3 fails</li>
<li>5.3.3 -&gt; 6.0.0 fails</li>
<li>6.0.0 -&gt; 6.0.1 works ok, I'm guessing because they didn't make any (or much)
changes to the models at all</li>
</ul>

<p>
If you happen to be using Cisco NSO (formerly Tail-F NCS) you might have noticed that you can't load the same module / namespace multiple times. You are supposed to load the latest revision, which will work (to a certain extent) with older models, or if you are using an older revision of the model you are still able to work with the leaves it contains. However, this only holds true if you stick to the YANG revision compatibility rules, which Cisco aren't.
</p>

<p>
With NSO you compile the YANG models into .fxs files which are then loaded by NSO. ncsc is the NSO compiler that takes care of the compilation step and it actually has an option relevant to this, namely <code>--lax-revision-merge</code>;
</p>

<div class="org-src-container">
<pre class="src src-text">--lax-revision-merge    When we have multiple revisions of
  the same module, the ncsc command to import the module
  will fail if a YANG module does not follow the YANG
  module upgrade rules. See RFC 6020. This option makes
  ncsc ignore those strict rules. Use with extreme care,
  the end result may be that NCS is incompatible with the
  managed devices.
</pre>
</div>

<p>
However, in the case of merging XR 5.1 and XR 5.3 models, it does not work as warned by the man page.
</p>

<p>
It's rather ironic how two Cisco products aren't compatible with each other while other products, such as JUNOS, works great together with Cisco NSO, even across different versions. Never buy more than one product from Cisco? ;)
</p>
</div>
</div>


<div id="outline-container-orgf5b561f" class="outline-2">
<h2 id="orgf5b561f"><span class="section-number-2">3</span> Solution?</h2>
<div class="outline-text-2" id="text-3">
<p>
The simple solution is of course that Cisco stops breaking YANG rules. However, I can understand it's difficult with their development process and sometimes you just have to make backwards incompatible changes. Besides, it's an industry wide problem and not just related to Cisco.
</p>

<p>
Let's first look at semver and then how we might merge the concept of semver with YANG versioning scheme that allows for backwards incompatibility.
</p>
</div>
</div>


<div id="outline-container-org166dd61" class="outline-2">
<h2 id="org166dd61"><span class="section-number-2">4</span> Semantic versioning</h2>
<div class="outline-text-2" id="text-4">
<p>
<a href="http://semver.org/">Semantic versioning</a> (semver for short) is a fairly widely accepted versioning scheme where the version is described as MAJOR.MINOR.PATCH. In essence, increment the:
</p>

<ul class="org-ul">
<li>MAJOR version when you make incompatible API changes,</li>
<li>MINOR version when you add functionality in a backwards-compatible manner, and</li>
<li>PATCH version when you make backwards-compatible bug fixes.</li>
</ul>

<p>
YANG however doesn't follow semver but I believe the same concept can be applied.
</p>
</div>
</div>


<div id="outline-container-org5c55667" class="outline-2">
<h2 id="org5c55667"><span class="section-number-2">5</span> YANG + semver = &lt;3 ?</h2>
<div class="outline-text-2" id="text-5">
<p>
The suggestion is simple:
</p>

<blockquote>
<p>
Let the MAJOR version form part of the model name and namespace and let the revisions of a YANG model represent the MINOR and PATCH versions.
</p>
</blockquote>

<p>
Following semver this means all the backwards <b>compatible</b> changes are made within the same YANG model with the addition of new revisions. Backwards <b>incompatible</b> changes however results in the MAJOR version being bumped and as the MAJOR version is part of the model name and namespace it means we effectively create a new YANG model.
</p>

<ul class="org-ul">
<li>for backwards <b>compatible</b> changes
<ul class="org-ul">
<li>keep MAJOR version, thus:
<ul class="org-ul">
<li>we keep the YANG module name &amp; namespace</li>
</ul></li>
<li>bump MINOR or PATCH version, thus:
<ul class="org-ul">
<li>add new revision in current YANG module</li>
</ul></li>
</ul></li>
<li>for backwards <b>incompatible</b> changes
<ul class="org-ul">
<li>bump MAJOR version, thus:
<ul class="org-ul">
<li>create a new YANG module name &amp; namespace based on new MAJOR version</li>
</ul></li>
<li>add a new revision to the new YANG module</li>
<li>let the old YANG module remain with the older MAJOR version, thus
maintaining backwards compatibility</li>
</ul></li>
</ul>
</div>
</div>

<div id="outline-container-org98d63a3" class="outline-2">
<h2 id="org98d63a3"><span class="section-number-2">6</span> An example</h2>
<div class="outline-text-2" id="text-6">
<p>
Let's say we have a module we wish to name <code>foo</code>. The first public release of it, keeping in line with semver, is v1.0.0. The module would thus be called <code>foo-v1</code> and with a namespace that also includes the <code>-v1</code> part, like <code>http://example.com/ns/yang/foo-v1</code>.
</p>

<p>
A bug fix is made, fixing a regexp for one of the leaves, but keeping inline with RFC6020 rules it does not decrease the allowed value space. Since it's a bug fix, we increase to semver v1.0.1. The YANG module will still be called <code>foo-v1</code> but we add a revision explaining the bug fix.
</p>

<p>
Similarly if we add a leaf, it is classified as a minor feature, thus bumping the semver MINOR version to v1.1.0. We still keep the module name <code>foo-v1</code> and add a revision, just as for the bug fix.
</p>

<p>
Now, if we decide to completely restructure a part of the module, including removing some containers and their leaves, we have made a backwards incompatible change and must bump the MAJOR version. The module will now be v2.0.0 and thus the name changes to <code>foo-v2</code> and the same change is reflected in the namespace. For the sake of clarity we can keep all the revisions from the v1 "line" of the module. We now have two modules; <code>foo-v1</code> and <code>foo-v2</code>.
</p>

<p>
Further bug fixes and minor feature additions can be made to both, or if you choose to only one (likely the v2). The v1 line will eventuelly be deprecated and the exact timeline for that is mosty the result of how long your organisation can or want to maintain multiple versions in parallel.
</p>
</div>
</div>

<div id="outline-container-org4809ebe" class="outline-2">
<h2 id="org4809ebe"><span class="section-number-2">7</span> YANG revision label</h2>
<div class="outline-text-2" id="text-7">
<p>
The "label" used in the revision statement in YANG models is an ISO 8601 date. This could potentially be replaced with a semver version but I don't believe it obviates the need to put the major version in the model name. If a backwards incompatible change is made we might want to support both MAJOR version 1 and 2 at the same time and thus need to load two versions of the model. How are we to do that if both versions have the same name? How do we store two different YANG modules on disk if the filename doesn't reflect the MAJOR version?
</p>
</div>
</div>

<div id="outline-container-org604bcf9" class="outline-2">
<h2 id="org604bcf9"><span class="section-number-2">8</span> Thoughts?</h2>
<div class="outline-text-2" id="text-8">
<p>
There are probably more aspects to consider associated with this suggestion. For example, YANG models can refer to each other, through imports or submodules. If a large number of models are "intertwined" through reference it might not be apparent which of these models can or should be upgraded in a MAJOR version bump.
</p>

<p>
Do you have any thoughts? Don't hesitate in reaching out to me (contact details in the page footer).
</p>

<p>
Incidentally, just a few days after I wrote the first draft of this post I noticed that Brocade had put a <code>-v1</code> in the name of their YANG models. I'm not sure about their rationale but I suspect it is rather similar to what I've outlined here.
</p>
</div>
</div>
<div class="taglist"><a href="tags.html">Tags</a>: <a href="tag-yang.html">YANG</a> </div>]]></description>
  <category>YANG</category>
  <link>https://plajjan.github.io/2016-07-04-YANG-versioning.html</link>
  <pubDate>Mon, 04 Jul 2016 00:00:00 +0200</pubDate>
</item>
<item>
  <title>Bootstrapping virtual Cisco XR routers</title>
  <description><![CDATA[
<p>
Cisco IOS XR virtual routers support something called CVAC which allows passing the initial configuration of the router via a virtual drive. It's rather similar to Cloud-init, if you are familiar with that, or with what Juniper calls config-drive.
</p>

<p>
It's fairly simple, you create one or two config files, bake them into an ISO file and mount that ISO as a CD-ROM drive when you start the VM. XR will check if there's a CD-ROM attached and if so it'll do the equivalent of `copy CONFIG_FILE running-config`.
</p>

<p>
The two potential config files are
</p>

<ul class="org-ul">
<li>iosxr_config.txt - normal XR config file</li>
<li>iosxr_config_admin.txt - admin mode config file</li>
</ul>

<p>
Create them like you would any other config file. In my case I just want to bootstrap the image with a mgmt-IP, NETCONF server running and some initial user credentials.
</p>

<p>
<code>iosxr_config.txt</code>:
</p>
<div class="org-src-container">
<pre class="src src-text">hostname router-{0:0&gt;2}
interface MgmtEth0/0/CPU0/0
 ipv4 address 10.0.0.{0}/24
 ipv6 address 2001:db8:0::{0}/64
 no shutdown
 !
ssh server v2
ssh server netconf port 830
netconf agent ssh
end
</pre>
</div>

<p>
<code>iosxr_config_admin.txt</code>:
</p>
<div class="org-src-container">
<pre class="src src-text">username my-user
 group root-system
 secret 5 $1$p00f$r3aLlyS3crEt.Yo
 !
end
</pre>
</div>

<p>
The above config is for XR 5.1.1.54U-terastream. For 5.3.3.51U-terastream I need to modify the SSH &amp; NETCONF configuration for it to work.
</p>

<div class="org-src-container">
<pre class="src src-text">ssh server v2
ssh server netconf vrf default
netconf-yang agent ssh
end
</pre>
</div>

<p>
YMMV depending on what version you are on. I have a Python script doing all of this, which explains the use of {0} for formatting/substitution.
</p>

<p>
Anyway, once you have the config files, bake them into an ISO with mkisofs:
</p>

<div class="org-src-container">
<pre class="src src-shell">mkisofs -output vms/<span style="color: #4f97d7;">{</span><span style="color: #a45bad;">0</span><span style="color: #4f97d7;">}</span>-config.iso -l -input-charset iso8859-1 -V config-1 --relaxed-filenames --iso-level <span style="color: #a45bad;">2</span> iosxr_config.txt iosxr_config_admin.txt
</pre>
</div>

<p>
You don't have to use both config files if you don't want to.
</p>

<p>
Now start the VM with the ISO attached as a CD. I boot the whole thing using good ol' qemu - no fancy libvirt (for now) - so for me it's:
</p>

<div class="org-src-container">
<pre class="src src-shell">qemu-system-x86_64 -enable-kvm <span style="color: #2d9574;">\</span>
  -display none -daemonize -m <span style="color: #a45bad;">4096</span> <span style="color: #2d9574;">\</span>
  -serial telnet:127.0.0.1:1040,server,nowait <span style="color: #2d9574;">\</span>
  -hda vms/40.qcow2 -cdrom vms/40-config.iso
  ... <span style="color: #4f97d7;">(</span>followed by LOTS of NICs - snipped out for brevity<span style="color: #4f97d7;">)</span> ...
</pre>
</div>

<p>
There's an alternative syntax for qemu using -drive and if you are using libvirt you need to edit the XML config. See <a href="http://www.cisco.com/c/en/us/td/docs/routers/virtual-routers/configuration/guide/b-xrv9k-cg/b-xrv9k-cg_chapter_0110.html#concept_35D723DC31054FA4AFC1125EDD7281C1">this Cisco page</a> for some examples.
</p>

<p>
While this takes care of mgmt IP, starting the NETCONF server and creating an initial user, it doesn't generate SSH keys and since we can only pass a config file via CVAC it's a bit tricky to ask the box to generate keys. It is actually possible to put "do crypto key generate" in the config file and it will run this in operational mode. Unfortunately XR will interactively prompt for the key length so this method doesn't work out. On IOS it is possible to specify the key length on the command line so if you are on IOS (or XE) you are in luck.
</p>

<p>
Since I'm doing all this for a CI environment, it's not very important to have unique keys, the virtual routers aren't reachable from anything but the CI runner VM anyway, so I decided to pre-seed the base image with a key.
</p>

<p>
I don't want to modify the original image I got from Cisco, so I moved it aside and used it as base for my new image.
</p>

<div class="org-src-container">
<pre class="src src-shell">mv iosxrv-k9-demo-5.1.1.54U.vmdk original-iosxrv-k9-demo-5.1.1.54U.vmdk
qemu-img create -f qcow2 -b original-iosxrv-k9-demo-5.1.1.54U.vmdk iosxrv-k9-demo-5.1.1.54U.vmdk
... start VM with iosxrv-k9-demo-5.1.1.54U.vmdk image ...
</pre>
</div>

<p>
XR will prompt you to configure the root-system username the first time i starts, which I did, I then run <code>crypto key generate rsa</code> after which I wipe the configuration clean:
</p>

<div class="org-src-container">
<pre class="src src-text">ios con0/0/CPU0 is now available



Press RETURN to get started.

!!!!!!!!!!!!!!!!!!!! NO root-system username is configured. Need to configure root-system username. !!!!!!!!!!!!!!!!!!!!

         --- Administrative User Dialog ---


  Enter root-system username: my-user
  Enter secret:

... snip ...

User Access Verification

Username: my-user
Password:


RP/0/0/CPU0:ios#crypto key generate rsa
Thu May 19 10:22:47.611 UTC
The name for the keys will be: the_default
  Choose the size of the key modulus in the range of 512 to 4096 for your General Purpose Keypair. Choosing a key modulus greater than 512 may take a few minutes.

How many bits in the modulus [1024]: 4096
Generating RSA keys ...
Done w/ crypto generate keypair
[OK]
RP/0/0/CPU0:ios#configure
Thu May 19 10:24:28.884 UTC
RP/0/0/CPU0:ios(config)#commit replace best-effort
Thu May 19 10:24:33.474 UTC

This commit will replace or remove the entire running configuration. This
operation can be service affecting.
Do you wish to proceed? [no]: yes
RP/0/0/CPU0:ios(config)#exit
RP/0/0/CPU0:ios#admin
Thu May 19 10:24:37.633 UTC
RP/0/0/CPU0:ios(admin)#config
Thu May 19 10:24:40.823 UTC
RP/0/0/CPU0:ios(admin-config)#commit replace best-effort
Thu May 19 10:24:45.583 UTC

This commit will replace or remove the entire admin running configuration. This
operation can be service affecting.
Do you wish to proceed? [no]: yes
RP/0/0/CPU0:ios(admin-config)#exit
RP/0/0/CPU0:ios(admin)#exit
RP/0/0/CPU0:ios#exit
</pre>
</div>

<p>
and you'll be back to where it prompts you to go through the initial config of root-system username - i.e. "factory reset" but with a SSH key loaded.
</p>

<p>
Do you know of way to generate a key through CVAC or similar? Please reach out to me (contact details in the page footer)!
</p>
<div class="taglist"><a href="tags.html">Tags</a>: <a href="tag-xr.html">XR</a> </div>]]></description>
  <category>XR</category>
  <link>https://plajjan.github.io/2016-05-19-bootstrapping-virtual-XR.html</link>
  <pubDate>Thu, 19 May 2016 00:00:00 +0200</pubDate>
</item>
<item>
  <title>Free DDoS mitigation for all!</title>
  <description><![CDATA[
<p>
The number of DDoS attacks and the size of those attacks are ever-increasing and poses a threat to the Internet and in extension, our society. Without in-depth knowledge or prior experience, anyone can rent a DDoS botnet for tens of dollars an hour and attack anyone they wish with enough traffic to bring down the vast majority of potential targets on the Internet.
</p>

<p>
At the same time we have two movements going on; the convergence of all services to the Internet and the importance of those services in our everyday life.
</p>

<p>
I'm not just talking about people using the Internet to a greater extent so that they can share pictures of their children or cats. More and more functions of our society are being handled over the Internet. You need the Internet to do your online banking, fill in tax forms or maybe we'll see an 911 style app for emergencies.
</p>

<p>
Some argue that operators should separate important traffic, such as VoIP, so that it is still possible to call 112 or 911 in the event of DDoS attacks or other issues with an Internet network. I fundamentally don't believe in this approach. Technical evolution and market economy pushes operators to converge on the Internet as the single bearer of all services. Gone are the days when there was a dedicated network for telephony and another for TV. Operators are today, or will shortly be, using the same IP network to carry all those services together with Internet. There's also nothing to say that those services wouldn't be attacked just because they are moved to separate infrastructure. Compare it to IPX, which had some delusional concept of being a secure network, as if there was an evil bit. Nonsense.
</p>

<div id="outline-container-org69d245a" class="outline-2">
<h2 id="org69d245a"><span class="section-number-2">1</span> Internet &gt; *</h2>
<div class="outline-text-2" id="text-1">
<p>
There are examples of when the Internet actually works better than classic networks, like during the recent events in Belgium when Alexander De Croo, deputy prime minister of Belgium, tweeted that standard mobile connections in Brussels were overloaded as a result of people trying to reach one another following the attacks. De Croo urged people to avoid using standard services like phone calls and text messages, saying that residents should use Facebook, WhatsApp and Twitter via Wi-Fi connections instead.
</p>

<p>
The Internet is important. It's the one network over which all services will converge and it needs to work for everyone and all the time. 
</p>

<p>
DDoS attacks is probably the biggest threat to the Internet. Not necessarily for the infrastructure that makes up the Internet - we've already seen plenty of really large attacks and while it might overload a couple of links here and there it is generally not the infrastructure itself that takes the biggest hit - it's the end hosts.
</p>

<p>
Media focuses on the large attacks, you've all seen the 200Gbps attacks, the 300Gbps one, the 400Gbps one and so forth. What never gets much attention are the attacks towards residential customers.
</p>

<p>
I never thought I'd say this but I have to give some credit to Arbor. I've met with them numerous times over my career and their sales pitch often center around that you don't know about the attacks going on in your network. I often shook this off with the rationale that if there were attacks going on that I need worry about I would see congested links in my network. Naturally there were attacks where you'd see the impact on your backbone links but what I learned after having installed my first Arbor system was that those attacks were just the tip of an iceberg. In addition to these larger attacks there are an order of magnitude, or maybe two orders, more attacks that are in the hundreds of megabit or few gigabits per second.
</p>

<p>
The first time I started monitoring residential customers and seeing these attacks I was perplexed. I saw tens of attacks, if not hundreds, per day. Were they just legitimate (rather fast) downloads? Nope, analysis of the traffic showed typical DDoS patterns; fragmentation attacks, UDP amplification via NTP, SNMP, chargen, DNS or similar. Why are there so many attacks towards residential customers? And they often lasted for just a couple of minutes. After some time we realised that for many of the targets, the legitimate traffic flowing in parallel to the attack was some kind of online gaming traffic. People are using DDoS as a tool in bringing down opponents in online games. I think this comes to prove that DDoS attacks are utterly ubiquitous when it is so cheap and easy to launch one that you would do it to win an online game.
</p>

<p>
So might you might think; who cares about a few gamers? People using the Internet for serious things like online banking aren't playing games. Obviously that's not true. Internet connections are often shared and the 15-year old of the household could cause mommy to not reach her bank online. Maybe she does banking with her iPhone, which has its own 4G connection and isn't depending on that fixed connection of the home? There are certainly workarounds but in the end it really doesn't matter, the Internet is important enough for it to work.
</p>

<p>
There's another aspect of it as well, namely collateral damage. The way operator networks are built, a large portion of the infrastructure is shared by many customers. An attack on one customer could congest a metro network affecting thousands of other customers. Or the central nodes of a mobile network, like firewalls, CGN (ugh) or packet gateways, could be hit and affect thousands if not millions of other customers.
</p>

<p>
With all of this in mind, I think the conclusion is rather obvious; Operators need to mitigate volumetric DDoS attacks for their customers and do so for free!
</p>

<blockquote>
<p>
DDoS mitigation should be regarded as an integral part of delivering Internet service. Much like an e-mail service without a SPAM filter is close to unimaginable, Internet without DDoS mitigation should be unimaginable.
</p>
</blockquote>

<p>
To do this, ISPs need tools and unfortunately most tools available on the market are in excess of a million dollars. I believe we need free and open source tools to empower operators to protect themselves and their customers from these attacks.
</p>

<p>
This was what <a href="file:///NFV-style-DDoS-mitigation-using-Snabb-Switch/">I wanted to do back when I wrote the first proof of concept DDoS mitigation program using Snabb Switch</a>.
</p>

<p>
With attacks happening so frequently and with such short duration it is imperative to handle them automatically both from an efficiency standpoint as well as from a cost perspective.
</p>

<p>
Not all attacks are possible to deal with in an automated fashion. We usually divide DDoS attacks into one of two categories, roughly described as;
</p>

<ul class="org-ul">
<li>Volumetric attacks, that are dumb but very very large in volume (thus "volumetric"). They seek to render a service unusable by congesting network links or similar.</li>
<li>Application layer attacks, like an HTTP flood. Often consumes the CPU resources on the target system by attacking some weakness, thereby rendering the service unusable using vastly less network resources than a volumetric attack.</li>
</ul>

<p>
In practice some attacks fall in between these two categories, showing traits of both types. Just think of these as two extremes on a scale. Due to their size, volumetric attacks are usually easy to spot and their simplistic nature often make them fairly easy to filter using stateless filtering functionality in routers. This is the end of the scale that we want to target with automated mitigations.
</p>

<p>
On the other end of the scale we could have an HTTP flood. For example, a dynamic web page could be attacked by finding the slowest operation, like a form submit that in turn triggers a database update. Even a moderate amount of requests for such a page could render the site unusable.
</p>

<p>
The best defense against application layer attacks is simply to develop robust and secure applications. Developers must be aware of how application attacks work and build software defenses right into their applications. Since application attacks are typically small in terms of volume, there is no benefit in trying to solve them on the ISP side and thus our free DDoS mitigation system can focus exclusively on the much simpler volumetric attacks.
</p>

<p>
In summary, we need a solution that:
</p>

<ul class="org-ul">
<li>can mitigate volumetric attacks</li>
<li>automatically trigger mitigations</li>
<li>is free and open source</li>
<li>is cheap to implement using standard x86 servers</li>
</ul>

<p>
And this is why I will be spending the 7th of April, together with Lukas Garberg, at the Tele2 Hackday to test new ideas around automagic DDoS mitigation using Snabb Switch! If you have ideas or comments, <a href="https://twitter.com/plajjan">tweet me!</a>.
</p>
</div>
</div>
<div class="taglist"><a href="tags.html">Tags</a>: <a href="tag-ddos,.html">DDoS,</a> <a href="tag-snabb.html">Snabb</a> </div>]]></description>
  <category>DDoS,</category>
  <category>Snabb</category>
  <link>https://plajjan.github.io/2016-03-28-Free-DDoS-mitigation-for-all.html</link>
  <pubDate>Mon, 28 Mar 2016 00:00:00 +0200</pubDate>
</item>
<item>
  <title>Cisco IOS XR 6.0 and YANG</title>
  <description><![CDATA[
<p>
IOS XR has featured a NETCONF interface for quite some time but it was only
with the 5.3.0 release that Cisco coupled it with proper YANG modeled
configuration and operational data. Before that they used XML Schema Definition
(XSD) to describe the data transported over the XML agent / NETCONF interface.
</p>

<p>
To be honest the difference between what Cisco calls XML agent and their NETCONF
server is still a bit unclear to me. Maybe I'll dig through that sometime but
I'm all focused on NETCONF/YANG and we know Cisco is headed in that direction
so looking at the XML agent would be merely to satisfy my curiosity.
</p>

<p>
Unlike JUNOS, which features one massive YANG model (it's over 250k lines),
Cisco has opted to split the configuration into many smaller YANG models. When
YANG models were introduced in 5.3.0 they shipped it with 61 models, totalling
12451 lines. Naturally the number of models or lines in those models doesn't
give an exact figure on coverage of configurational or operational data but I
hope it gives a hint at least. The coverage of these 61 models was actually
rather poor so in practice it wasn't usable for anything.
</p>

<p>
5.3.1 bumped the number to 24812 lines over 99 models. Obviously an improvement
but still pretty far from usable. For example, neither 5.3.0 or 5.3.1 featured
any configuration of routing protocols. You could configure interfaces, IP
addresses, some system settings and so forth but far from being usable to
configure an entire router.
</p>

<p>
5.3.2 brought along BGP, policy configuration, some file system stuff as well
as a number of updates. The number of models only increased from 99 to 106 but
lines went from 24812 to 45775 of which the lions share are from the BGP models
and in particular the BGP operational model. Progress after all!
</p>

<p>
There is a <a href="https://github.com/YangModels/yang">YangModels repository on GitHub</a>, where you can conveniently browse
the <a href="https://github.com/YangModels/yang/tree/master/vendor/cisco/xr">models available in XR</a> up to
5.3.2.
</p>

<p>
I work with the TeraStream project within Deutsche Telekom and we have been an
early adopter of NETCONF and YANG. In fact, it's one of the foundational
pillars of the network architecture. Everything MUST (RFC2119) support
NETCONF/YANG. We have worked with Cisco for years and have private builds of XR
featuring loads of YANG models (142575 lines spread over 242 models). As I
spend a lot of time with NETCONF &amp; YANG in my every day work, a lot of people
ask me about the state of the implementations and how they can use it. The
conversations usually go down with me saying something like "NETCONF/YANG works
great on XR&#x2026; bla bla &#x2026; as long as you have a private build with all YANG
models". Unlike TeraStream, which is in some form of pilot state, most people
run actual production networks and just want working solutions. Running a
private test build isn't for them.
</p>

<p>
Cisco released XR 6.0 yesterday and I <a href="https://upload.cisco.com/cgi-bin/swc/fileexg/main.cgi?CONTYPES=Cisco-IOS-XRv">downloaded a demo of XRv</a>
today to have a look at the coverage of YANG models. Have a look at this (and
sorry for the long output):
</p>

<div class="org-src-container">
<pre class="src src-shell">
kll@lab $ ssh <span style="color: #a45bad;">1.3.3.7</span> -p <span style="color: #a45bad;">830</span> -s netconf

IMPORTANT:  READ CAREFULLY
Welcome to the Demo Version of Cisco IOS XRv <span style="color: #4f97d7;">(</span>the <span style="color: #2d9574;">"Software"</span><span style="color: #4f97d7;">)</span><span style="color: #4f97d7;">.</span>
The Software is subject to and governed by the terms and conditions
of the End User License Agreement and the Supplemental End User
License Agreement accompanying the product, made available at the
<span style="color: #4f97d7; font-weight: bold;">time</span> of your order, or posted on the Cisco website at
<span style="color: #bc6ec5; font-weight: bold;">www.cisco.com/go/terms</span> <span style="color: #4f97d7;">(</span>collectively, the <span style="color: #2d9574;">"Agreement"</span><span style="color: #4f97d7;">)</span><span style="color: #4f97d7;">.</span>
As set forth more fully<span style="color: #4f97d7; font-weight: bold;"> in</span> the Agreement, use of the Software is
strictly limited to internal use<span style="color: #4f97d7; font-weight: bold;"> in</span> a non-production environment
solely for demonstration and evaluation purposes.  Downloading,
installing, or using the Software constitutes acceptance of the
Agreement, and you are binding yourself and the business entity
that you represent to the Agreement.  If you do not agree to all
of the terms of the Agreement, then Cisco is unwilling to license
the Software to you and <span style="color: #4f97d7;">(</span>a<span style="color: #4f97d7;">)</span> you may not download, install or use the
Software, and <span style="color: #4f97d7;">(</span>b<span style="color: #4f97d7;">)</span> you may return the Software as more fully set forth
<span style="color: #4f97d7; font-weight: bold;">in</span> the Agreement.


Please login with any configured user/password, or cisco/cisco

kll@<span style="color: #a45bad;">1.3.3.7</span><span style="color: #2d9574;">'s password:</span>
<span style="color: #2d9574;">&lt;hello xmlns="urn:ietf:params:xml:ns:netconf:base:1.0"&gt;</span>
<span style="color: #2d9574;"> &lt;capabilities&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;urn:ietf:params:netconf:base:1.1&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;urn:ietf:params:xml:ns:yang:ietf-netconf-monitoring&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;urn:ietf:params:netconf:capability:candidate:1.0&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;urn:ietf:params:netconf:capability:rollback-on-error:1.0&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;urn:ietf:params:netconf:capability:validate:1.1&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;urn:ietf:params:netconf:capability:confirmed-commit:1.1&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-aaa-locald-admin-cfg?module=Cisco-IOS-XR-aaa-locald-admin-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-aaa-locald-cfg?module=Cisco-IOS-XR-aaa-locald-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-aaa-locald-oper?module=Cisco-IOS-XR-aaa-locald-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-aaa-protocol-radius-cfg?module=Cisco-IOS-XR-aaa-protocol-radius-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-aaa-protocol-radius-oper?module=Cisco-IOS-XR-aaa-protocol-radius-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-aaa-tacacs-cfg?module=Cisco-IOS-XR-aaa-tacacs-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-aaa-tacacs-oper?module=Cisco-IOS-XR-aaa-tacacs-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-bundlemgr-cfg?module=Cisco-IOS-XR-bundlemgr-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-bundlemgr-oper?module=Cisco-IOS-XR-bundlemgr-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-cdp-cfg?module=Cisco-IOS-XR-cdp-cfg&amp;amp;revision=2015-07-30&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-cdp-oper?module=Cisco-IOS-XR-cdp-oper&amp;amp;revision=2015-01-07&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-clns-isis-cfg?module=Cisco-IOS-XR-clns-isis-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-clns-isis-datatypes?module=Cisco-IOS-XR-clns-isis-datatypes&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-clns-isis-oper?module=Cisco-IOS-XR-clns-isis-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-common-acl-datatypes?module=Cisco-IOS-XR-common-acl-datatypes&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-config-mda-cfg?module=Cisco-IOS-XR-config-mda-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-config-mibs-cfg?module=Cisco-IOS-XR-config-mibs-cfg&amp;amp;revision=2015-01-07&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-controller-optics-cfg?module=Cisco-IOS-XR-controller-optics-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-controller-optics-oper?module=Cisco-IOS-XR-controller-optics-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-controller-otu-cfg?module=Cisco-IOS-XR-controller-otu-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-controller-otu-oper?module=Cisco-IOS-XR-controller-otu-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-crypto-sam-cfg?module=Cisco-IOS-XR-crypto-sam-cfg&amp;amp;revision=2015-01-07&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-crypto-sam-oper?module=Cisco-IOS-XR-crypto-sam-oper&amp;amp;revision=2015-01-07&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-crypto-ssh-cfg?module=Cisco-IOS-XR-crypto-ssh-cfg&amp;amp;revision=2015-07-30&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-crypto-ssh-oper?module=Cisco-IOS-XR-crypto-ssh-oper&amp;amp;revision=2015-06-02&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-drivers-media-eth-cfg?module=Cisco-IOS-XR-drivers-media-eth-cfg&amp;amp;revision=2015-07-30&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-drivers-media-eth-oper?module=Cisco-IOS-XR-drivers-media-eth-oper&amp;amp;revision=2015-10-14&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ethernet-cfm-cfg?module=Cisco-IOS-XR-ethernet-cfm-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ethernet-cfm-datatypes?module=Cisco-IOS-XR-ethernet-cfm-datatypes&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ethernet-cfm-oper?module=Cisco-IOS-XR-ethernet-cfm-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ethernet-link-oam-cfg?module=Cisco-IOS-XR-ethernet-link-oam-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ethernet-link-oam-oper?module=Cisco-IOS-XR-ethernet-link-oam-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ethernet-lldp-cfg?module=Cisco-IOS-XR-ethernet-lldp-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ethernet-lldp-oper?module=Cisco-IOS-XR-ethernet-lldp-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-fib-common-oper?module=Cisco-IOS-XR-fib-common-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ha-eem-cfg?module=Cisco-IOS-XR-ha-eem-cfg&amp;amp;revision=2015-07-30&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ha-eem-oper?module=Cisco-IOS-XR-ha-eem-oper&amp;amp;revision=2015-01-07&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-icpe-infra-cfg?module=Cisco-IOS-XR-icpe-infra-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-icpe-infra-oper?module=Cisco-IOS-XR-icpe-infra-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ifmgr-cfg?module=Cisco-IOS-XR-ifmgr-cfg&amp;amp;revision=2015-07-30&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ifmgr-oper?module=Cisco-IOS-XR-ifmgr-oper&amp;amp;revision=2015-07-30&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-infra-alarm-logger-cfg?module=Cisco-IOS-XR-infra-alarm-logger-cfg&amp;amp;revision=2015-07-30&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-infra-alarm-logger-datatypes?module=Cisco-IOS-XR-infra-alarm-logger-datatypes&amp;amp;revision=2015-01-07&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-infra-alarm-logger-oper?module=Cisco-IOS-XR-infra-alarm-logger-oper&amp;amp;revision=2015-01-07&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-infra-ceredundancymib-cfg?module=Cisco-IOS-XR-infra-ceredundancymib-cfg&amp;amp;revision=2015-01-07&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-infra-dumper-cfg?module=Cisco-IOS-XR-infra-dumper-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-infra-infra-clock-cfg?module=Cisco-IOS-XR-infra-infra-clock-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-infra-infra-locale-cfg?module=Cisco-IOS-XR-infra-infra-locale-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-infra-objmgr-cfg?module=Cisco-IOS-XR-infra-objmgr-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-infra-objmgr-oper?module=Cisco-IOS-XR-infra-objmgr-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-infra-policymgr-oper?module=Cisco-IOS-XR-infra-policymgr-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-infra-rmf-oper?module=Cisco-IOS-XR-infra-rmf-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-infra-rsi-cfg?module=Cisco-IOS-XR-infra-rsi-cfg&amp;amp;revision=2015-07-30&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-infra-rsi-oper?module=Cisco-IOS-XR-infra-rsi-oper&amp;amp;revision=2015-01-07&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-infra-sla-cfg?module=Cisco-IOS-XR-infra-sla-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-infra-sla-datatypes?module=Cisco-IOS-XR-infra-sla-datatypes&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-infra-sla-oper?module=Cisco-IOS-XR-infra-sla-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-infra-statsd-cfg?module=Cisco-IOS-XR-infra-statsd-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-infra-statsd-oper?module=Cisco-IOS-XR-infra-statsd-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-infra-syslog-cfg?module=Cisco-IOS-XR-infra-syslog-cfg&amp;amp;revision=2015-10-08&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-infra-syslog-oper?module=Cisco-IOS-XR-infra-syslog-oper&amp;amp;revision=2015-12-01&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-infra-systemmib-cfg?module=Cisco-IOS-XR-infra-systemmib-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ip-bfd-cfg?module=Cisco-IOS-XR-ip-bfd-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ip-bfd-oper?module=Cisco-IOS-XR-ip-bfd-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ip-domain-cfg?module=Cisco-IOS-XR-ip-domain-cfg&amp;amp;revision=2015-05-13&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ip-domain-oper?module=Cisco-IOS-XR-ip-domain-oper&amp;amp;revision=2015-09-29&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ip-iarm-datatypes?module=Cisco-IOS-XR-ip-iarm-datatypes&amp;amp;revision=2015-01-07&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ip-iep-cfg?module=Cisco-IOS-XR-ip-iep-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ip-iep-oper?module=Cisco-IOS-XR-ip-iep-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ip-ntp-admin-oper?module=Cisco-IOS-XR-ip-ntp-admin-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ip-ntp-cfg?module=Cisco-IOS-XR-ip-ntp-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ip-ntp-oper?module=Cisco-IOS-XR-ip-ntp-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ip-pfilter-cfg?module=Cisco-IOS-XR-ip-pfilter-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ip-pfilter-oper?module=Cisco-IOS-XR-ip-pfilter-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ip-rib-cfg?module=Cisco-IOS-XR-ip-rib-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ip-rib-ipv4-oper?module=Cisco-IOS-XR-ip-rib-ipv4-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ip-rib-ipv6-oper?module=Cisco-IOS-XR-ip-rib-ipv6-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ip-rsvp-cfg?module=Cisco-IOS-XR-ip-rsvp-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ip-rsvp-oper?module=Cisco-IOS-XR-ip-rsvp-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ip-static-cfg?module=Cisco-IOS-XR-ip-static-cfg&amp;amp;revision=2015-09-10&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ip-tcp-cfg?module=Cisco-IOS-XR-ip-tcp-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ip-tcp-oper?module=Cisco-IOS-XR-ip-tcp-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ip-udp-cfg?module=Cisco-IOS-XR-ip-udp-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ip-udp-oper?module=Cisco-IOS-XR-ip-udp-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-acl-cfg?module=Cisco-IOS-XR-ipv4-acl-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-acl-datatypes?module=Cisco-IOS-XR-ipv4-acl-datatypes&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-acl-oper?module=Cisco-IOS-XR-ipv4-acl-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-arp-cfg?module=Cisco-IOS-XR-ipv4-arp-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-arp-oper?module=Cisco-IOS-XR-ipv4-arp-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-cfg?module=Cisco-IOS-XR-ipv4-bgp-cfg&amp;amp;revision=2015-08-27&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-datatypes?module=Cisco-IOS-XR-ipv4-bgp-datatypes&amp;amp;revision=2015-08-27&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-oper?module=Cisco-IOS-XR-ipv4-bgp-oper&amp;amp;revision=2015-08-27&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-io-cfg?module=Cisco-IOS-XR-ipv4-io-cfg&amp;amp;revision=2015-07-30&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-io-oper?module=Cisco-IOS-XR-ipv4-io-oper&amp;amp;revision=2015-10-20&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-ma-cfg?module=Cisco-IOS-XR-ipv4-ma-cfg&amp;amp;revision=2015-07-30&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-ma-oper?module=Cisco-IOS-XR-ipv4-ma-oper&amp;amp;revision=2015-10-20&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-ospf-cfg?module=Cisco-IOS-XR-ipv4-ospf-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-ospf-oper?module=Cisco-IOS-XR-ipv4-ospf-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-telnet-cfg?module=Cisco-IOS-XR-ipv4-telnet-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-telnet-mgmt-cfg?module=Cisco-IOS-XR-ipv4-telnet-mgmt-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ipv6-acl-cfg?module=Cisco-IOS-XR-ipv6-acl-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ipv6-acl-datatypes?module=Cisco-IOS-XR-ipv6-acl-datatypes&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ipv6-acl-oper?module=Cisco-IOS-XR-ipv6-acl-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ipv6-io-cfg?module=Cisco-IOS-XR-ipv6-io-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ipv6-io-oper?module=Cisco-IOS-XR-ipv6-io-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ipv6-ma-cfg?module=Cisco-IOS-XR-ipv6-ma-cfg&amp;amp;revision=2015-07-30&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ipv6-ma-oper?module=Cisco-IOS-XR-ipv6-ma-oper&amp;amp;revision=2015-10-20&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ipv6-nd-cfg?module=Cisco-IOS-XR-ipv6-nd-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ipv6-nd-oper?module=Cisco-IOS-XR-ipv6-nd-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ipv6-new-dhcpv6d-oper?module=Cisco-IOS-XR-ipv6-new-dhcpv6d-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ipv6-ospfv3-cfg?module=Cisco-IOS-XR-ipv6-ospfv3-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-ipv6-ospfv3-oper?module=Cisco-IOS-XR-ipv6-ospfv3-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-l2-eth-infra-cfg?module=Cisco-IOS-XR-l2-eth-infra-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-l2-eth-infra-datatypes?module=Cisco-IOS-XR-l2-eth-infra-datatypes&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-l2-eth-infra-oper?module=Cisco-IOS-XR-l2-eth-infra-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-l2vpn-cfg?module=Cisco-IOS-XR-l2vpn-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-l2vpn-oper?module=Cisco-IOS-XR-l2vpn-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-lib-keychain-cfg?module=Cisco-IOS-XR-lib-keychain-cfg&amp;amp;revision=2015-07-30&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-lib-keychain-oper?module=Cisco-IOS-XR-lib-keychain-oper&amp;amp;revision=2015-01-07&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-lib-mpp-cfg?module=Cisco-IOS-XR-lib-mpp-cfg&amp;amp;revision=2015-07-30&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-lib-mpp-oper?module=Cisco-IOS-XR-lib-mpp-oper&amp;amp;revision=2015-01-07&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-lpts-lib-cfg?module=Cisco-IOS-XR-lpts-lib-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-lpts-pre-ifib-cfg?module=Cisco-IOS-XR-lpts-pre-ifib-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-man-netconf-cfg?module=Cisco-IOS-XR-man-netconf-cfg&amp;amp;revision=2015-07-30&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-man-xml-ttyagent-cfg?module=Cisco-IOS-XR-man-xml-ttyagent-cfg&amp;amp;revision=2015-07-30&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-man-xml-ttyagent-oper?module=Cisco-IOS-XR-man-xml-ttyagent-oper&amp;amp;revision=2015-10-29&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-mpls-ldp-cfg-datatypes?module=Cisco-IOS-XR-mpls-ldp-cfg-datatypes&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-mpls-ldp-cfg?module=Cisco-IOS-XR-mpls-ldp-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-mpls-ldp-oper-datatypes?module=Cisco-IOS-XR-mpls-ldp-oper-datatypes&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-mpls-ldp-oper?module=Cisco-IOS-XR-mpls-ldp-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-mpls-lsd-cfg?module=Cisco-IOS-XR-mpls-lsd-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-mpls-lsd-oper?module=Cisco-IOS-XR-mpls-lsd-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-mpls-oam-cfg?module=Cisco-IOS-XR-mpls-oam-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-mpls-static-cfg?module=Cisco-IOS-XR-mpls-static-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-mpls-static-oper?module=Cisco-IOS-XR-mpls-static-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-mpls-te-cfg?module=Cisco-IOS-XR-mpls-te-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-mpls-te-datatypes?module=Cisco-IOS-XR-mpls-te-datatypes&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-mpls-te-oper?module=Cisco-IOS-XR-mpls-te-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-nto-misc-shprocmem-oper?module=Cisco-IOS-XR-nto-misc-shprocmem-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-parser-cfg?module=Cisco-IOS-XR-parser-cfg&amp;amp;revision=2015-06-02&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-pfi-im-cmd-oper?module=Cisco-IOS-XR-pfi-im-cmd-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-plat-chas-invmgr-oper?module=Cisco-IOS-XR-plat-chas-invmgr-oper&amp;amp;revision=2015-01-07&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-pmengine-cfg?module=Cisco-IOS-XR-pmengine-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-pmengine-oper?module=Cisco-IOS-XR-pmengine-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-policy-repository-cfg?module=Cisco-IOS-XR-policy-repository-cfg&amp;amp;revision=2015-08-27&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-policy-repository-oper?module=Cisco-IOS-XR-policy-repository-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-qos-ma-oper?module=Cisco-IOS-XR-qos-ma-oper&amp;amp;revision=2015-01-07&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-rgmgr-cfg?module=Cisco-IOS-XR-rgmgr-cfg&amp;amp;revision=2015-07-30&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-rgmgr-oper?module=Cisco-IOS-XR-rgmgr-oper&amp;amp;revision=2015-01-07&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-segment-routing-ms-cfg?module=Cisco-IOS-XR-segment-routing-ms-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-segment-routing-ms-oper?module=Cisco-IOS-XR-segment-routing-ms-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-shellutil-cfg?module=Cisco-IOS-XR-shellutil-cfg&amp;amp;revision=2015-10-12&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-shellutil-filesystem-oper?module=Cisco-IOS-XR-shellutil-filesystem-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-shellutil-oper?module=Cisco-IOS-XR-shellutil-oper&amp;amp;revision=2015-01-07&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-snmp-agent-cfg?module=Cisco-IOS-XR-snmp-agent-cfg&amp;amp;revision=2015-10-27&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-snmp-agent-oper?module=Cisco-IOS-XR-snmp-agent-oper&amp;amp;revision=2015-10-08&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-snmp-entitymib-cfg?module=Cisco-IOS-XR-snmp-entitymib-cfg&amp;amp;revision=2015-01-07&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-snmp-entstatemib-cfg?module=Cisco-IOS-XR-snmp-entstatemib-cfg&amp;amp;revision=2015-07-27&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-snmp-frucontrolmib-cfg?module=Cisco-IOS-XR-snmp-frucontrolmib-cfg&amp;amp;revision=2015-01-07&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-snmp-ifmib-cfg?module=Cisco-IOS-XR-snmp-ifmib-cfg&amp;amp;revision=2015-05-14&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-snmp-ifmib-oper?module=Cisco-IOS-XR-snmp-ifmib-oper&amp;amp;revision=2015-01-07&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-snmp-syslogmib-cfg?module=Cisco-IOS-XR-snmp-syslogmib-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-traffmon-netflow-cfg?module=Cisco-IOS-XR-traffmon-netflow-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-tty-management-cfg?module=Cisco-IOS-XR-tty-management-cfg&amp;amp;revision=2015-09-25&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-tty-management-cmd-oper?module=Cisco-IOS-XR-tty-management-cmd-oper&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-tty-management-datatypes?module=Cisco-IOS-XR-tty-management-datatypes&amp;amp;revision=2015-01-07&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-tty-management-oper?module=Cisco-IOS-XR-tty-management-oper&amp;amp;revision=2015-01-07&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-tty-server-cfg?module=Cisco-IOS-XR-tty-server-cfg&amp;amp;revision=2015-07-30&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-tty-server-oper?module=Cisco-IOS-XR-tty-server-oper&amp;amp;revision=2015-07-30&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-tty-vty-cfg?module=Cisco-IOS-XR-tty-vty-cfg&amp;amp;revision=2015-01-07&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/cisco-xr-types?module=Cisco-IOS-XR-types&amp;amp;revision=2015-06-29&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/Cisco-IOS-XR-wd-cfg?module=Cisco-IOS-XR-wd-cfg&amp;amp;revision=2015-11-09&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;urn:ietf:params:xml:ns:yang:ietf-inet-types?module=ietf-inet-types&amp;amp;revision=2013-07-15&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;urn:ietf:params:xml:ns:yang:ietf-yang-types?module=ietf-yang-types&amp;amp;revision=2013-07-15&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://openconfig.net/yang/bgp?module=bgp&amp;amp;revision=2015-05-15&amp;amp;deviation=cisco-xr-bgp-deviations&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://openconfig.net/yang/bgp-multiprotocol?module=bgp-multiprotocol&amp;amp;revision=2015-05-15&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://openconfig.net/yang/bgp-operational?module=bgp-operational&amp;amp;revision=2015-05-15&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://openconfig.net/yang/bgp-policy?module=bgp-policy&amp;amp;revision=2015-05-15&amp;amp;deviation=cisco-xr-bgp-policy-deviations&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://openconfig.net/yang/bgp-types?module=bgp-types&amp;amp;revision=2015-05-15&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://openconfig.net/yang/routing-policy?module=routing-policy&amp;amp;revision=2015-05-15&amp;amp;deviation=cisco-xr-routing-policy-deviations&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://openconfig.net/yang/policy-types?module=policy-types&amp;amp;revision=2015-05-15&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/cisco-xr-bgp-deviations?module=cisco-xr-bgp-deviations&amp;amp;revision=2015-09-16&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/cisco-xr-bgp-policy-deviations?module=cisco-xr-bgp-policy-deviations&amp;amp;revision=2015-09-16&lt;/capability&gt;</span>
<span style="color: #2d9574;">  &lt;capability&gt;http://cisco.com/ns/yang/cisco-xr-routing-policy-deviations?module=cisco-xr-routing-policy-deviations&amp;amp;revision=2015-09-16&lt;/capability&gt;</span>
<span style="color: #2d9574;"> &lt;/capabilities&gt;</span>
<span style="color: #2d9574;"> &lt;session-id&gt;2506367397&lt;/session-id&gt;</span>
<span style="color: #2d9574;">&lt;/hello&gt;</span>
<span style="color: #2d9574;">]]&gt;]]&gt;</span>
</pre>
</div>

<p>
Would you look at that! 184 models. I haven't fetched the models from the box
just yet but I recognize a few from our private build, like clns-isis for IS-IS
config. At the end of the output you can see that Cisco has included a few
OpenConfig models as well! They have previously announced this, both privately
and <a href="http://blogs.cisco.com/sp/software-innovations-for-cloud-scale-networking#more-182229">publically</a>
but it's always nice to see it actually happen, especially as I am involved in
the OpenConfig working group, representing the interests of DT/TeraStream.
</p>

<p>
I'll be trying this out and comparing it to our private builds but I think it's
safe to say that Cisco has finally included enough YANG models to make it
possible to use NETCONF &amp; YANG as the primary interface to configure and
operate your XR box!
</p>
<div class="taglist"><a href="tags.html">Tags</a>: <a href="tag-xr,.html">XR,</a> <a href="tag-yang.html">YANG</a> </div>]]></description>
  <category>XR,</category>
  <category>YANG</category>
  <link>https://plajjan.github.io/2015-12-29-Cisco-IOS-XR-6-0-and-YANG.html</link>
  <pubDate>Sat, 19 Dec 2015 00:00:00 +0100</pubDate>
</item>
<item>
  <title>NFV-Style DDoS mitigation using Snabb Switch</title>
  <description><![CDATA[
<p>
My employer arranged for a hack day last month. It meant anyone participating was free to hack on anything they wanted and at the end of the day we got to present our work during a 2 minute flash presentation to our colleagues as well as a number of students from KTH's (Royal institute of technology) computer science program.
</p>

<p>
Together with my colleague, Johan Törnhult, we set out to build a simple DDoS mitigation application. I had previously looked at Snabb Switch and have followed the project, albeit from a distance, for quite some time. This was my chance to get acquainted with it and try out my programming skill set at Lua, a language I had never touched or even seen before.
</p>

<p>
In its essence, Snabb Switch is a framework to offer developers or network engineers with some programming skills (like me) to build their own packet forwarding logic. Code is packaged into "apps" and multiple apps can be linked together in a graph. You can't call Snabb a router or a switch because out of the box it neither routes or switches packets. With a minimal configuration you can have it forward packets (verbatim) from one port to another but as soon as you want to do something more advanced you would need an app.
</p>

<p>
Snabb comes with a number of apps, ranging from very small apps to replicate incoming packets over multiple outputs or read a pcap file and send over the network to more complete implementations like a VPWS app to build L2VPNs over an IP network.
</p>

<p>
There is definitely some room for improvement as far as the documentation for Snabb goes. It's a fast moving project, still in its relatively early life, which means some documentation is out of date while most of the documentation hasn't been written yet. Mostly by reading the code of other apps and some of the existing documentation I managed to forward my first packet through Snabb.
</p>

<p>
My intention was to implement a source host blocking mechanism that would block any host sending over a specified amount of packets or bytes per second and a few hours after my first unsteady steps I had my first working implementation. Performance was horrendous and it wouldn't recognize IPv6 packets correctly instead assuming everything to be IPv4. I did manage to find a library to apply BPF filters (the same you use to specify a filter with tcpdump) on a packet which I used to define rules. A rule has a traffic pattern to match and a pps and bps threshold. Once a source host exceeds the threshold for a rule it will be completely blocked for a certain amount of time.
</p>

<p>
The test machine used managed to push some 300Kpps of packets and over the next day or two I managed to tweak a few things to raise performance. One really comes to understand how crucial it is for performance to keep down the amount of code executed and the amount of data copied between various places. My first change was to use a library to parse the headers of the packet, first looking at the ethertype of the Ethernet header to determine if it was an IPv4 or IPv6 packet and after that to extract the source IP address from the packet. While I achieved support for IPv4 and IPv6, this parsing library proved to be fairly slow and instead I moved to just extracting the few bits that represent the ethertype and after that got the source IP address. Extracting the address used ntop (network to presentation) to convert 4 or 16 bytes to a string representation of the IP address. Again this is slow and simply having an IPv4 address represented as a uint32_t using Lua FFI (allowing C data structures within Lua) proved to be an order of magnitude faster.
</p>

<p>
I'm now up to around 5Mpps in real packet forwarding on a single core, when the majority of packets are being blocked. A selftest on my laptop, which is a fair bit slower than the "real" test machine, does 10Mpps which is somewhat surprising. Instead of receiving packets on a NIC, processing using my logic and sending to the next NIC (or dropping) it will read packets from a pcap file and continuously loop those packets into my app. I wouldn't have guessed the overhead surrounding handling real NICs would be that large.
</p>

<p>
Arbor implements something very similar in their TMS and Pravail series of products, which they call "Zombie Detection". 10Gbps/5Mpps of performance is in excess of $125k from Arbor while my x86 PC with 4 cores can do twice that for just under $2500 - that's two orders of magnitude cheaper, no surprise NFV is gaining traction. I know my comparison isn't fair but it just comes to show what can be done and what the future might hold.
</p>

<p>
You can find the code for the DDoS source blocker at <a href="https://github.com/plajjan/snabbswitch/">GitHub/plajjan/snabbswitch</a>. Reach out to me on Twitter if you want to ask me anything about it or discuss how to take it further - I would love someone to collaborate with :)
</p>

<p>
If you are interested in writing packet forwarding logic and haven't looked at Snabb Switch yet, I recommend you to do so - it is surprisingly easy to get going with!
</p>
<div class="taglist"><a href="tags.html">Tags</a>: <a href="tag-nso,.html">NSO,</a> <a href="tag-ncs,.html">NCS,</a> <a href="tag-network.html">network</a> <a href="tag-automation.html">automation</a> </div>]]></description>
  <category>NSO,</category>
  <category>NCS,</category>
  <category>network</category>
  <category>automation</category>
  <link>https://plajjan.github.io/2014-12-13-NFV-style-DDoS-mitigation-using-Snabb-Switch.html</link>
  <pubDate>Sat, 13 Dec 2014 00:00:00 +0100</pubDate>
</item>
</channel>
</rss>
